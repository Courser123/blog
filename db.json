{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640763728568},{"_id":"source/.DS_Store","hash":"f1376ebb6271e3fc6705f7fee3cddba8a901961b","modified":1640769317612},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1640767658454},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1640767658454},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1640767658454},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1640767658457},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1640767658457},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1640767658457},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1640767658457},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1640767658457},{"_id":"themes/next/_config.yml","hash":"ccd41ed5fc3027f81834c30fe4b67c0dac742dea","modified":1640767658458},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1640767658458},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1640767658462},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1640767658483},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1640769317614},{"_id":"source/categories/index.md","hash":"a20f1f7d848d1b4d6aeac3cbabf4059777c61ae8","modified":1640763728572},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1640767658446},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1640767658447},{"_id":"themes/next/.git/index","hash":"dfb3482dea5c0c8b248d51b89029980e00e81336","modified":1640767658524},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1640767634977},{"_id":"themes/next/.git/packed-refs","hash":"d32f01fe00ee1fc1523e89ac7d21953e8b8c6293","modified":1640767658444},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1640767658454},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1640767658455},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1640767658456},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1640767658456},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1640767658456},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1640767658456},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1640767658456},{"_id":"themes/next/.git/sourcetreeconfig","hash":"781710f09779691ceb688cda020e505c1fd53897","modified":1640767913231},{"_id":"themes/next/.git/FETCH_HEAD","hash":"ea8b8a0bc95fe4c5d47bf6b981c6c519f837077c","modified":1640767913374},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1640767658456},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1640767658456},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1640767658456},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1640767658457},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1640767658458},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1640767658459},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1640767658459},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1640767658459},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1640767658459},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1640767658459},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1640767658459},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1640767658460},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1640767658460},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1640767658463},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1640767658463},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1640767658463},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1640767658463},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1640767658463},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1640767658463},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1640767658463},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1640767658464},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1640767658464},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1640767658464},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1640767658464},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1640767658464},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1640767658465},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1640767658465},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1640767658465},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1640767658465},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1640767658465},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1640767658465},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1640767658466},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1640767658466},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1640767658466},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1640767658466},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1640767658466},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1640767658482},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1640767658482},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1640767658482},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1640767658483},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1640767658483},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1640767658483},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1640767658492},{"_id":"source/_posts/LeetCode/Reverse Integer.md","hash":"9f618657fba451c16055c88d1667d0511d3cecc8","modified":1640763728569},{"_id":"source/_posts/LeetCode/Two Sum.md","hash":"b274b4390a675371594164b8d2455e1e401fea42","modified":1640763728569},{"_id":"source/_posts/Swift Summary/Swift基本语法.md","hash":"763ce79bd928cb72f4a5e87b404a1ed2bb160588","modified":1640763728571},{"_id":"source/_posts/TechnicalSupport/Langya_novel_technical_support.md","hash":"4a8fbd60d973363a427ae646c616971f62128f8e","modified":1640763728571},{"_id":"source/_posts/Runtime/runtime机制(1)-基本数据结构.md","hash":"f14fbe7a6d17e0fd22d4edfb1a940d156d65de58","modified":1640763728570},{"_id":"source/_posts/备忘录/备忘录.md","hash":"22820cffd7e0c2d382ba21d6ace62e996f532800","modified":1640763728571},{"_id":"source/_posts/总结/OC项目集成DZMeBookRead.md","hash":"a7631c0c7038f0b10b9b1ea7881f463266f05505","modified":1640763728571},{"_id":"source/_posts/总结/使用Hexo-Github创建博客.md","hash":"5a1d3296de79e88f578b073efdf117687c422b9c","modified":1640763728572},{"_id":"source/_posts/iOS/.DS_Store","hash":"c40632adb1f0ee6b7b3b1074b26148a1eb1eaa86","modified":1640776373655},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1640767634979},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1640767634978},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1640767634981},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1640767634981},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1640767634979},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1640767634978},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1640767634981},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1640767634980},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1640767634980},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1640767634982},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1640767634977},{"_id":"themes/next/.git/logs/HEAD","hash":"af8da4e56fbf139bec4c4706dc24623926d9d1ae","modified":1640767658446},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1640767658455},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1640767658455},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1640767658455},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1640767658455},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1640767658461},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1640767658461},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1640767658461},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1640767658461},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1640767658461},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1640767658462},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1640767658462},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1640767658462},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1640767658462},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1640767658460},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1640767658460},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1640767658460},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1640767658461},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1640767658466},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1640767658467},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1640767658467},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1640767658473},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1640767658473},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1640767658474},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1640767658475},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1640767658475},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1640767658467},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1640767658468},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1640767658470},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1640767658470},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1640767658473},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1640767658477},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1640767658478},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1640767658479},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1640767658479},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1640767658484},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1640767658491},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1640767658491},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1640767658491},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1640767658491},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1640767658487},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1640767658487},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1640767658489},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1640767658489},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1640767658489},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1640767658492},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1640767658492},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1640767658492},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1640767658492},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1640767658493},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1640767658493},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1640767658493},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1640767658493},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1640767658494},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1640767658494},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1640767658495},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1640767658510},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1640767658514},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1640767658514},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1640767658514},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1640767658514},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1640767658515},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1640767658515},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1640767658515},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1640767658515},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1640767658515},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1640767658516},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1640767658516},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1640767658516},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1640767658516},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1640767658516},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1640767658516},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1640767658517},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1640767658517},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1640767658517},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1640767658517},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1640767658518},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1640767658519},{"_id":"source/_posts/iOS/UI/UITableView.md","hash":"9db60824a78fe51d987855b482d76cf0191bec83","modified":1640775803089},{"_id":"source/_posts/iOS/UI/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1640776373654},{"_id":"source/_posts/iOS/UI/图像显示原理.md","hash":"e2b999c522acafc73454041741e6a8d93590aa43","modified":1640832860457},{"_id":"source/_posts/iOS/UI/事件传递&响应者链.md","hash":"e4b469db2ac5399249029bd2341e59739956dd17","modified":1640781287651},{"_id":"themes/next/.git/refs/heads/master","hash":"1f55c26e44a15c914143917709c7008edfd94073","modified":1640767658446},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1640767658474},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1640767658474},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1640767658474},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1640767658475},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1640767658475},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1640767658468},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1640767658468},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1640767658469},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1640767658469},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1640767658469},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1640767658469},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1640767658470},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1640767658470},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1640767658470},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1640767658471},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1640767658471},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1640767658471},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1640767658471},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1640767658472},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1640767658472},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1640767658472},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1640767658472},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1640767658473},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1640767658476},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1640767658476},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1640767658476},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1640767658476},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1640767658477},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1640767658477},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1640767658477},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1640767658478},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1640767658478},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1640767658478},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1640767658478},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1640767658478},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1640767658479},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1640767658479},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1640767658479},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1640767658480},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1640767658480},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1640767658480},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1640767658480},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1640767658480},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1640767658481},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1640767658481},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1640767658481},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1640767658481},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1640767658481},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1640767658484},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1640767658484},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1640767658485},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1640767658485},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1640767658485},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1640767658486},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1640767658486},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1640767658486},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1640767658486},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1640767658487},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1640767658487},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1640767658513},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1640767658513},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1640767658513},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1640767658514},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1640767658514},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1640767658518},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1640767658518},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1640767658522},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1640767658522},{"_id":"source/_posts/iOS/UI/图像显示原理/7BA90FE9-B975-4D25-A870-2EB996926B64.png","hash":"1fc2360eb0bf82b87bc489a1254d368a70196fbc","modified":1640781571973},{"_id":"source/_posts/iOS/UI/图像显示原理/A2A666D8-C4D3-4702-86D9-00B76CEBC609.png","hash":"54524f0842a7b9c0f7b5a7110911c5a9a3de2350","modified":1640781464602},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"af8da4e56fbf139bec4c4706dc24623926d9d1ae","modified":1640767658447},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1640767658445},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1640767658495},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1640767658495},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1640767658495},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1640767658500},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1640767658504},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1640767658504},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1640767658507},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1640767658507},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1640767658507},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1640767658508},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1640767658508},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1640767658508},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1640767658508},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1640767658510},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1640767658510},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1640767658511},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1640767658511},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1640767658511},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1640767658511},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1640767658511},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1640767658511},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1640767658511},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1640767658512},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1640767658512},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1640767658512},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1640767658512},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1640767658512},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1640767658512},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1640767658513},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1640767658513},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1640767658513},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1640767658513},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1640767658520},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1640767658520},{"_id":"source/_posts/iOS/UI/UITableView/0398244C-928A-412F-BEFE-6BA54BA5E0ED.png","hash":"21d50e95243679b2e1ebc5f6f95439994f89ed85","modified":1640769389795},{"_id":"source/_posts/iOS/UI/UITableView/78636893-F9AA-4FEA-BA71-8DD4EB997002.png","hash":"1e419a5eee426c4fdc520a2ea4f9c5c0b9503c27","modified":1640770001111},{"_id":"source/_posts/iOS/UI/UITableView/D1A906F5-B600-440D-B9AE-FE416040FB07.png","hash":"59956a4a39dbba2d8d61015682ca334847cf88c4","modified":1640770862956},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1640767658520},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1640767658521},{"_id":"source/_posts/iOS/UI/图像显示原理/A0F25D10-87FC-40C9-8E1C-9CE2038B1B88.png","hash":"4dc94c0d085f9185315aeb5c188a37ef984eb0e5","modified":1640832568216},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"af8da4e56fbf139bec4c4706dc24623926d9d1ae","modified":1640767658445},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1640767658496},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1640767658496},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1640767658496},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1640767658496},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1640767658497},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1640767658497},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1640767658497},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1640767658498},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1640767658498},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1640767658498},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1640767658498},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1640767658499},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1640767658499},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1640767658499},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1640767658499},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1640767658500},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1640767658500},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1640767658500},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1640767658501},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1640767658501},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1640767658501},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1640767658501},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1640767658502},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1640767658502},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1640767658502},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1640767658502},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1640767658503},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1640767658503},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1640767658503},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1640767658503},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1640767658504},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1640767658504},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1640767658505},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1640767658505},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1640767658505},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1640767658505},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1640767658505},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1640767658506},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1640767658506},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1640767658506},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1640767658506},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1640767658507},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1640767658507},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1640767658507},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1640767658508},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1640767658509},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1640767658509},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1640767658509},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1640767658509},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1640767658509},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1640767658509},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1640767658510},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/31B1BB9C-89E7-4E9E-AE05-EA7690765197.png","hash":"1dc3603b22433022d1d637029a614d8a30235bfc","modified":1640778059819},{"_id":"source/_posts/iOS/UI/图像显示原理/27A5F497-17F3-4D00-9594-AEDA0C6B2DDE.png","hash":"1259531ecd6322480f7c45dfb0459aa3397523f2","modified":1640781653018},{"_id":"themes/next/.git/objects/pack/pack-7b6a3ddf616d56c27f515bff8f4178d0bebe15cb.idx","hash":"8d748d393c2687a94088581f32969d0bb0bedd03","modified":1640767658429},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/15F294D4-4F56-46B9-96A0-1B0436EDEB94.png","hash":"f9b4193ec764ad0fe393f7315ea41843577274ce","modified":1640778587002},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/B0ABE2DF-0087-492F-9A07-7E2BD9CD5B0E.png","hash":"5ffd6195e7820d0ab52357547fb555f7697f0757","modified":1640777864066},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/C708B73F-4B04-44E8-B655-F3EF81A9749C.png","hash":"7d40028e3166f369cb46d672eeef518bc7d935e7","modified":1640776396581},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/290E2C72-06E8-4C29-9323-75DA862B6772.png","hash":"3fbfdaf7a1594d46d22a7c10e9e3f32aac77b5ff","modified":1640780638600},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/5C23F3FB-57F1-42A3-A295-97359D12123E.png","hash":"20da906beef155ec1f6f7f609e7a305a12f36d75","modified":1640780735075},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/2031C1E0-CD22-4887-974F-816D5575DF78.png","hash":"1fdca45324b9c7f0b18e96b8700e553a4defcf63","modified":1640777105033},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/58D35CDC-3D1A-4379-9B77-0DE377CD89DF.png","hash":"c4681ffc901d97f4c4c5fca3cc524d1df13d8c17","modified":1640780940165},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/F7D740CA-617A-4BFE-A9D7-D07E0B2D1E7B.png","hash":"e2a5ea9ec46ffce1f048cdaaa7ff34969cb6447c","modified":1640780913334},{"_id":"source/_posts/iOS/UI/图像显示原理/A9D9461A-2433-47F3-955B-AB4BA82245F2.png","hash":"c6d58e4c5ccac9154e3603346f22296f018d4b9d","modified":1640781784377},{"_id":"themes/next/.git/objects/pack/pack-7b6a3ddf616d56c27f515bff8f4178d0bebe15cb.pack","hash":"f30d663d8d16ecfbaa00f508f91c3defab50ea36","modified":1640767658422}],"Category":[{"name":"LeetCode(Swift)","_id":"ckxsdhblq000354zx3wb4jcm5"},{"name":"Swift Summary","_id":"ckxsdhbm1000754zxms2wt0pd"},{"name":"TechnicalSupport","_id":"ckxsdhbm8000e54zx4bz4d3sr"},{"name":"备忘录","_id":"ckxsdhbm9000i54zx64pmuoxh"},{"name":"Runtime","_id":"ckxsdhbm9000k54zx7l69wohh"},{"name":"总结","_id":"ckxsdhbma000m54zxqpi7dgg2"},{"name":"UI","_id":"ckxsdhbnp000t54zxokny4kof"}],"Data":[],"Page":[{"title":"分类","date":"2019-05-16T03:28:45.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-05-16 11:28:45\ntype: \"categories\"\n---\n","updated":"2021-12-29T07:42:08.572Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckxsdhbkk000054zxr11v4qll","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Two Sum","date":"2019-05-14T12:35:17.000Z","_content":"\n### Two Sum\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n示例:\n\n> 给定 nums = [2, 7, 11, 15], target = 9  \n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n\n暴力解法可以使用两个循环嵌套,但是时间复杂度过高\n可以牺牲一定空间,使用查表的方式提升效率\n\n解法一:\n\n两遍遍历\n```bash\nfunc twoSum( nums : [Int], target: Int) -> [Int] {\n        \n        var dict = [Int : Int]();\n        for (index, item) in nums.enumerated() {\n            dict.updateValue(index, forKey: item);\n        }\n\n        var result = [Int]();\n        for (index, item) in nums.enumerated() {\n            if(dict.keys.contains(target - item) && (dict[target - item] != index)) {\n                result.append(index);\n                result.append(dict[target - item]!);\n                break;\n            }\n        }\n        \n        return result;\n    }\n```\n\n解法二:\n\n一遍遍历\n```bash\nfunc twoSum( nums : [Int], target: Int) -> [Int] {\n        \n        var dict = [Int : Int]();\n        var result = [Int]();\n        for (index, item) in nums.enumerated() {\n            if(dict.keys.contains(target - item) && (dict[target - item] != index)) {\n                result.append(index);\n                result.append(dict[target - item]!);\n                break;\n            }\n            dict.updateValue(index, forKey: item);\n        }\n        \n        return result;\n    }\n```","source":"_posts/LeetCode/Two Sum.md","raw":"---\ntitle: Two Sum\ndate: 2019-05-14 20:35:17\ncategories: LeetCode(Swift)\n---\n\n### Two Sum\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n示例:\n\n> 给定 nums = [2, 7, 11, 15], target = 9  \n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n\n暴力解法可以使用两个循环嵌套,但是时间复杂度过高\n可以牺牲一定空间,使用查表的方式提升效率\n\n解法一:\n\n两遍遍历\n```bash\nfunc twoSum( nums : [Int], target: Int) -> [Int] {\n        \n        var dict = [Int : Int]();\n        for (index, item) in nums.enumerated() {\n            dict.updateValue(index, forKey: item);\n        }\n\n        var result = [Int]();\n        for (index, item) in nums.enumerated() {\n            if(dict.keys.contains(target - item) && (dict[target - item] != index)) {\n                result.append(index);\n                result.append(dict[target - item]!);\n                break;\n            }\n        }\n        \n        return result;\n    }\n```\n\n解法二:\n\n一遍遍历\n```bash\nfunc twoSum( nums : [Int], target: Int) -> [Int] {\n        \n        var dict = [Int : Int]();\n        var result = [Int]();\n        for (index, item) in nums.enumerated() {\n            if(dict.keys.contains(target - item) && (dict[target - item] != index)) {\n                result.append(index);\n                result.append(dict[target - item]!);\n                break;\n            }\n            dict.updateValue(index, forKey: item);\n        }\n        \n        return result;\n    }\n```","slug":"LeetCode/Two Sum","published":1,"updated":"2021-12-29T07:42:08.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxsdhbli000154zxqvqlq3sy","content":"<h3 id=\"Two-Sum\"><a href=\"#Two-Sum\" class=\"headerlink\" title=\"Two Sum\"></a>Two Sum</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<p>示例:</p>\n<blockquote>\n<p>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>\n</blockquote>\n<p>暴力解法可以使用两个循环嵌套,但是时间复杂度过高<br>可以牺牲一定空间,使用查表的方式提升效率</p>\n<p>解法一:</p>\n<p>两遍遍历<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func twoSum( nums : [Int], target: Int) -&gt; [Int] &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var dict = [Int : Int]();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> nums.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            dict.updateValue(index, forKey: item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var result = [Int]();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> nums.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dict.keys.contains(target - item) &amp;&amp; (dict[target - item] != index)) &#123;</span><br><span class=\"line\">                result.append(index);</span><br><span class=\"line\">                result.append(dict[target - item]!);</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>解法二:</p>\n<p>一遍遍历<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func twoSum( nums : [Int], target: Int) -&gt; [Int] &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var dict = [Int : Int]();</span><br><span class=\"line\">        var result = [Int]();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> nums.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dict.keys.contains(target - item) &amp;&amp; (dict[target - item] != index)) &#123;</span><br><span class=\"line\">                result.append(index);</span><br><span class=\"line\">                result.append(dict[target - item]!);</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dict.updateValue(index, forKey: item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Two-Sum\"><a href=\"#Two-Sum\" class=\"headerlink\" title=\"Two Sum\"></a>Two Sum</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<p>示例:</p>\n<blockquote>\n<p>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>\n</blockquote>\n<p>暴力解法可以使用两个循环嵌套,但是时间复杂度过高<br>可以牺牲一定空间,使用查表的方式提升效率</p>\n<p>解法一:</p>\n<p>两遍遍历<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func twoSum( nums : [Int], target: Int) -&gt; [Int] &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var dict = [Int : Int]();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> nums.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            dict.updateValue(index, forKey: item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var result = [Int]();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> nums.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dict.keys.contains(target - item) &amp;&amp; (dict[target - item] != index)) &#123;</span><br><span class=\"line\">                result.append(index);</span><br><span class=\"line\">                result.append(dict[target - item]!);</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>解法二:</p>\n<p>一遍遍历<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func twoSum( nums : [Int], target: Int) -&gt; [Int] &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var dict = [Int : Int]();</span><br><span class=\"line\">        var result = [Int]();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> nums.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dict.keys.contains(target - item) &amp;&amp; (dict[target - item] != index)) &#123;</span><br><span class=\"line\">                result.append(index);</span><br><span class=\"line\">                result.append(dict[target - item]!);</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dict.updateValue(index, forKey: item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Swift基本语法","date":"2019-06-28T03:09:13.000Z","_content":"\n1.变量和常量可以使用 print（swift 2 将 print 替换了 println） 函数来输出。\n\n在字符串中可以使用括号与反斜线来插入变量，如下实例：\n```bash\nimport Cocoa\n\nvar name = \"菜鸟教程\"\nvar site = \"http://www.runoob.com\"\n\nprint(\"\\(name)的官网地址为：\\(site)\")\n以上程序执行结果为：\n\n菜鸟教程的官网地址为：http://www.runoob.com\n```\n\n2.当声明一个可选类型的时候，要确保用括号给 ? 操作符一个合适的范围。例如，声明可选整数数组，应该写成 (Int[])? 写成 Int[]? 会报错。\n\n3.如果一个可选类型的实例包含一个值，你可以用后缀操作符 ！来访问这个值，如下所示：\n\n```bash\noptionalInteger = 42\noptionalInteger! // 42\n```\n注意：\n使用!来获取一个不存在的可选值会导致运行时错误。使用!来强制解析值之前，一定要确定可选包含一个非nil的值。\n\n4.你可以在声明可选变量时使用感叹号（!）替换问号（?）。这样可选变量在使用时就不需要再加一个感叹号（!）来获取值，它会自动解析。\n\n5.使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在if和while语句中来对可选类型的值进行判断并把值赋给一个常量或者变量。\n\n让我们来看下一个简单的可选绑定实例：\n```bash\nimport Cocoa\n\nvar myString:String?\n\nmyString = \"Hello, Swift!\"\n\nif let yourString = myString {\n   print(\"你的字符串值为 - \\(yourString)\")\n}else{\n   print(\"你的字符串没有值\")\n}\n以上程序执行结果为：\n\n你的字符串值为 - Hello, Swift!\n```\n\n6.整型字面量可以是一个十进制，二进制，八进制或十六进制常量。 二进制前缀为 0b，八进制前缀为 0o，十六进制前缀为 0x，十进制没有前缀：\n\n以下为一些整型字面量的实例：\n```bash\nlet decimalInteger = 17           // 17 - 十进制表示\nlet binaryInteger = 0b10001       // 17 - 二进制表示\nlet octalInteger = 0o21           // 17 - 八进制表示\nlet hexadecimalInteger = 0x11     // 17 - 十六进制表示\n```\n\n7.除非特别指定，浮点型字面量的默认推导类型为 Swift 标准库类型中的 Double，表示64位浮点数。\n\n8.注意：swift3 中已经取消了++、--。\n\n9.以下为区间运算的简单实例：\n\n```bash\nimport Cocoa\n\nprint(\"闭区间运算符:\")\nfor index in 1...5 {\n    print(\"\\(index) * 5 = \\(index * 5)\")\n}\n\nprint(\"半开区间运算符:\")\nfor index in 1..<5 {\n    print(\"\\(index) * 5 = \\(index * 5)\")\n}\n```\n\n10.注意：在大多数语言中，switch 语句块中，case 要紧跟 break，否则 case 之后的语句会顺序运行，而在 Swift 语言中，默认是不会执行下去的，switch 也会终止。如果你想在 Swift 中让 case 之后的语句会按顺序继续运行，则需要使用 fallthrough 语句。\n\n11.你可以使用 == 来比较两个字符串是否相等\n\n12.Swift 中不能创建空的 Character（字符） 类型变量或常量\n\n13.字符串连接字符\n以下实例演示了使用 String 的 append() 方法来实现字符串连接字符：\n```bash\nimport Cocoa\n\nvar varA:String = \"Hello \"\nlet varB:Character = \"G\"\n\nvarA.append( varB )\n\nprint(\"varC  =  \\(varA)\")\n```\n\n14.你可以使用 append() 方法或者赋值运算符 += 在数组末尾添加元素，如下所示，我们初始化一个数组，并向其添加元素\n\n15.如果我们同时需要每个数据项的值和索引值，可以使用 String 的 enumerate() 方法来进行数组遍历\n\n16.我们可以使用加法操作符（+）来合并两种已存在的相同类型数组。新数组的数据类型会从两个数组的数据类型中推断出来\n\n17.我们可以使用 updateValue(forKey:) 增加或更新字典的内容。如果 key 不存在，则添加值，如果存在则修改 key 对应的值。updateValue(_:forKey:)方法返回Optional值.\n\n18.我们可以使用 removeValueForKey() 方法来移除字典 key-value 对。如果 key 存在该方法返回移除的值，如果不存在返回 nil ","source":"_posts/Swift Summary/Swift基本语法.md","raw":"---\ntitle: Swift基本语法\ndate: 2019-06-28 11:09:13\ntags:\ncategories: Swift Summary\n---\n\n1.变量和常量可以使用 print（swift 2 将 print 替换了 println） 函数来输出。\n\n在字符串中可以使用括号与反斜线来插入变量，如下实例：\n```bash\nimport Cocoa\n\nvar name = \"菜鸟教程\"\nvar site = \"http://www.runoob.com\"\n\nprint(\"\\(name)的官网地址为：\\(site)\")\n以上程序执行结果为：\n\n菜鸟教程的官网地址为：http://www.runoob.com\n```\n\n2.当声明一个可选类型的时候，要确保用括号给 ? 操作符一个合适的范围。例如，声明可选整数数组，应该写成 (Int[])? 写成 Int[]? 会报错。\n\n3.如果一个可选类型的实例包含一个值，你可以用后缀操作符 ！来访问这个值，如下所示：\n\n```bash\noptionalInteger = 42\noptionalInteger! // 42\n```\n注意：\n使用!来获取一个不存在的可选值会导致运行时错误。使用!来强制解析值之前，一定要确定可选包含一个非nil的值。\n\n4.你可以在声明可选变量时使用感叹号（!）替换问号（?）。这样可选变量在使用时就不需要再加一个感叹号（!）来获取值，它会自动解析。\n\n5.使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在if和while语句中来对可选类型的值进行判断并把值赋给一个常量或者变量。\n\n让我们来看下一个简单的可选绑定实例：\n```bash\nimport Cocoa\n\nvar myString:String?\n\nmyString = \"Hello, Swift!\"\n\nif let yourString = myString {\n   print(\"你的字符串值为 - \\(yourString)\")\n}else{\n   print(\"你的字符串没有值\")\n}\n以上程序执行结果为：\n\n你的字符串值为 - Hello, Swift!\n```\n\n6.整型字面量可以是一个十进制，二进制，八进制或十六进制常量。 二进制前缀为 0b，八进制前缀为 0o，十六进制前缀为 0x，十进制没有前缀：\n\n以下为一些整型字面量的实例：\n```bash\nlet decimalInteger = 17           // 17 - 十进制表示\nlet binaryInteger = 0b10001       // 17 - 二进制表示\nlet octalInteger = 0o21           // 17 - 八进制表示\nlet hexadecimalInteger = 0x11     // 17 - 十六进制表示\n```\n\n7.除非特别指定，浮点型字面量的默认推导类型为 Swift 标准库类型中的 Double，表示64位浮点数。\n\n8.注意：swift3 中已经取消了++、--。\n\n9.以下为区间运算的简单实例：\n\n```bash\nimport Cocoa\n\nprint(\"闭区间运算符:\")\nfor index in 1...5 {\n    print(\"\\(index) * 5 = \\(index * 5)\")\n}\n\nprint(\"半开区间运算符:\")\nfor index in 1..<5 {\n    print(\"\\(index) * 5 = \\(index * 5)\")\n}\n```\n\n10.注意：在大多数语言中，switch 语句块中，case 要紧跟 break，否则 case 之后的语句会顺序运行，而在 Swift 语言中，默认是不会执行下去的，switch 也会终止。如果你想在 Swift 中让 case 之后的语句会按顺序继续运行，则需要使用 fallthrough 语句。\n\n11.你可以使用 == 来比较两个字符串是否相等\n\n12.Swift 中不能创建空的 Character（字符） 类型变量或常量\n\n13.字符串连接字符\n以下实例演示了使用 String 的 append() 方法来实现字符串连接字符：\n```bash\nimport Cocoa\n\nvar varA:String = \"Hello \"\nlet varB:Character = \"G\"\n\nvarA.append( varB )\n\nprint(\"varC  =  \\(varA)\")\n```\n\n14.你可以使用 append() 方法或者赋值运算符 += 在数组末尾添加元素，如下所示，我们初始化一个数组，并向其添加元素\n\n15.如果我们同时需要每个数据项的值和索引值，可以使用 String 的 enumerate() 方法来进行数组遍历\n\n16.我们可以使用加法操作符（+）来合并两种已存在的相同类型数组。新数组的数据类型会从两个数组的数据类型中推断出来\n\n17.我们可以使用 updateValue(forKey:) 增加或更新字典的内容。如果 key 不存在，则添加值，如果存在则修改 key 对应的值。updateValue(_:forKey:)方法返回Optional值.\n\n18.我们可以使用 removeValueForKey() 方法来移除字典 key-value 对。如果 key 存在该方法返回移除的值，如果不存在返回 nil ","slug":"Swift Summary/Swift基本语法","published":1,"updated":"2021-12-29T07:42:08.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxsdhblo000254zxz82b3bh5","content":"<p>1.变量和常量可以使用 print（swift 2 将 print 替换了 println） 函数来输出。</p>\n<p>在字符串中可以使用括号与反斜线来插入变量，如下实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\">var name = <span class=\"string\">\"菜鸟教程\"</span></span><br><span class=\"line\">var site = <span class=\"string\">\"http://www.runoob.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name)的官网地址为：\\(site)\"</span>)</span><br><span class=\"line\">以上程序执行结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">菜鸟教程的官网地址为：http://www.runoob.com</span><br></pre></td></tr></table></figure></p>\n<p>2.当声明一个可选类型的时候，要确保用括号给 ? 操作符一个合适的范围。例如，声明可选整数数组，应该写成 (Int[])? 写成 Int[]? 会报错。</p>\n<p>3.如果一个可选类型的实例包含一个值，你可以用后缀操作符 ！来访问这个值，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optionalInteger = 42</span><br><span class=\"line\">optionalInteger! // 42</span><br></pre></td></tr></table></figure>\n<p>注意：<br>使用!来获取一个不存在的可选值会导致运行时错误。使用!来强制解析值之前，一定要确定可选包含一个非nil的值。</p>\n<p>4.你可以在声明可选变量时使用感叹号（!）替换问号（?）。这样可选变量在使用时就不需要再加一个感叹号（!）来获取值，它会自动解析。</p>\n<p>5.使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在if和while语句中来对可选类型的值进行判断并把值赋给一个常量或者变量。</p>\n<p>让我们来看下一个简单的可选绑定实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\">var myString:String?</span><br><span class=\"line\"></span><br><span class=\"line\">myString = <span class=\"string\">\"Hello, Swift!\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">let</span> yourString = myString &#123;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"你的字符串值为 - \\(yourString)\"</span>)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"你的字符串没有值\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">以上程序执行结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">你的字符串值为 - Hello, Swift!</span><br></pre></td></tr></table></figure></p>\n<p>6.整型字面量可以是一个十进制，二进制，八进制或十六进制常量。 二进制前缀为 0b，八进制前缀为 0o，十六进制前缀为 0x，十进制没有前缀：</p>\n<p>以下为一些整型字面量的实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> decimalInteger = 17           // 17 - 十进制表示</span><br><span class=\"line\"><span class=\"built_in\">let</span> binaryInteger = 0b10001       // 17 - 二进制表示</span><br><span class=\"line\"><span class=\"built_in\">let</span> octalInteger = 0o21           // 17 - 八进制表示</span><br><span class=\"line\"><span class=\"built_in\">let</span> hexadecimalInteger = 0x11     // 17 - 十六进制表示</span><br></pre></td></tr></table></figure></p>\n<p>7.除非特别指定，浮点型字面量的默认推导类型为 Swift 标准库类型中的 Double，表示64位浮点数。</p>\n<p>8.注意：swift3 中已经取消了++、–。</p>\n<p>9.以下为区间运算的简单实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"闭区间运算符:\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> 1...5 &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(index) * 5 = \\(index * 5)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"半开区间运算符:\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> 1..&lt;5 &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(index) * 5 = \\(index * 5)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>10.注意：在大多数语言中，switch 语句块中，case 要紧跟 break，否则 case 之后的语句会顺序运行，而在 Swift 语言中，默认是不会执行下去的，switch 也会终止。如果你想在 Swift 中让 case 之后的语句会按顺序继续运行，则需要使用 fallthrough 语句。</p>\n<p>11.你可以使用 == 来比较两个字符串是否相等</p>\n<p>12.Swift 中不能创建空的 Character（字符） 类型变量或常量</p>\n<p>13.字符串连接字符<br>以下实例演示了使用 String 的 append() 方法来实现字符串连接字符：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\">var varA:String = <span class=\"string\">\"Hello \"</span></span><br><span class=\"line\"><span class=\"built_in\">let</span> varB:Character = <span class=\"string\">\"G\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">varA.append( varB )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"varC  =  \\(varA)\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>14.你可以使用 append() 方法或者赋值运算符 += 在数组末尾添加元素，如下所示，我们初始化一个数组，并向其添加元素</p>\n<p>15.如果我们同时需要每个数据项的值和索引值，可以使用 String 的 enumerate() 方法来进行数组遍历</p>\n<p>16.我们可以使用加法操作符（+）来合并两种已存在的相同类型数组。新数组的数据类型会从两个数组的数据类型中推断出来</p>\n<p>17.我们可以使用 updateValue(forKey:) 增加或更新字典的内容。如果 key 不存在，则添加值，如果存在则修改 key 对应的值。updateValue(_:forKey:)方法返回Optional值.</p>\n<p>18.我们可以使用 removeValueForKey() 方法来移除字典 key-value 对。如果 key 存在该方法返回移除的值，如果不存在返回 nil </p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.变量和常量可以使用 print（swift 2 将 print 替换了 println） 函数来输出。</p>\n<p>在字符串中可以使用括号与反斜线来插入变量，如下实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\">var name = <span class=\"string\">\"菜鸟教程\"</span></span><br><span class=\"line\">var site = <span class=\"string\">\"http://www.runoob.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name)的官网地址为：\\(site)\"</span>)</span><br><span class=\"line\">以上程序执行结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">菜鸟教程的官网地址为：http://www.runoob.com</span><br></pre></td></tr></table></figure></p>\n<p>2.当声明一个可选类型的时候，要确保用括号给 ? 操作符一个合适的范围。例如，声明可选整数数组，应该写成 (Int[])? 写成 Int[]? 会报错。</p>\n<p>3.如果一个可选类型的实例包含一个值，你可以用后缀操作符 ！来访问这个值，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optionalInteger = 42</span><br><span class=\"line\">optionalInteger! // 42</span><br></pre></td></tr></table></figure>\n<p>注意：<br>使用!来获取一个不存在的可选值会导致运行时错误。使用!来强制解析值之前，一定要确定可选包含一个非nil的值。</p>\n<p>4.你可以在声明可选变量时使用感叹号（!）替换问号（?）。这样可选变量在使用时就不需要再加一个感叹号（!）来获取值，它会自动解析。</p>\n<p>5.使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在if和while语句中来对可选类型的值进行判断并把值赋给一个常量或者变量。</p>\n<p>让我们来看下一个简单的可选绑定实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\">var myString:String?</span><br><span class=\"line\"></span><br><span class=\"line\">myString = <span class=\"string\">\"Hello, Swift!\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">let</span> yourString = myString &#123;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"你的字符串值为 - \\(yourString)\"</span>)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"你的字符串没有值\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">以上程序执行结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">你的字符串值为 - Hello, Swift!</span><br></pre></td></tr></table></figure></p>\n<p>6.整型字面量可以是一个十进制，二进制，八进制或十六进制常量。 二进制前缀为 0b，八进制前缀为 0o，十六进制前缀为 0x，十进制没有前缀：</p>\n<p>以下为一些整型字面量的实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> decimalInteger = 17           // 17 - 十进制表示</span><br><span class=\"line\"><span class=\"built_in\">let</span> binaryInteger = 0b10001       // 17 - 二进制表示</span><br><span class=\"line\"><span class=\"built_in\">let</span> octalInteger = 0o21           // 17 - 八进制表示</span><br><span class=\"line\"><span class=\"built_in\">let</span> hexadecimalInteger = 0x11     // 17 - 十六进制表示</span><br></pre></td></tr></table></figure></p>\n<p>7.除非特别指定，浮点型字面量的默认推导类型为 Swift 标准库类型中的 Double，表示64位浮点数。</p>\n<p>8.注意：swift3 中已经取消了++、–。</p>\n<p>9.以下为区间运算的简单实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"闭区间运算符:\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> 1...5 &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(index) * 5 = \\(index * 5)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"半开区间运算符:\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> 1..&lt;5 &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(index) * 5 = \\(index * 5)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>10.注意：在大多数语言中，switch 语句块中，case 要紧跟 break，否则 case 之后的语句会顺序运行，而在 Swift 语言中，默认是不会执行下去的，switch 也会终止。如果你想在 Swift 中让 case 之后的语句会按顺序继续运行，则需要使用 fallthrough 语句。</p>\n<p>11.你可以使用 == 来比较两个字符串是否相等</p>\n<p>12.Swift 中不能创建空的 Character（字符） 类型变量或常量</p>\n<p>13.字符串连接字符<br>以下实例演示了使用 String 的 append() 方法来实现字符串连接字符：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\">var varA:String = <span class=\"string\">\"Hello \"</span></span><br><span class=\"line\"><span class=\"built_in\">let</span> varB:Character = <span class=\"string\">\"G\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">varA.append( varB )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"varC  =  \\(varA)\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>14.你可以使用 append() 方法或者赋值运算符 += 在数组末尾添加元素，如下所示，我们初始化一个数组，并向其添加元素</p>\n<p>15.如果我们同时需要每个数据项的值和索引值，可以使用 String 的 enumerate() 方法来进行数组遍历</p>\n<p>16.我们可以使用加法操作符（+）来合并两种已存在的相同类型数组。新数组的数据类型会从两个数组的数据类型中推断出来</p>\n<p>17.我们可以使用 updateValue(forKey:) 增加或更新字典的内容。如果 key 不存在，则添加值，如果存在则修改 key 对应的值。updateValue(_:forKey:)方法返回Optional值.</p>\n<p>18.我们可以使用 removeValueForKey() 方法来移除字典 key-value 对。如果 key 存在该方法返回移除的值，如果不存在返回 nil </p>\n"},{"title":"Reverse Integer","date":"2019-06-28T07:13:50.000Z","_content":"\n\n### Reverse Integer\n\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n示例 1:\n\n>输入: 123\n输出: 321\n \n示例 2:\n\n>输入: -123\n输出: -321\n\n示例 3:\n\n>输入: 120\n输出: 21\n注意:\n\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n\n解法:\n将整数 % 10,取到的值放入数组中,再将整数 / 10, 得到的将是减少一位后的值,循环重复这个过程,则将每位数字都存入了数组中,若整数位负数,则取反,若超出数值范围,则返回0,代码如下:\n\n```bash\nfunc reverseInteger(num : Int) -> Int {\n        \n        var temp = abs(num);\n        var i = 0;\n        var array = [Int]();\n        while (temp != 0) {\n            i = temp % 10;\n            temp = temp / 10;\n            array.append(i);\n        }\n        \n        var res = 0;\n        for (index, item) in array.enumerated() {\n            let t : Double = pow(10.0, Double(array.count - index - 1));\n            res = res + item * Int(t);\n        }\n        \n        if (num < 0) {\n            res = -res;\n        }\n        \n        if (res < Int32.min || res > Int32.max) {\n            res = 0;\n        }\n        \n        return res;\n    }\n```","source":"_posts/LeetCode/Reverse Integer.md","raw":"---\ntitle: Reverse Integer\ndate: 2019-06-28 15:13:50\ncategories: LeetCode(Swift)\n---\n\n\n### Reverse Integer\n\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n示例 1:\n\n>输入: 123\n输出: 321\n \n示例 2:\n\n>输入: -123\n输出: -321\n\n示例 3:\n\n>输入: 120\n输出: 21\n注意:\n\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n\n解法:\n将整数 % 10,取到的值放入数组中,再将整数 / 10, 得到的将是减少一位后的值,循环重复这个过程,则将每位数字都存入了数组中,若整数位负数,则取反,若超出数值范围,则返回0,代码如下:\n\n```bash\nfunc reverseInteger(num : Int) -> Int {\n        \n        var temp = abs(num);\n        var i = 0;\n        var array = [Int]();\n        while (temp != 0) {\n            i = temp % 10;\n            temp = temp / 10;\n            array.append(i);\n        }\n        \n        var res = 0;\n        for (index, item) in array.enumerated() {\n            let t : Double = pow(10.0, Double(array.count - index - 1));\n            res = res + item * Int(t);\n        }\n        \n        if (num < 0) {\n            res = -res;\n        }\n        \n        if (res < Int32.min || res > Int32.max) {\n            res = 0;\n        }\n        \n        return res;\n    }\n```","slug":"LeetCode/Reverse Integer","published":1,"updated":"2021-12-29T07:42:08.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxsdhbls000454zxa144es2m","content":"<h3 id=\"Reverse-Integer\"><a href=\"#Reverse-Integer\" class=\"headerlink\" title=\"Reverse Integer\"></a>Reverse Integer</h3><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n<p>示例 1:</p>\n<blockquote>\n<p>输入: 123<br>输出: 321</p>\n</blockquote>\n<p>示例 2:</p>\n<blockquote>\n<p>输入: -123<br>输出: -321</p>\n</blockquote>\n<p>示例 3:</p>\n<blockquote>\n<p>输入: 120<br>输出: 21<br>注意:</p>\n</blockquote>\n<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>\n<p>解法:<br>将整数 % 10,取到的值放入数组中,再将整数 / 10, 得到的将是减少一位后的值,循环重复这个过程,则将每位数字都存入了数组中,若整数位负数,则取反,若超出数值范围,则返回0,代码如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func reverseInteger(num : Int) -&gt; Int &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var temp = abs(num);</span><br><span class=\"line\">        var i = 0;</span><br><span class=\"line\">        var array = [Int]();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (temp != 0) &#123;</span><br><span class=\"line\">            i = temp % 10;</span><br><span class=\"line\">            temp = temp / 10;</span><br><span class=\"line\">            array.append(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var res = 0;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> array.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> t : Double = pow(10.0, Double(array.count - index - 1));</span><br><span class=\"line\">            res = res + item * Int(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &lt; 0) &#123;</span><br><span class=\"line\">            res = -res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res &lt; Int32.min || res &gt; Int32.max) &#123;</span><br><span class=\"line\">            res = 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Reverse-Integer\"><a href=\"#Reverse-Integer\" class=\"headerlink\" title=\"Reverse Integer\"></a>Reverse Integer</h3><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n<p>示例 1:</p>\n<blockquote>\n<p>输入: 123<br>输出: 321</p>\n</blockquote>\n<p>示例 2:</p>\n<blockquote>\n<p>输入: -123<br>输出: -321</p>\n</blockquote>\n<p>示例 3:</p>\n<blockquote>\n<p>输入: 120<br>输出: 21<br>注意:</p>\n</blockquote>\n<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>\n<p>解法:<br>将整数 % 10,取到的值放入数组中,再将整数 / 10, 得到的将是减少一位后的值,循环重复这个过程,则将每位数字都存入了数组中,若整数位负数,则取反,若超出数值范围,则返回0,代码如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func reverseInteger(num : Int) -&gt; Int &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var temp = abs(num);</span><br><span class=\"line\">        var i = 0;</span><br><span class=\"line\">        var array = [Int]();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (temp != 0) &#123;</span><br><span class=\"line\">            i = temp % 10;</span><br><span class=\"line\">            temp = temp / 10;</span><br><span class=\"line\">            array.append(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var res = 0;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> array.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> t : Double = pow(10.0, Double(array.count - index - 1));</span><br><span class=\"line\">            res = res + item * Int(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &lt; 0) &#123;</span><br><span class=\"line\">            res = -res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res &lt; Int32.min || res &gt; Int32.max) &#123;</span><br><span class=\"line\">            res = 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"琅琊小说","p":"/TechnicalSupport/Langya_novel_technical_support","date":"2021-04-28T02:36:05.000Z","_content":"\n### 简介\n\n最全书库: 海量小说免费看\n最快更新: 第一时间推更\n远离书荒: 智能推荐、热门榜单\n阅读体验: 提供最好的阅读体验\n\n### 应用详情\n\n手机必备的阅读软件, 全网海量小说随心看, 给用户提供最优质的阅读体验。\n\n联系邮箱: nosuan@163.com","source":"_posts/TechnicalSupport/Langya_novel_technical_support.md","raw":"---\ntitle: 琅琊小说\np: /TechnicalSupport/Langya_novel_technical_support\ndate: 2021-04-28 10:36:05\ntags:\ncategories: TechnicalSupport\n---\n\n### 简介\n\n最全书库: 海量小说免费看\n最快更新: 第一时间推更\n远离书荒: 智能推荐、热门榜单\n阅读体验: 提供最好的阅读体验\n\n### 应用详情\n\n手机必备的阅读软件, 全网海量小说随心看, 给用户提供最优质的阅读体验。\n\n联系邮箱: nosuan@163.com","slug":"TechnicalSupport/Langya_novel_technical_support","published":1,"updated":"2021-12-29T07:42:08.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxsdhblw000554zxbwvjbfge","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>最全书库: 海量小说免费看<br>最快更新: 第一时间推更<br>远离书荒: 智能推荐、热门榜单<br>阅读体验: 提供最好的阅读体验</p>\n<h3 id=\"应用详情\"><a href=\"#应用详情\" class=\"headerlink\" title=\"应用详情\"></a>应用详情</h3><p>手机必备的阅读软件, 全网海量小说随心看, 给用户提供最优质的阅读体验。</p>\n<p>联系邮箱: <a href=\"mailto:nosuan@163.com\" target=\"_blank\" rel=\"noopener\">nosuan@163.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>最全书库: 海量小说免费看<br>最快更新: 第一时间推更<br>远离书荒: 智能推荐、热门榜单<br>阅读体验: 提供最好的阅读体验</p>\n<h3 id=\"应用详情\"><a href=\"#应用详情\" class=\"headerlink\" title=\"应用详情\"></a>应用详情</h3><p>手机必备的阅读软件, 全网海量小说随心看, 给用户提供最优质的阅读体验。</p>\n<p>联系邮箱: <a href=\"mailto:nosuan@163.com\" target=\"_blank\" rel=\"noopener\">nosuan@163.com</a></p>\n"},{"title":"备忘录","date":"2019-06-11T12:55:51.000Z","_content":"\n### Drops\n\n1.带有transform info的控件,千万不能再使用frame属性,此时的frame属性已经不准了,使用bounds和center进行设置!!!\n\n2.view的布局如果不是整数像素级,可能会导致部分被裁剪,对于小的图片来说,是肉眼可见的","source":"_posts/备忘录/备忘录.md","raw":"---\ntitle: 备忘录\ndate: 2019-06-11 20:55:51\ntags: Drops\ncategories: 备忘录\n---\n\n### Drops\n\n1.带有transform info的控件,千万不能再使用frame属性,此时的frame属性已经不准了,使用bounds和center进行设置!!!\n\n2.view的布局如果不是整数像素级,可能会导致部分被裁剪,对于小的图片来说,是肉眼可见的","slug":"备忘录/备忘录","published":1,"updated":"2021-12-29T07:42:08.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxsdhbm0000654zxfwyq8nx7","content":"<h3 id=\"Drops\"><a href=\"#Drops\" class=\"headerlink\" title=\"Drops\"></a>Drops</h3><p>1.带有transform info的控件,千万不能再使用frame属性,此时的frame属性已经不准了,使用bounds和center进行设置!!!</p>\n<p>2.view的布局如果不是整数像素级,可能会导致部分被裁剪,对于小的图片来说,是肉眼可见的</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Drops\"><a href=\"#Drops\" class=\"headerlink\" title=\"Drops\"></a>Drops</h3><p>1.带有transform info的控件,千万不能再使用frame属性,此时的frame属性已经不准了,使用bounds和center进行设置!!!</p>\n<p>2.view的布局如果不是整数像素级,可能会导致部分被裁剪,对于小的图片来说,是肉眼可见的</p>\n"},{"title":"runtime机制(1)-基本数据结构","p":"/Runtime/runtime机制(1)-基本数据结构","date":"2020-08-31T12:15:14.000Z","_content":"\n## 什么是runtime\n\nOC是动态语言, 与静态语言不同, 静态语言的各种数据结构在编译期已经决定了, 不能被修改, 而动态语言可以在程序的运行期, 动态的修改一个类的结构, 如修改方法实现、绑定实例变量等.\n\n> OC作为动态语言, 会想办法将编译期做的事推迟到运行期来做, 所以, 仅有编译器是不够的, 还需要一个运行时系统(runtime system), 它是OC运行框架的基石.\n\n要想了解runtime，就要先了解runtime中定义的各种数据结构, 先从最基础的objc_object和objc_class开始。\n\n## 缘起:NSObject\n\nOC中，基本上所有的类的基类，都是NSObject。因此要深入了解OC中的类的结构，就要从NSObject这个类说起。\n\nXCode中NSObject的实现:\n\n```\n@interface NSObject <NSObject> {\n    Class isa  OBJC_ISA_AVAILABILITY;\n}\n```\n\nNSObject仅有一个实例变量Class isa：\n```\n/// An opaque type that represents an Objective-C class.\ntypedef struct objc_class *Class;\n```\n\nClass实质上是指向objc_class的指针, 在runtime源码的objc-runtime-new.h中，可以看到objc_class在OC 2.0中的定义:\n## objc_clas\n```\nstruct objc_class : objc_object {\n    // Class ISA;\n    Class superclass;\n    cache_t cache;             // formerly cache pointer and vtable\n    class_data_bits_t bits;    // class_rw_t * plus custom rr/alloc flags\n\n    class_rw_t *data() { \n        return bits.data();\n    }\n    void setData(class_rw_t *newData) {\n        bits.setData(newData);\n    }\n\t。。。。。。\n}\n```\nobjc_class继承自objc_object, 所以在runtime中, class也被看做一种对象, class中, 有三个数据:\n* Class superclass: 同样是Class类型，表明当前类的父类。\n* cache_t cache: cache用于优化方法调用，其对应的数据结构如是：\n```\nstruct cache_t {\n    struct bucket_t *_buckets;\n    mask_t _mask;\n    mask_t _occupied;\n    \n\t// 省略其余方法\n\t。。。   \n}\n\ntypedef uintptr_t cache_key_t;\n\nstruct bucket_t {\nprivate:\n    cache_key_t _key;\n    IMP _imp;\n\npublic:\n    inline cache_key_t key() const { return _key; }\n    inline IMP imp() const { return (IMP)_imp; }\n    inline void setKey(cache_key_t newKey) { _key = newKey; }\n    inline void setImp(IMP newImp) { _imp = newImp; }\n\n    void set(cache_key_t newKey, IMP newImp);\n};\n```\n这里我们第一次遇到uintptr_t类型（_key） 。在runtime中，uintptr_t定义为\n```\n#ifndef _UINTPTR_T\n#define _UINTPTR_T\ntypedef unsigned long\t\tuintptr_t;\n#endif /* _UINTPTR_T */\n```\n可以理解为void *.\n\ncache的核心是一个类型为bucket_t的指针, 指向一个cache_key_t和IMP的缓存节点.\n\nruntime方法调用的流程: 当要调用一个方法时, 先不去Class的方法列表中查找, 而是先去找cache_t cache. \n> 理论上一个方法被调用过之后, 再次被调用的概率很大, 所以当系统调用过一个方法后, 会将其实现IMP和key存到cache中\n\n* class_data_bits_t bits: Class的核心, 本质上是一个可以被Mask的指针, 不同的Mask, 可以取出不同的值.\n```\nstruct class_data_bits_t {\n\n    // Values are the FAST_ flags above.\n    uintptr_t bits;\n \n\tpublic:\n    class_rw_t* data() {\n        return (class_rw_t *)(bits & FAST_DATA_MASK);\n    }\n    void setData(class_rw_t *newData)\n    {\n        assert(!data()  ||  (newData->flags & (RW_REALIZING | RW_FUTURE)));\n        // Set during realization or construction only. No locking needed.\n        // Use a store-release fence because there may be concurrent\n        // readers of data and data's contents.\n        uintptr_t newBits = (bits & ~FAST_DATA_MASK) | (uintptr_t)newData;\n        atomic_thread_fence(memory_order_release);\n        bits = newBits;\n    }\n    。。。\n```\n\nclass_data_bits_t中仅含有一个成员uintptr_t, 可以理解为\"复合指针\".\n> 复合指针: 不仅包含了指针, 还包含了Class的各种异或flag来说明Class的属性, 把这些信息复合在一起, 仅用一个指针来表示\n\n当需要取出这些信息时, 需要用对应的以***FAST_***前缀开头的flag掩码对bits做按位与操作\n\n例如，我们需要取出Classs的核心信息class_rw_t, 则需要调用方法：\n```\nclass_rw_t* data() {\n        return (class_rw_t *)(bits & FAST_DATA_MASK);\n    }\n```\n该方法返回一个class_rw_t*，需要对bits进行FAST_DATA_MASK的与操作。\n\nClass的核心结构class_rw_t:\n```\nstruct class_rw_t {\n    // Be warned that Symbolication knows the layout of this structure.\n    uint32_t flags;\n    uint32_t version;\n\n    const class_ro_t *ro;         // 类不可修改的原始核心\n\n    // 下面三个array，method,property, protocol，可以被runtime 扩展，如Category\n    method_array_t methods;\n    property_array_t properties;\n    protocol_array_t protocols;\n\n    // 和继承相关的东西\n    Class firstSubclass;\n    Class nextSiblingClass;\n\n    // Class对应的 符号名称\n    char *demangledName;\n\t\n\t// 以下方法省略\n\t...\n}\n\nstruct class_ro_t {\n    uint32_t flags;\n    uint32_t instanceStart;\n    uint32_t instanceSize;\n#ifdef \\__LP64\\__\n    uint32_t reserved;\n#endif\n\n    const uint8_t * ivarLayout;\n    \n    const char * name;\n    method_list_t * baseMethodList;\n    protocol_list_t * baseProtocols;\n    const ivar_list_t * ivars;\n\n    const uint8_t * weakIvarLayout;\n    property_list_t *baseProperties;\n\n    method_list_t *baseMethods() const {\n        return baseMethodList;\n    }\n};\n```\n可以看到，在class_ro_t 中包含了类的名称，以及method_list_t， protocol_list_t， ivar_list_t， property_list_t 这些类的基本信息。 在class_ro_t 的信息是***不可修改和扩展***的。\n在更外一层 class_rw_t 中，有三个数组method_array_t, property_array_t, protocol_array_t:\n```\nstruct class_rw_t {\n\n\t...\n    const class_ro_t *ro;         // 类不可修改的原始核心\n\n    // 下面三个array，method,property, protocol，可以被runtime 扩展，如Category\n    method_array_t methods;\n    property_array_t properties;\n    protocol_array_t protocols;\n\t...\n}\n```\n这三个数组是可以被runtime动态扩展的。\n\n\b类抽象结构:\n> objc_class\n>> class_data_bits_t\n>>> class_rw_t(通过FAST_DATA_MASK获取)\n>>>> class_ro_t(类核心const信息)\n\n## realizeClass\n在objc_class的data()方法最初返回的是const class_ro_t * 类型，也就是类的基本信息。因为在调用realizeClass方法前，Category定义的各种方法，属性还没有附加到class上，因此只能够返回类的基本信息。\n\n而当我们调用realizeClass时，会在函数内部将Category中定义的各种扩展附加到class上，同时改写data()的返回值为class_rw_t *类型，核心代码如下:\n```\n\tconst class_ro_t *ro;\n    class_rw_t *rw;\n\tro = (const class_ro_t *)cls->data();\n    if (ro->flags & RO_FUTURE) {\n        // This was a future class. rw data is already allocated.\n        rw = cls->data();\n        ro = cls->data()->ro;\n        cls->changeInfo(RW_REALIZED|RW_REALIZING, RW_FUTURE);\n    } else {\n        // Normal class. Allocate writeable class data.\n        rw = (class_rw_t *)calloc(sizeof(class_rw_t), 1);\n        rw->ro = ro;\n        rw->flags = RW_REALIZED|RW_REALIZING;\n        cls->setData(rw);\n    }\n```\n所以在class没有调用realizeClass之前，不是真正完整的类。\n\n## objc_object\nOC的底层实现是runtime，在runtime这一层，对象被定义为objc_object 结构体，类被定义为了objc_class 结构体。而objc_class继承于objc_object，因此，类可以看做是一类特殊的对象。\nobjc_object定义:\n```\nstruct objc_object {\nprivate:\n    isa_t isa;\n\npublic:\n\n    // ISA() assumes this is NOT a tagged pointer object\n    Class ISA();\n\n    // getIsa() allows this to be a tagged pointer object\n    Class getIsa();\n\n\t// 省略其余方法\n\t...\n}\n```\nobjc_object的定义很简单，仅包含一个isa_t 类型。\n```\nunion isa_t \n{\n    isa_t() { }\n    isa_t(uintptr_t value) : bits(value) { }\n\n    Class cls;\n    uintptr_t bits;\n\t\n\t// 省略其余\n\t。。。\n}\n```\nisa_t 是一个联合，可以表示Class cls或uintptr_t bits类型。","source":"_posts/Runtime/runtime机制(1)-基本数据结构.md","raw":"---\ntitle: runtime机制(1)-基本数据结构\np: /Runtime/runtime机制(1)-基本数据结构\ndate: 2020-08-31 20:15:14\ntags:\ncategories: Runtime\n---\n\n## 什么是runtime\n\nOC是动态语言, 与静态语言不同, 静态语言的各种数据结构在编译期已经决定了, 不能被修改, 而动态语言可以在程序的运行期, 动态的修改一个类的结构, 如修改方法实现、绑定实例变量等.\n\n> OC作为动态语言, 会想办法将编译期做的事推迟到运行期来做, 所以, 仅有编译器是不够的, 还需要一个运行时系统(runtime system), 它是OC运行框架的基石.\n\n要想了解runtime，就要先了解runtime中定义的各种数据结构, 先从最基础的objc_object和objc_class开始。\n\n## 缘起:NSObject\n\nOC中，基本上所有的类的基类，都是NSObject。因此要深入了解OC中的类的结构，就要从NSObject这个类说起。\n\nXCode中NSObject的实现:\n\n```\n@interface NSObject <NSObject> {\n    Class isa  OBJC_ISA_AVAILABILITY;\n}\n```\n\nNSObject仅有一个实例变量Class isa：\n```\n/// An opaque type that represents an Objective-C class.\ntypedef struct objc_class *Class;\n```\n\nClass实质上是指向objc_class的指针, 在runtime源码的objc-runtime-new.h中，可以看到objc_class在OC 2.0中的定义:\n## objc_clas\n```\nstruct objc_class : objc_object {\n    // Class ISA;\n    Class superclass;\n    cache_t cache;             // formerly cache pointer and vtable\n    class_data_bits_t bits;    // class_rw_t * plus custom rr/alloc flags\n\n    class_rw_t *data() { \n        return bits.data();\n    }\n    void setData(class_rw_t *newData) {\n        bits.setData(newData);\n    }\n\t。。。。。。\n}\n```\nobjc_class继承自objc_object, 所以在runtime中, class也被看做一种对象, class中, 有三个数据:\n* Class superclass: 同样是Class类型，表明当前类的父类。\n* cache_t cache: cache用于优化方法调用，其对应的数据结构如是：\n```\nstruct cache_t {\n    struct bucket_t *_buckets;\n    mask_t _mask;\n    mask_t _occupied;\n    \n\t// 省略其余方法\n\t。。。   \n}\n\ntypedef uintptr_t cache_key_t;\n\nstruct bucket_t {\nprivate:\n    cache_key_t _key;\n    IMP _imp;\n\npublic:\n    inline cache_key_t key() const { return _key; }\n    inline IMP imp() const { return (IMP)_imp; }\n    inline void setKey(cache_key_t newKey) { _key = newKey; }\n    inline void setImp(IMP newImp) { _imp = newImp; }\n\n    void set(cache_key_t newKey, IMP newImp);\n};\n```\n这里我们第一次遇到uintptr_t类型（_key） 。在runtime中，uintptr_t定义为\n```\n#ifndef _UINTPTR_T\n#define _UINTPTR_T\ntypedef unsigned long\t\tuintptr_t;\n#endif /* _UINTPTR_T */\n```\n可以理解为void *.\n\ncache的核心是一个类型为bucket_t的指针, 指向一个cache_key_t和IMP的缓存节点.\n\nruntime方法调用的流程: 当要调用一个方法时, 先不去Class的方法列表中查找, 而是先去找cache_t cache. \n> 理论上一个方法被调用过之后, 再次被调用的概率很大, 所以当系统调用过一个方法后, 会将其实现IMP和key存到cache中\n\n* class_data_bits_t bits: Class的核心, 本质上是一个可以被Mask的指针, 不同的Mask, 可以取出不同的值.\n```\nstruct class_data_bits_t {\n\n    // Values are the FAST_ flags above.\n    uintptr_t bits;\n \n\tpublic:\n    class_rw_t* data() {\n        return (class_rw_t *)(bits & FAST_DATA_MASK);\n    }\n    void setData(class_rw_t *newData)\n    {\n        assert(!data()  ||  (newData->flags & (RW_REALIZING | RW_FUTURE)));\n        // Set during realization or construction only. No locking needed.\n        // Use a store-release fence because there may be concurrent\n        // readers of data and data's contents.\n        uintptr_t newBits = (bits & ~FAST_DATA_MASK) | (uintptr_t)newData;\n        atomic_thread_fence(memory_order_release);\n        bits = newBits;\n    }\n    。。。\n```\n\nclass_data_bits_t中仅含有一个成员uintptr_t, 可以理解为\"复合指针\".\n> 复合指针: 不仅包含了指针, 还包含了Class的各种异或flag来说明Class的属性, 把这些信息复合在一起, 仅用一个指针来表示\n\n当需要取出这些信息时, 需要用对应的以***FAST_***前缀开头的flag掩码对bits做按位与操作\n\n例如，我们需要取出Classs的核心信息class_rw_t, 则需要调用方法：\n```\nclass_rw_t* data() {\n        return (class_rw_t *)(bits & FAST_DATA_MASK);\n    }\n```\n该方法返回一个class_rw_t*，需要对bits进行FAST_DATA_MASK的与操作。\n\nClass的核心结构class_rw_t:\n```\nstruct class_rw_t {\n    // Be warned that Symbolication knows the layout of this structure.\n    uint32_t flags;\n    uint32_t version;\n\n    const class_ro_t *ro;         // 类不可修改的原始核心\n\n    // 下面三个array，method,property, protocol，可以被runtime 扩展，如Category\n    method_array_t methods;\n    property_array_t properties;\n    protocol_array_t protocols;\n\n    // 和继承相关的东西\n    Class firstSubclass;\n    Class nextSiblingClass;\n\n    // Class对应的 符号名称\n    char *demangledName;\n\t\n\t// 以下方法省略\n\t...\n}\n\nstruct class_ro_t {\n    uint32_t flags;\n    uint32_t instanceStart;\n    uint32_t instanceSize;\n#ifdef \\__LP64\\__\n    uint32_t reserved;\n#endif\n\n    const uint8_t * ivarLayout;\n    \n    const char * name;\n    method_list_t * baseMethodList;\n    protocol_list_t * baseProtocols;\n    const ivar_list_t * ivars;\n\n    const uint8_t * weakIvarLayout;\n    property_list_t *baseProperties;\n\n    method_list_t *baseMethods() const {\n        return baseMethodList;\n    }\n};\n```\n可以看到，在class_ro_t 中包含了类的名称，以及method_list_t， protocol_list_t， ivar_list_t， property_list_t 这些类的基本信息。 在class_ro_t 的信息是***不可修改和扩展***的。\n在更外一层 class_rw_t 中，有三个数组method_array_t, property_array_t, protocol_array_t:\n```\nstruct class_rw_t {\n\n\t...\n    const class_ro_t *ro;         // 类不可修改的原始核心\n\n    // 下面三个array，method,property, protocol，可以被runtime 扩展，如Category\n    method_array_t methods;\n    property_array_t properties;\n    protocol_array_t protocols;\n\t...\n}\n```\n这三个数组是可以被runtime动态扩展的。\n\n\b类抽象结构:\n> objc_class\n>> class_data_bits_t\n>>> class_rw_t(通过FAST_DATA_MASK获取)\n>>>> class_ro_t(类核心const信息)\n\n## realizeClass\n在objc_class的data()方法最初返回的是const class_ro_t * 类型，也就是类的基本信息。因为在调用realizeClass方法前，Category定义的各种方法，属性还没有附加到class上，因此只能够返回类的基本信息。\n\n而当我们调用realizeClass时，会在函数内部将Category中定义的各种扩展附加到class上，同时改写data()的返回值为class_rw_t *类型，核心代码如下:\n```\n\tconst class_ro_t *ro;\n    class_rw_t *rw;\n\tro = (const class_ro_t *)cls->data();\n    if (ro->flags & RO_FUTURE) {\n        // This was a future class. rw data is already allocated.\n        rw = cls->data();\n        ro = cls->data()->ro;\n        cls->changeInfo(RW_REALIZED|RW_REALIZING, RW_FUTURE);\n    } else {\n        // Normal class. Allocate writeable class data.\n        rw = (class_rw_t *)calloc(sizeof(class_rw_t), 1);\n        rw->ro = ro;\n        rw->flags = RW_REALIZED|RW_REALIZING;\n        cls->setData(rw);\n    }\n```\n所以在class没有调用realizeClass之前，不是真正完整的类。\n\n## objc_object\nOC的底层实现是runtime，在runtime这一层，对象被定义为objc_object 结构体，类被定义为了objc_class 结构体。而objc_class继承于objc_object，因此，类可以看做是一类特殊的对象。\nobjc_object定义:\n```\nstruct objc_object {\nprivate:\n    isa_t isa;\n\npublic:\n\n    // ISA() assumes this is NOT a tagged pointer object\n    Class ISA();\n\n    // getIsa() allows this to be a tagged pointer object\n    Class getIsa();\n\n\t// 省略其余方法\n\t...\n}\n```\nobjc_object的定义很简单，仅包含一个isa_t 类型。\n```\nunion isa_t \n{\n    isa_t() { }\n    isa_t(uintptr_t value) : bits(value) { }\n\n    Class cls;\n    uintptr_t bits;\n\t\n\t// 省略其余\n\t。。。\n}\n```\nisa_t 是一个联合，可以表示Class cls或uintptr_t bits类型。","slug":"Runtime/runtime机制(1)-基本数据结构","published":1,"updated":"2021-12-29T07:42:08.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxsdhbm2000854zx775fon0v","content":"<h2 id=\"什么是runtime\"><a href=\"#什么是runtime\" class=\"headerlink\" title=\"什么是runtime\"></a>什么是runtime</h2><p>OC是动态语言, 与静态语言不同, 静态语言的各种数据结构在编译期已经决定了, 不能被修改, 而动态语言可以在程序的运行期, 动态的修改一个类的结构, 如修改方法实现、绑定实例变量等.</p>\n<blockquote>\n<p>OC作为动态语言, 会想办法将编译期做的事推迟到运行期来做, 所以, 仅有编译器是不够的, 还需要一个运行时系统(runtime system), 它是OC运行框架的基石.</p>\n</blockquote>\n<p>要想了解runtime，就要先了解runtime中定义的各种数据结构, 先从最基础的objc_object和objc_class开始。</p>\n<h2 id=\"缘起-NSObject\"><a href=\"#缘起-NSObject\" class=\"headerlink\" title=\"缘起:NSObject\"></a>缘起:NSObject</h2><p>OC中，基本上所有的类的基类，都是NSObject。因此要深入了解OC中的类的结构，就要从NSObject这个类说起。</p>\n<p>XCode中NSObject的实现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface NSObject &lt;NSObject&gt; &#123;</span><br><span class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NSObject仅有一个实例变量Class isa：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// An opaque type that represents an Objective-C class.</span><br><span class=\"line\">typedef struct objc_class *Class;</span><br></pre></td></tr></table></figure></p>\n<p>Class实质上是指向objc_class的指针, 在runtime源码的objc-runtime-new.h中，可以看到objc_class在OC 2.0中的定义:</p>\n<h2 id=\"objc-clas\"><a href=\"#objc-clas\" class=\"headerlink\" title=\"objc_clas\"></a>objc_clas</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_class : objc_object &#123;</span><br><span class=\"line\">    // Class ISA;</span><br><span class=\"line\">    Class superclass;</span><br><span class=\"line\">    cache_t cache;             // formerly cache pointer and vtable</span><br><span class=\"line\">    class_data_bits_t bits;    // class_rw_t * plus custom rr/alloc flags</span><br><span class=\"line\"></span><br><span class=\"line\">    class_rw_t *data() &#123; </span><br><span class=\"line\">        return bits.data();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void setData(class_rw_t *newData) &#123;</span><br><span class=\"line\">        bits.setData(newData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t。。。。。。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>objc_class继承自objc_object, 所以在runtime中, class也被看做一种对象, class中, 有三个数据:</p>\n<ul>\n<li>Class superclass: 同样是Class类型，表明当前类的父类。</li>\n<li>cache_t cache: cache用于优化方法调用，其对应的数据结构如是：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct cache_t &#123;</span><br><span class=\"line\">    struct bucket_t *_buckets;</span><br><span class=\"line\">    mask_t _mask;</span><br><span class=\"line\">    mask_t _occupied;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t// 省略其余方法</span><br><span class=\"line\">\t。。。   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef uintptr_t cache_key_t;</span><br><span class=\"line\"></span><br><span class=\"line\">struct bucket_t &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    cache_key_t _key;</span><br><span class=\"line\">    IMP _imp;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    inline cache_key_t key() const &#123; return _key; &#125;</span><br><span class=\"line\">    inline IMP imp() const &#123; return (IMP)_imp; &#125;</span><br><span class=\"line\">    inline void setKey(cache_key_t newKey) &#123; _key = newKey; &#125;</span><br><span class=\"line\">    inline void setImp(IMP newImp) &#123; _imp = newImp; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    void set(cache_key_t newKey, IMP newImp);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里我们第一次遇到uintptr_t类型（_key） 。在runtime中，uintptr_t定义为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef _UINTPTR_T</span><br><span class=\"line\">#define _UINTPTR_T</span><br><span class=\"line\">typedef unsigned long\t\tuintptr_t;</span><br><span class=\"line\">#endif /* _UINTPTR_T */</span><br></pre></td></tr></table></figure></p>\n<p>可以理解为void *.</p>\n<p>cache的核心是一个类型为bucket_t的指针, 指向一个cache_key_t和IMP的缓存节点.</p>\n<p>runtime方法调用的流程: 当要调用一个方法时, 先不去Class的方法列表中查找, 而是先去找cache_t cache. </p>\n<blockquote>\n<p>理论上一个方法被调用过之后, 再次被调用的概率很大, 所以当系统调用过一个方法后, 会将其实现IMP和key存到cache中</p>\n</blockquote>\n<ul>\n<li>class_data_bits_t bits: Class的核心, 本质上是一个可以被Mask的指针, 不同的Mask, 可以取出不同的值.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct class_data_bits_t &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Values are the FAST_ flags above.</span><br><span class=\"line\">    uintptr_t bits;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">    class_rw_t* data() &#123;</span><br><span class=\"line\">        return (class_rw_t *)(bits &amp; FAST_DATA_MASK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void setData(class_rw_t *newData)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        assert(!data()  ||  (newData-&gt;flags &amp; (RW_REALIZING | RW_FUTURE)));</span><br><span class=\"line\">        // Set during realization or construction only. No locking needed.</span><br><span class=\"line\">        // Use a store-release fence because there may be concurrent</span><br><span class=\"line\">        // readers of data and data&apos;s contents.</span><br><span class=\"line\">        uintptr_t newBits = (bits &amp; ~FAST_DATA_MASK) | (uintptr_t)newData;</span><br><span class=\"line\">        atomic_thread_fence(memory_order_release);</span><br><span class=\"line\">        bits = newBits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    。。。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>class_data_bits_t中仅含有一个成员uintptr_t, 可以理解为”复合指针”.</p>\n<blockquote>\n<p>复合指针: 不仅包含了指针, 还包含了Class的各种异或flag来说明Class的属性, 把这些信息复合在一起, 仅用一个指针来表示</p>\n</blockquote>\n<p>当需要取出这些信息时, 需要用对应的以<strong><em>FAST_</em></strong>前缀开头的flag掩码对bits做按位与操作</p>\n<p>例如，我们需要取出Classs的核心信息class_rw_t, 则需要调用方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_rw_t* data() &#123;</span><br><span class=\"line\">        return (class_rw_t *)(bits &amp; FAST_DATA_MASK);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>该方法返回一个class_rw_t*，需要对bits进行FAST_DATA_MASK的与操作。</p>\n<p>Class的核心结构class_rw_t:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct class_rw_t &#123;</span><br><span class=\"line\">    // Be warned that Symbolication knows the layout of this structure.</span><br><span class=\"line\">    uint32_t flags;</span><br><span class=\"line\">    uint32_t version;</span><br><span class=\"line\"></span><br><span class=\"line\">    const class_ro_t *ro;         // 类不可修改的原始核心</span><br><span class=\"line\"></span><br><span class=\"line\">    // 下面三个array，method,property, protocol，可以被runtime 扩展，如Category</span><br><span class=\"line\">    method_array_t methods;</span><br><span class=\"line\">    property_array_t properties;</span><br><span class=\"line\">    protocol_array_t protocols;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 和继承相关的东西</span><br><span class=\"line\">    Class firstSubclass;</span><br><span class=\"line\">    Class nextSiblingClass;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Class对应的 符号名称</span><br><span class=\"line\">    char *demangledName;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 以下方法省略</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">struct class_ro_t &#123;</span><br><span class=\"line\">    uint32_t flags;</span><br><span class=\"line\">    uint32_t instanceStart;</span><br><span class=\"line\">    uint32_t instanceSize;</span><br><span class=\"line\">#ifdef \\__LP64\\__</span><br><span class=\"line\">    uint32_t reserved;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">    const uint8_t * ivarLayout;</span><br><span class=\"line\">    </span><br><span class=\"line\">    const char * name;</span><br><span class=\"line\">    method_list_t * baseMethodList;</span><br><span class=\"line\">    protocol_list_t * baseProtocols;</span><br><span class=\"line\">    const ivar_list_t * ivars;</span><br><span class=\"line\"></span><br><span class=\"line\">    const uint8_t * weakIvarLayout;</span><br><span class=\"line\">    property_list_t *baseProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    method_list_t *baseMethods() const &#123;</span><br><span class=\"line\">        return baseMethodList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，在class_ro_t 中包含了类的名称，以及method_list_t， protocol_list_t， ivar_list_t， property_list_t 这些类的基本信息。 在class_ro_t 的信息是<strong><em>不可修改和扩展</em></strong>的。<br>在更外一层 class_rw_t 中，有三个数组method_array_t, property_array_t, protocol_array_t:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct class_rw_t &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\">    const class_ro_t *ro;         // 类不可修改的原始核心</span><br><span class=\"line\"></span><br><span class=\"line\">    // 下面三个array，method,property, protocol，可以被runtime 扩展，如Category</span><br><span class=\"line\">    method_array_t methods;</span><br><span class=\"line\">    property_array_t properties;</span><br><span class=\"line\">    protocol_array_t protocols;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这三个数组是可以被runtime动态扩展的。</p>\n<p>\b类抽象结构:</p>\n<blockquote>\n<p>objc_class</p>\n<blockquote>\n<p>class_data_bits_t</p>\n<blockquote>\n<p>class_rw_t(通过FAST_DATA_MASK获取)</p>\n<blockquote>\n<p>class_ro_t(类核心const信息)</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"realizeClass\"><a href=\"#realizeClass\" class=\"headerlink\" title=\"realizeClass\"></a>realizeClass</h2><p>在objc_class的data()方法最初返回的是const class_ro_t * 类型，也就是类的基本信息。因为在调用realizeClass方法前，Category定义的各种方法，属性还没有附加到class上，因此只能够返回类的基本信息。</p>\n<p>而当我们调用realizeClass时，会在函数内部将Category中定义的各种扩展附加到class上，同时改写data()的返回值为class_rw_t *类型，核心代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const class_ro_t *ro;</span><br><span class=\"line\">   class_rw_t *rw;</span><br><span class=\"line\">ro = (const class_ro_t *)cls-&gt;data();</span><br><span class=\"line\">   if (ro-&gt;flags &amp; RO_FUTURE) &#123;</span><br><span class=\"line\">       // This was a future class. rw data is already allocated.</span><br><span class=\"line\">       rw = cls-&gt;data();</span><br><span class=\"line\">       ro = cls-&gt;data()-&gt;ro;</span><br><span class=\"line\">       cls-&gt;changeInfo(RW_REALIZED|RW_REALIZING, RW_FUTURE);</span><br><span class=\"line\">   &#125; else &#123;</span><br><span class=\"line\">       // Normal class. Allocate writeable class data.</span><br><span class=\"line\">       rw = (class_rw_t *)calloc(sizeof(class_rw_t), 1);</span><br><span class=\"line\">       rw-&gt;ro = ro;</span><br><span class=\"line\">       rw-&gt;flags = RW_REALIZED|RW_REALIZING;</span><br><span class=\"line\">       cls-&gt;setData(rw);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以在class没有调用realizeClass之前，不是真正完整的类。</p>\n<h2 id=\"objc-object\"><a href=\"#objc-object\" class=\"headerlink\" title=\"objc_object\"></a>objc_object</h2><p>OC的底层实现是runtime，在runtime这一层，对象被定义为objc_object 结构体，类被定义为了objc_class 结构体。而objc_class继承于objc_object，因此，类可以看做是一类特殊的对象。<br>objc_object定义:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_object &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    isa_t isa;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\"></span><br><span class=\"line\">    // ISA() assumes this is NOT a tagged pointer object</span><br><span class=\"line\">    Class ISA();</span><br><span class=\"line\"></span><br><span class=\"line\">    // getIsa() allows this to be a tagged pointer object</span><br><span class=\"line\">    Class getIsa();</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 省略其余方法</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>objc_object的定义很简单，仅包含一个isa_t 类型。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">union isa_t </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    isa_t() &#123; &#125;</span><br><span class=\"line\">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class cls;</span><br><span class=\"line\">    uintptr_t bits;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 省略其余</span><br><span class=\"line\">\t。。。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>isa_t 是一个联合，可以表示Class cls或uintptr_t bits类型。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是runtime\"><a href=\"#什么是runtime\" class=\"headerlink\" title=\"什么是runtime\"></a>什么是runtime</h2><p>OC是动态语言, 与静态语言不同, 静态语言的各种数据结构在编译期已经决定了, 不能被修改, 而动态语言可以在程序的运行期, 动态的修改一个类的结构, 如修改方法实现、绑定实例变量等.</p>\n<blockquote>\n<p>OC作为动态语言, 会想办法将编译期做的事推迟到运行期来做, 所以, 仅有编译器是不够的, 还需要一个运行时系统(runtime system), 它是OC运行框架的基石.</p>\n</blockquote>\n<p>要想了解runtime，就要先了解runtime中定义的各种数据结构, 先从最基础的objc_object和objc_class开始。</p>\n<h2 id=\"缘起-NSObject\"><a href=\"#缘起-NSObject\" class=\"headerlink\" title=\"缘起:NSObject\"></a>缘起:NSObject</h2><p>OC中，基本上所有的类的基类，都是NSObject。因此要深入了解OC中的类的结构，就要从NSObject这个类说起。</p>\n<p>XCode中NSObject的实现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface NSObject &lt;NSObject&gt; &#123;</span><br><span class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NSObject仅有一个实例变量Class isa：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// An opaque type that represents an Objective-C class.</span><br><span class=\"line\">typedef struct objc_class *Class;</span><br></pre></td></tr></table></figure></p>\n<p>Class实质上是指向objc_class的指针, 在runtime源码的objc-runtime-new.h中，可以看到objc_class在OC 2.0中的定义:</p>\n<h2 id=\"objc-clas\"><a href=\"#objc-clas\" class=\"headerlink\" title=\"objc_clas\"></a>objc_clas</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_class : objc_object &#123;</span><br><span class=\"line\">    // Class ISA;</span><br><span class=\"line\">    Class superclass;</span><br><span class=\"line\">    cache_t cache;             // formerly cache pointer and vtable</span><br><span class=\"line\">    class_data_bits_t bits;    // class_rw_t * plus custom rr/alloc flags</span><br><span class=\"line\"></span><br><span class=\"line\">    class_rw_t *data() &#123; </span><br><span class=\"line\">        return bits.data();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void setData(class_rw_t *newData) &#123;</span><br><span class=\"line\">        bits.setData(newData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t。。。。。。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>objc_class继承自objc_object, 所以在runtime中, class也被看做一种对象, class中, 有三个数据:</p>\n<ul>\n<li>Class superclass: 同样是Class类型，表明当前类的父类。</li>\n<li>cache_t cache: cache用于优化方法调用，其对应的数据结构如是：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct cache_t &#123;</span><br><span class=\"line\">    struct bucket_t *_buckets;</span><br><span class=\"line\">    mask_t _mask;</span><br><span class=\"line\">    mask_t _occupied;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t// 省略其余方法</span><br><span class=\"line\">\t。。。   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef uintptr_t cache_key_t;</span><br><span class=\"line\"></span><br><span class=\"line\">struct bucket_t &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    cache_key_t _key;</span><br><span class=\"line\">    IMP _imp;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    inline cache_key_t key() const &#123; return _key; &#125;</span><br><span class=\"line\">    inline IMP imp() const &#123; return (IMP)_imp; &#125;</span><br><span class=\"line\">    inline void setKey(cache_key_t newKey) &#123; _key = newKey; &#125;</span><br><span class=\"line\">    inline void setImp(IMP newImp) &#123; _imp = newImp; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    void set(cache_key_t newKey, IMP newImp);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里我们第一次遇到uintptr_t类型（_key） 。在runtime中，uintptr_t定义为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef _UINTPTR_T</span><br><span class=\"line\">#define _UINTPTR_T</span><br><span class=\"line\">typedef unsigned long\t\tuintptr_t;</span><br><span class=\"line\">#endif /* _UINTPTR_T */</span><br></pre></td></tr></table></figure></p>\n<p>可以理解为void *.</p>\n<p>cache的核心是一个类型为bucket_t的指针, 指向一个cache_key_t和IMP的缓存节点.</p>\n<p>runtime方法调用的流程: 当要调用一个方法时, 先不去Class的方法列表中查找, 而是先去找cache_t cache. </p>\n<blockquote>\n<p>理论上一个方法被调用过之后, 再次被调用的概率很大, 所以当系统调用过一个方法后, 会将其实现IMP和key存到cache中</p>\n</blockquote>\n<ul>\n<li>class_data_bits_t bits: Class的核心, 本质上是一个可以被Mask的指针, 不同的Mask, 可以取出不同的值.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct class_data_bits_t &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Values are the FAST_ flags above.</span><br><span class=\"line\">    uintptr_t bits;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">    class_rw_t* data() &#123;</span><br><span class=\"line\">        return (class_rw_t *)(bits &amp; FAST_DATA_MASK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void setData(class_rw_t *newData)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        assert(!data()  ||  (newData-&gt;flags &amp; (RW_REALIZING | RW_FUTURE)));</span><br><span class=\"line\">        // Set during realization or construction only. No locking needed.</span><br><span class=\"line\">        // Use a store-release fence because there may be concurrent</span><br><span class=\"line\">        // readers of data and data&apos;s contents.</span><br><span class=\"line\">        uintptr_t newBits = (bits &amp; ~FAST_DATA_MASK) | (uintptr_t)newData;</span><br><span class=\"line\">        atomic_thread_fence(memory_order_release);</span><br><span class=\"line\">        bits = newBits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    。。。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>class_data_bits_t中仅含有一个成员uintptr_t, 可以理解为”复合指针”.</p>\n<blockquote>\n<p>复合指针: 不仅包含了指针, 还包含了Class的各种异或flag来说明Class的属性, 把这些信息复合在一起, 仅用一个指针来表示</p>\n</blockquote>\n<p>当需要取出这些信息时, 需要用对应的以<strong><em>FAST_</em></strong>前缀开头的flag掩码对bits做按位与操作</p>\n<p>例如，我们需要取出Classs的核心信息class_rw_t, 则需要调用方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class_rw_t* data() &#123;</span><br><span class=\"line\">        return (class_rw_t *)(bits &amp; FAST_DATA_MASK);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>该方法返回一个class_rw_t*，需要对bits进行FAST_DATA_MASK的与操作。</p>\n<p>Class的核心结构class_rw_t:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct class_rw_t &#123;</span><br><span class=\"line\">    // Be warned that Symbolication knows the layout of this structure.</span><br><span class=\"line\">    uint32_t flags;</span><br><span class=\"line\">    uint32_t version;</span><br><span class=\"line\"></span><br><span class=\"line\">    const class_ro_t *ro;         // 类不可修改的原始核心</span><br><span class=\"line\"></span><br><span class=\"line\">    // 下面三个array，method,property, protocol，可以被runtime 扩展，如Category</span><br><span class=\"line\">    method_array_t methods;</span><br><span class=\"line\">    property_array_t properties;</span><br><span class=\"line\">    protocol_array_t protocols;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 和继承相关的东西</span><br><span class=\"line\">    Class firstSubclass;</span><br><span class=\"line\">    Class nextSiblingClass;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Class对应的 符号名称</span><br><span class=\"line\">    char *demangledName;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 以下方法省略</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">struct class_ro_t &#123;</span><br><span class=\"line\">    uint32_t flags;</span><br><span class=\"line\">    uint32_t instanceStart;</span><br><span class=\"line\">    uint32_t instanceSize;</span><br><span class=\"line\">#ifdef \\__LP64\\__</span><br><span class=\"line\">    uint32_t reserved;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">    const uint8_t * ivarLayout;</span><br><span class=\"line\">    </span><br><span class=\"line\">    const char * name;</span><br><span class=\"line\">    method_list_t * baseMethodList;</span><br><span class=\"line\">    protocol_list_t * baseProtocols;</span><br><span class=\"line\">    const ivar_list_t * ivars;</span><br><span class=\"line\"></span><br><span class=\"line\">    const uint8_t * weakIvarLayout;</span><br><span class=\"line\">    property_list_t *baseProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    method_list_t *baseMethods() const &#123;</span><br><span class=\"line\">        return baseMethodList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，在class_ro_t 中包含了类的名称，以及method_list_t， protocol_list_t， ivar_list_t， property_list_t 这些类的基本信息。 在class_ro_t 的信息是<strong><em>不可修改和扩展</em></strong>的。<br>在更外一层 class_rw_t 中，有三个数组method_array_t, property_array_t, protocol_array_t:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct class_rw_t &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\">    const class_ro_t *ro;         // 类不可修改的原始核心</span><br><span class=\"line\"></span><br><span class=\"line\">    // 下面三个array，method,property, protocol，可以被runtime 扩展，如Category</span><br><span class=\"line\">    method_array_t methods;</span><br><span class=\"line\">    property_array_t properties;</span><br><span class=\"line\">    protocol_array_t protocols;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这三个数组是可以被runtime动态扩展的。</p>\n<p>\b类抽象结构:</p>\n<blockquote>\n<p>objc_class</p>\n<blockquote>\n<p>class_data_bits_t</p>\n<blockquote>\n<p>class_rw_t(通过FAST_DATA_MASK获取)</p>\n<blockquote>\n<p>class_ro_t(类核心const信息)</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"realizeClass\"><a href=\"#realizeClass\" class=\"headerlink\" title=\"realizeClass\"></a>realizeClass</h2><p>在objc_class的data()方法最初返回的是const class_ro_t * 类型，也就是类的基本信息。因为在调用realizeClass方法前，Category定义的各种方法，属性还没有附加到class上，因此只能够返回类的基本信息。</p>\n<p>而当我们调用realizeClass时，会在函数内部将Category中定义的各种扩展附加到class上，同时改写data()的返回值为class_rw_t *类型，核心代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const class_ro_t *ro;</span><br><span class=\"line\">   class_rw_t *rw;</span><br><span class=\"line\">ro = (const class_ro_t *)cls-&gt;data();</span><br><span class=\"line\">   if (ro-&gt;flags &amp; RO_FUTURE) &#123;</span><br><span class=\"line\">       // This was a future class. rw data is already allocated.</span><br><span class=\"line\">       rw = cls-&gt;data();</span><br><span class=\"line\">       ro = cls-&gt;data()-&gt;ro;</span><br><span class=\"line\">       cls-&gt;changeInfo(RW_REALIZED|RW_REALIZING, RW_FUTURE);</span><br><span class=\"line\">   &#125; else &#123;</span><br><span class=\"line\">       // Normal class. Allocate writeable class data.</span><br><span class=\"line\">       rw = (class_rw_t *)calloc(sizeof(class_rw_t), 1);</span><br><span class=\"line\">       rw-&gt;ro = ro;</span><br><span class=\"line\">       rw-&gt;flags = RW_REALIZED|RW_REALIZING;</span><br><span class=\"line\">       cls-&gt;setData(rw);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以在class没有调用realizeClass之前，不是真正完整的类。</p>\n<h2 id=\"objc-object\"><a href=\"#objc-object\" class=\"headerlink\" title=\"objc_object\"></a>objc_object</h2><p>OC的底层实现是runtime，在runtime这一层，对象被定义为objc_object 结构体，类被定义为了objc_class 结构体。而objc_class继承于objc_object，因此，类可以看做是一类特殊的对象。<br>objc_object定义:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_object &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    isa_t isa;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\"></span><br><span class=\"line\">    // ISA() assumes this is NOT a tagged pointer object</span><br><span class=\"line\">    Class ISA();</span><br><span class=\"line\"></span><br><span class=\"line\">    // getIsa() allows this to be a tagged pointer object</span><br><span class=\"line\">    Class getIsa();</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 省略其余方法</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>objc_object的定义很简单，仅包含一个isa_t 类型。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">union isa_t </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    isa_t() &#123; &#125;</span><br><span class=\"line\">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class cls;</span><br><span class=\"line\">    uintptr_t bits;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 省略其余</span><br><span class=\"line\">\t。。。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>isa_t 是一个联合，可以表示Class cls或uintptr_t bits类型。</p>\n"},{"title":"OC项目集成DZMeBookRead","p":"总结/OC项目集成DZMeBookRead","date":"2020-09-15T11:28:48.000Z","_content":"\n## 导入DZMeBookRead流程\n\n1.将DZMeBookRead项目中DZMeBookRead文件夹拖入OC项目\n\n2.将DZMeBookRead项目中Assets.xcassets文件内的图片拖入OC项目\n\n3.创建一个项目名称开头的桥接 \"xxx-Bridging-Header.h\" 例如: OCDZMeBookRead-Bridging-Header.h\n\n4.找到 Build Settings -> Swift Compiler General -> Objective-C Briging Header 加入桥接文件路径\n\n5.找到 Build Settings -> Swift Compiler Language -> 设置Swift语言版本（这里就是你使用的DZMeBookRead是Swift什么版本的）\n\n6.在info.plist中加入 View controller-based status bar appearance 设置为 NO （允许调整状态栏）\n\n7.在 \"xxx-Bridging-Header.h\" 中导入 \"DZMeBookRead-Bridging-Pch.h\"(如果存在的话) \n\n8.混编头文件 #import \"OCDZMeBookRead(你的项目名称)-Swift.h\" 头文件导入\n\n9.command + shift + R  运行项目测试\n\n10.注意：想要在OC中使用Swift的方法或者属性 需要在方法或者属性名前面添加 @objc\n    \n    例如：\n    \n    DZMReadParser中的方法\n    \n    class func ParserLocalURL(url:URL,complete:((_ readModel:DZMReadModel) ->Void)?)\n    \n    你想要在OC中进行使用 需要在最前面添加 @objc\n    \n    @objc class func ParserLocalURL(url:URL,complete:((_ readModel:DZMReadModel) ->Void)?)\n    \n    再 command + shift + R\n    \n    可以调用了 属性也是一样\n    \n    例如: @objc var readModel:DZMReadModel!\n    \n    原本的DZMeBookRead是Swift代码 如果需要进混编且需要用到参数或者方法 需要自己进去源代码中加入 @objc 在进行使用\n    \n    作者已经为部分可能使用的到的方法或属性添加了 @objc ！！！","source":"_posts/总结/OC项目集成DZMeBookRead.md","raw":"---\ntitle: OC项目集成DZMeBookRead\np: 总结/OC项目集成DZMeBookRead\ndate: 2020-09-15 19:28:48\ntags:\ncategories: 总结\n---\n\n## 导入DZMeBookRead流程\n\n1.将DZMeBookRead项目中DZMeBookRead文件夹拖入OC项目\n\n2.将DZMeBookRead项目中Assets.xcassets文件内的图片拖入OC项目\n\n3.创建一个项目名称开头的桥接 \"xxx-Bridging-Header.h\" 例如: OCDZMeBookRead-Bridging-Header.h\n\n4.找到 Build Settings -> Swift Compiler General -> Objective-C Briging Header 加入桥接文件路径\n\n5.找到 Build Settings -> Swift Compiler Language -> 设置Swift语言版本（这里就是你使用的DZMeBookRead是Swift什么版本的）\n\n6.在info.plist中加入 View controller-based status bar appearance 设置为 NO （允许调整状态栏）\n\n7.在 \"xxx-Bridging-Header.h\" 中导入 \"DZMeBookRead-Bridging-Pch.h\"(如果存在的话) \n\n8.混编头文件 #import \"OCDZMeBookRead(你的项目名称)-Swift.h\" 头文件导入\n\n9.command + shift + R  运行项目测试\n\n10.注意：想要在OC中使用Swift的方法或者属性 需要在方法或者属性名前面添加 @objc\n    \n    例如：\n    \n    DZMReadParser中的方法\n    \n    class func ParserLocalURL(url:URL,complete:((_ readModel:DZMReadModel) ->Void)?)\n    \n    你想要在OC中进行使用 需要在最前面添加 @objc\n    \n    @objc class func ParserLocalURL(url:URL,complete:((_ readModel:DZMReadModel) ->Void)?)\n    \n    再 command + shift + R\n    \n    可以调用了 属性也是一样\n    \n    例如: @objc var readModel:DZMReadModel!\n    \n    原本的DZMeBookRead是Swift代码 如果需要进混编且需要用到参数或者方法 需要自己进去源代码中加入 @objc 在进行使用\n    \n    作者已经为部分可能使用的到的方法或属性添加了 @objc ！！！","slug":"总结/OC项目集成DZMeBookRead","published":1,"updated":"2021-12-29T07:42:08.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxsdhbm4000a54zxljnm4t82","content":"<h2 id=\"导入DZMeBookRead流程\"><a href=\"#导入DZMeBookRead流程\" class=\"headerlink\" title=\"导入DZMeBookRead流程\"></a>导入DZMeBookRead流程</h2><p>1.将DZMeBookRead项目中DZMeBookRead文件夹拖入OC项目</p>\n<p>2.将DZMeBookRead项目中Assets.xcassets文件内的图片拖入OC项目</p>\n<p>3.创建一个项目名称开头的桥接 “xxx-Bridging-Header.h” 例如: OCDZMeBookRead-Bridging-Header.h</p>\n<p>4.找到 Build Settings -&gt; Swift Compiler General -&gt; Objective-C Briging Header 加入桥接文件路径</p>\n<p>5.找到 Build Settings -&gt; Swift Compiler Language -&gt; 设置Swift语言版本（这里就是你使用的DZMeBookRead是Swift什么版本的）</p>\n<p>6.在info.plist中加入 View controller-based status bar appearance 设置为 NO （允许调整状态栏）</p>\n<p>7.在 “xxx-Bridging-Header.h” 中导入 “DZMeBookRead-Bridging-Pch.h”(如果存在的话) </p>\n<p>8.混编头文件 #import “OCDZMeBookRead(你的项目名称)-Swift.h” 头文件导入</p>\n<p>9.command + shift + R  运行项目测试</p>\n<p>10.注意：想要在OC中使用Swift的方法或者属性 需要在方法或者属性名前面添加 @objc</p>\n<pre><code>例如：\n\nDZMReadParser中的方法\n\nclass func ParserLocalURL(url:URL,complete:((_ readModel:DZMReadModel) -&gt;Void)?)\n\n你想要在OC中进行使用 需要在最前面添加 @objc\n\n@objc class func ParserLocalURL(url:URL,complete:((_ readModel:DZMReadModel) -&gt;Void)?)\n\n再 command + shift + R\n\n可以调用了 属性也是一样\n\n例如: @objc var readModel:DZMReadModel!\n\n原本的DZMeBookRead是Swift代码 如果需要进混编且需要用到参数或者方法 需要自己进去源代码中加入 @objc 在进行使用\n\n作者已经为部分可能使用的到的方法或属性添加了 @objc ！！！\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"导入DZMeBookRead流程\"><a href=\"#导入DZMeBookRead流程\" class=\"headerlink\" title=\"导入DZMeBookRead流程\"></a>导入DZMeBookRead流程</h2><p>1.将DZMeBookRead项目中DZMeBookRead文件夹拖入OC项目</p>\n<p>2.将DZMeBookRead项目中Assets.xcassets文件内的图片拖入OC项目</p>\n<p>3.创建一个项目名称开头的桥接 “xxx-Bridging-Header.h” 例如: OCDZMeBookRead-Bridging-Header.h</p>\n<p>4.找到 Build Settings -&gt; Swift Compiler General -&gt; Objective-C Briging Header 加入桥接文件路径</p>\n<p>5.找到 Build Settings -&gt; Swift Compiler Language -&gt; 设置Swift语言版本（这里就是你使用的DZMeBookRead是Swift什么版本的）</p>\n<p>6.在info.plist中加入 View controller-based status bar appearance 设置为 NO （允许调整状态栏）</p>\n<p>7.在 “xxx-Bridging-Header.h” 中导入 “DZMeBookRead-Bridging-Pch.h”(如果存在的话) </p>\n<p>8.混编头文件 #import “OCDZMeBookRead(你的项目名称)-Swift.h” 头文件导入</p>\n<p>9.command + shift + R  运行项目测试</p>\n<p>10.注意：想要在OC中使用Swift的方法或者属性 需要在方法或者属性名前面添加 @objc</p>\n<pre><code>例如：\n\nDZMReadParser中的方法\n\nclass func ParserLocalURL(url:URL,complete:((_ readModel:DZMReadModel) -&gt;Void)?)\n\n你想要在OC中进行使用 需要在最前面添加 @objc\n\n@objc class func ParserLocalURL(url:URL,complete:((_ readModel:DZMReadModel) -&gt;Void)?)\n\n再 command + shift + R\n\n可以调用了 属性也是一样\n\n例如: @objc var readModel:DZMReadModel!\n\n原本的DZMeBookRead是Swift代码 如果需要进混编且需要用到参数或者方法 需要自己进去源代码中加入 @objc 在进行使用\n\n作者已经为部分可能使用的到的方法或属性添加了 @objc ！！！\n</code></pre>"},{"title":"使用Hexo + Github创建博客","date":"2019-05-14T07:23:33.000Z","_content":"\n### 什么是 Hexo？\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown](https://www.runoob.com/markdown/md-tutorial.html)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 安装\n\n#### 安装前提\n\n- [Node.js](https://nodejs.org/en/) (Should be at least nodejs 6.9)\n- [Git](https://git-scm.com/)\n\n如果你的电脑中已经安装上述必备程序,接下来只需要使用 npm 即可完成 Hexo 的安装。\n\n`$ npm install -g hexo-cli`\n\n如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。\n\n> Mac 用户\n您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -> Download -> Command Line Tools -> Install 安装命令行工具。\n\n#### 安装Git\n\n- Windows：下载并安装 [git](https://git-scm.com/download/win).\n- Mac：使用 [Homebrew](https://brew.sh/), [MacPorts](https://www.macports.org/) ：`brew install git`;或下载 [安装程序](https://sourceforge.net/projects/git-osx-installer/) 安装。\n- Linux (Ubuntu, Debian)：`sudo apt-get install git-core`\n- Linux (Fedora, Red Hat, CentOS)：`sudo yum install git-core`\n\n#### 安装Node.js\n\n安装 Node.js 的最佳方式是使用 [nvm](https://github.com/nvm-sh/nvm)。\n\ncURL:\n\n``` bash\n$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh\n```\n\nWget:\n\n``` bash\n$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh\n```\n\n安装完成后，重启终端并执行下列命令即可安装 Node.js。\n\n```bash\n$ nvm install stable\n```\n\n或者也可以下载 [安装程序](https://nodejs.org/en/) 来安装。\n\n#### 安装 Hexo\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n```bash\n$ npm install -g hexo-cli\n```\n\n### 建站\n\n安装 Hexo 完成后，执行下列命令建站，Hexo 将会在指定文件夹中新建所需要的文件。\n\n```bash\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\n#### 本地预览\n\n此时已经可以本地预览Blog页面了,执行下列命令\n\n```bash\n$ hexo server # 开启本地服务器\n```\n\n终端会输出本地url,默认是[http://localhost:4000](http://localhost:4000),打开可预览本地Blog页面\n\n### 与GitHub建立关联\n\n#### 新建GitHub仓库(如果已经创建,请跳到下一步)\n\n新建一个GitHub仓库,名称为: `用户名.github.io.git # 将用户名替换为你自己的github用户名`\n\n#### 生成 ssh key(如果已经生成,请跳到下一步)\n\n```bash\n$ ssh-keygen -t rsa -C \"your_email@example.com\" # 注意将`your_email`替换成之前注册github帐号时的邮箱\n```\n\n然后进入 `~/.ssh/id_rsa.pub` 路径下,打开`id_rsa.pub`,将内容复制到剪切板\n\n#### 将本电脑的 SSH 公钥配置到 GitHub 上\n\n登录[GitHub](https://github.com/), 点击Settings –> SSH and GPG keys –> New SSH key,将SSH key添加到GitHub账号中\n\n#### 配置_config.yml(在Hexo生成的根目录下)\n\n打开_config.yml,找到deployment模块,将改模块替换为如下格式(**格式要一模一样,包括空格和换行之后的位置**):\n```bash\ndeploy: \n  type: git\n  repo: https://github.com/用户名/用户名.github.io.git\n  branch: master\n ```\n`_config.yml`其他配置参考官方文档 [配置_config.yml](https://hexo.io/zh-cn/docs/configuration)\n\n### 将博客推至远端\n\n#### generate\n\n```bash\n$ hexo generate\n```\n生成静态文件。\n\n选项\t| 描述\n----| ---\n-d, --deploy | 文件生成后立即部署网站\n\n#### deploy\n\n```bash\n$ hexo deploy\n```\n部署网站。\n\n参数\t| 描述\n----| ---\n-g, --generate | 部署之前预先生成静态文件\n\n#### 其他指令\n\n参见 [Hexo指令](https://hexo.io/zh-cn/docs/commands)\n\n### 打开博客页面\n\n浏览器输入:[https://用户名.github.io](https://用户名.github.io),打开博客页面,博客创建成功!\n\n由于Hexo使用MarkDown解析,附上链接[MarkDown语法说明](http://wow.kuapp.com/markdown/)\n\n### 同时部署到Coding\n\n由于GitHub服务器在国外,国内访问速度可能会很慢,所以可以将hexo同时部署到Coding上\n\n#### 注册 Coding 帐号\n注册网址：[Coding官网](https://coding.net/)\n\n#### 将本电脑的 SSH 公钥配置到 Coding 上\n\n方法类似上方\n>将本电脑的 SSH 公钥配置到 GitHub 上\n\n#### 测试 SSH 公钥是否添加成功 \n\n本地打开 Git Bash 窗口，输入一下命令：\n```bash\nssh -T git@coding.net\n```\n这时候会显示是否继续，选择 yes 继续，如果提示下列内容成功，即 SSH 公钥配置成功：\n\n`Hello username You've connected to Coding.net by SSH successfully!`\n\n如果显示如下错误：\n\n`ssh: connect to host coding.net port 22: Connection refused`\n\n说明防火墙完全屏蔽了端口 22 ，这时候不要慌张，直接输入如下命令使用 Coding 提供的 443 端口 SSH 服务即可解决：\n\n```bash\nssh -T -p 443 git@git-ssh.coding.net\n```\n\n然后在输入验证命令，显示 Coding 帐号与相关信息，即 SSH 公钥配置成功。\n\n#### 新建Coding项目\n\n比较简单,按提示设置即可\n特别注意一点:**为了方便访问,Coding的用户名一定要修改(除非使用默认用户名创建项目!!!),默认用户名是网站生成的乱码,如果不修改,则项目地址会根据默认用户名生成,导致部署成功后博客首页展示乱码而且无法跳转.**\n\n新建项目完毕后，打开项目的 Pages 服务选项，选择部署来源为 master 分支.\n\n#### 配置博客主文件，同时部署 Hexo 博客到 GitHub 和 Coding 上\n\n1.打开_config.yml,找到deploy属性,修改如下:\n```bash\ndeploy: \n  type: git\n  repo: \n    github: https://github.com/username/username.github.io.git\n    coding: https://git.dev.tencent.com/username/username.git\n  branch: master\n```\n\n2.打开 Hexo 主目录下的 source 文件，新建文件 Staticfile ，这个文件是 Coding 静态文件部署的标志，注意文件名字必须为 Staticfile(只要生成空文件即可)，否则 Coding 上无法完成静态文件的部署\n\n#### 部署\n\n键入如下命令:\n```bash\nhexo clean && hexo g && hexo d\n```\n\n部署成功，到浏览器地址栏分别输入 GitHub 地址 和 Coding 地址，访问成功：\n\n[https://username.github.io/](https://username.github.io/)\n\n[https://username.coding.me/](https://username.coding.me/)\n\n","source":"_posts/总结/使用Hexo-Github创建博客.md","raw":"---\ntitle: 使用Hexo + Github创建博客\ndate: 2019-05-14 15:23:33\ntags:\ncategories: 总结\n---\n\n### 什么是 Hexo？\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown](https://www.runoob.com/markdown/md-tutorial.html)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 安装\n\n#### 安装前提\n\n- [Node.js](https://nodejs.org/en/) (Should be at least nodejs 6.9)\n- [Git](https://git-scm.com/)\n\n如果你的电脑中已经安装上述必备程序,接下来只需要使用 npm 即可完成 Hexo 的安装。\n\n`$ npm install -g hexo-cli`\n\n如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。\n\n> Mac 用户\n您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -> Download -> Command Line Tools -> Install 安装命令行工具。\n\n#### 安装Git\n\n- Windows：下载并安装 [git](https://git-scm.com/download/win).\n- Mac：使用 [Homebrew](https://brew.sh/), [MacPorts](https://www.macports.org/) ：`brew install git`;或下载 [安装程序](https://sourceforge.net/projects/git-osx-installer/) 安装。\n- Linux (Ubuntu, Debian)：`sudo apt-get install git-core`\n- Linux (Fedora, Red Hat, CentOS)：`sudo yum install git-core`\n\n#### 安装Node.js\n\n安装 Node.js 的最佳方式是使用 [nvm](https://github.com/nvm-sh/nvm)。\n\ncURL:\n\n``` bash\n$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh\n```\n\nWget:\n\n``` bash\n$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh\n```\n\n安装完成后，重启终端并执行下列命令即可安装 Node.js。\n\n```bash\n$ nvm install stable\n```\n\n或者也可以下载 [安装程序](https://nodejs.org/en/) 来安装。\n\n#### 安装 Hexo\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n```bash\n$ npm install -g hexo-cli\n```\n\n### 建站\n\n安装 Hexo 完成后，执行下列命令建站，Hexo 将会在指定文件夹中新建所需要的文件。\n\n```bash\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\n#### 本地预览\n\n此时已经可以本地预览Blog页面了,执行下列命令\n\n```bash\n$ hexo server # 开启本地服务器\n```\n\n终端会输出本地url,默认是[http://localhost:4000](http://localhost:4000),打开可预览本地Blog页面\n\n### 与GitHub建立关联\n\n#### 新建GitHub仓库(如果已经创建,请跳到下一步)\n\n新建一个GitHub仓库,名称为: `用户名.github.io.git # 将用户名替换为你自己的github用户名`\n\n#### 生成 ssh key(如果已经生成,请跳到下一步)\n\n```bash\n$ ssh-keygen -t rsa -C \"your_email@example.com\" # 注意将`your_email`替换成之前注册github帐号时的邮箱\n```\n\n然后进入 `~/.ssh/id_rsa.pub` 路径下,打开`id_rsa.pub`,将内容复制到剪切板\n\n#### 将本电脑的 SSH 公钥配置到 GitHub 上\n\n登录[GitHub](https://github.com/), 点击Settings –> SSH and GPG keys –> New SSH key,将SSH key添加到GitHub账号中\n\n#### 配置_config.yml(在Hexo生成的根目录下)\n\n打开_config.yml,找到deployment模块,将改模块替换为如下格式(**格式要一模一样,包括空格和换行之后的位置**):\n```bash\ndeploy: \n  type: git\n  repo: https://github.com/用户名/用户名.github.io.git\n  branch: master\n ```\n`_config.yml`其他配置参考官方文档 [配置_config.yml](https://hexo.io/zh-cn/docs/configuration)\n\n### 将博客推至远端\n\n#### generate\n\n```bash\n$ hexo generate\n```\n生成静态文件。\n\n选项\t| 描述\n----| ---\n-d, --deploy | 文件生成后立即部署网站\n\n#### deploy\n\n```bash\n$ hexo deploy\n```\n部署网站。\n\n参数\t| 描述\n----| ---\n-g, --generate | 部署之前预先生成静态文件\n\n#### 其他指令\n\n参见 [Hexo指令](https://hexo.io/zh-cn/docs/commands)\n\n### 打开博客页面\n\n浏览器输入:[https://用户名.github.io](https://用户名.github.io),打开博客页面,博客创建成功!\n\n由于Hexo使用MarkDown解析,附上链接[MarkDown语法说明](http://wow.kuapp.com/markdown/)\n\n### 同时部署到Coding\n\n由于GitHub服务器在国外,国内访问速度可能会很慢,所以可以将hexo同时部署到Coding上\n\n#### 注册 Coding 帐号\n注册网址：[Coding官网](https://coding.net/)\n\n#### 将本电脑的 SSH 公钥配置到 Coding 上\n\n方法类似上方\n>将本电脑的 SSH 公钥配置到 GitHub 上\n\n#### 测试 SSH 公钥是否添加成功 \n\n本地打开 Git Bash 窗口，输入一下命令：\n```bash\nssh -T git@coding.net\n```\n这时候会显示是否继续，选择 yes 继续，如果提示下列内容成功，即 SSH 公钥配置成功：\n\n`Hello username You've connected to Coding.net by SSH successfully!`\n\n如果显示如下错误：\n\n`ssh: connect to host coding.net port 22: Connection refused`\n\n说明防火墙完全屏蔽了端口 22 ，这时候不要慌张，直接输入如下命令使用 Coding 提供的 443 端口 SSH 服务即可解决：\n\n```bash\nssh -T -p 443 git@git-ssh.coding.net\n```\n\n然后在输入验证命令，显示 Coding 帐号与相关信息，即 SSH 公钥配置成功。\n\n#### 新建Coding项目\n\n比较简单,按提示设置即可\n特别注意一点:**为了方便访问,Coding的用户名一定要修改(除非使用默认用户名创建项目!!!),默认用户名是网站生成的乱码,如果不修改,则项目地址会根据默认用户名生成,导致部署成功后博客首页展示乱码而且无法跳转.**\n\n新建项目完毕后，打开项目的 Pages 服务选项，选择部署来源为 master 分支.\n\n#### 配置博客主文件，同时部署 Hexo 博客到 GitHub 和 Coding 上\n\n1.打开_config.yml,找到deploy属性,修改如下:\n```bash\ndeploy: \n  type: git\n  repo: \n    github: https://github.com/username/username.github.io.git\n    coding: https://git.dev.tencent.com/username/username.git\n  branch: master\n```\n\n2.打开 Hexo 主目录下的 source 文件，新建文件 Staticfile ，这个文件是 Coding 静态文件部署的标志，注意文件名字必须为 Staticfile(只要生成空文件即可)，否则 Coding 上无法完成静态文件的部署\n\n#### 部署\n\n键入如下命令:\n```bash\nhexo clean && hexo g && hexo d\n```\n\n部署成功，到浏览器地址栏分别输入 GitHub 地址 和 Coding 地址，访问成功：\n\n[https://username.github.io/](https://username.github.io/)\n\n[https://username.coding.me/](https://username.coding.me/)\n\n","slug":"总结/使用Hexo-Github创建博客","published":1,"updated":"2021-12-29T07:42:08.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxsdhbm6000d54zxil0775cy","content":"<h3 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"https://www.runoob.com/markdown/md-tutorial.html\" target=\"_blank\" rel=\"noopener\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h4><ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a> (Should be at least nodejs 6.9)</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a></li>\n</ul>\n<p>如果你的电脑中已经安装上述必备程序,接下来只需要使用 npm 即可完成 Hexo 的安装。</p>\n<p><code>$ npm install -g hexo-cli</code></p>\n<p>如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>\n<blockquote>\n<p>Mac 用户<br>您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p>\n</blockquote>\n<h4 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h4><ul>\n<li>Windows：下载并安装 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git</a>.</li>\n<li>Mac：使用 <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>, <a href=\"https://www.macports.org/\" target=\"_blank\" rel=\"noopener\">MacPorts</a> ：<code>brew install git</code>;或下载 <a href=\"https://sourceforge.net/projects/git-osx-installer/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 安装。</li>\n<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li>\n<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li>\n</ul>\n<h4 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h4><p>安装 Node.js 的最佳方式是使用 <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a>。</p>\n<p>cURL:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>Wget:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install stable</span><br></pre></td></tr></table></figure>\n<p>或者也可以下载 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 来安装。</p>\n<h4 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h3><p>安装 Hexo 完成后，执行下列命令建站，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<h4 id=\"本地预览\"><a href=\"#本地预览\" class=\"headerlink\" title=\"本地预览\"></a>本地预览</h4><p>此时已经可以本地预览Blog页面了,执行下列命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server <span class=\"comment\"># 开启本地服务器</span></span><br></pre></td></tr></table></figure>\n<p>终端会输出本地url,默认是<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>,打开可预览本地Blog页面</p>\n<h3 id=\"与GitHub建立关联\"><a href=\"#与GitHub建立关联\" class=\"headerlink\" title=\"与GitHub建立关联\"></a>与GitHub建立关联</h3><h4 id=\"新建GitHub仓库-如果已经创建-请跳到下一步\"><a href=\"#新建GitHub仓库-如果已经创建-请跳到下一步\" class=\"headerlink\" title=\"新建GitHub仓库(如果已经创建,请跳到下一步)\"></a>新建GitHub仓库(如果已经创建,请跳到下一步)</h4><p>新建一个GitHub仓库,名称为: <code>用户名.github.io.git # 将用户名替换为你自己的github用户名</code></p>\n<h4 id=\"生成-ssh-key-如果已经生成-请跳到下一步\"><a href=\"#生成-ssh-key-如果已经生成-请跳到下一步\" class=\"headerlink\" title=\"生成 ssh key(如果已经生成,请跳到下一步)\"></a>生成 ssh key(如果已经生成,请跳到下一步)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"your_email@example.com\"</span> <span class=\"comment\"># 注意将`your_email`替换成之前注册github帐号时的邮箱</span></span><br></pre></td></tr></table></figure>\n<p>然后进入 <code>~/.ssh/id_rsa.pub</code> 路径下,打开<code>id_rsa.pub</code>,将内容复制到剪切板</p>\n<h4 id=\"将本电脑的-SSH-公钥配置到-GitHub-上\"><a href=\"#将本电脑的-SSH-公钥配置到-GitHub-上\" class=\"headerlink\" title=\"将本电脑的 SSH 公钥配置到 GitHub 上\"></a>将本电脑的 SSH 公钥配置到 GitHub 上</h4><p>登录<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>, 点击Settings –&gt; SSH and GPG keys –&gt; New SSH key,将SSH key添加到GitHub账号中</p>\n<h4 id=\"配置-config-yml-在Hexo生成的根目录下\"><a href=\"#配置-config-yml-在Hexo生成的根目录下\" class=\"headerlink\" title=\"配置_config.yml(在Hexo生成的根目录下)\"></a>配置_config.yml(在Hexo生成的根目录下)</h4><p>打开_config.yml,找到deployment模块,将改模块替换为如下格式(<strong>格式要一模一样,包括空格和换行之后的位置</strong>):<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/用户名/用户名.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p><code>_config.yml</code>其他配置参考官方文档 <a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">配置_config.yml</a></p>\n<h3 id=\"将博客推至远端\"><a href=\"#将博客推至远端\" class=\"headerlink\" title=\"将博客推至远端\"></a>将博客推至远端</h3><h4 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d, –deploy</td>\n<td>文件生成后立即部署网站</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-g, –generate</td>\n<td>部署之前预先生成静态文件</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"其他指令\"><a href=\"#其他指令\" class=\"headerlink\" title=\"其他指令\"></a>其他指令</h4><p>参见 <a href=\"https://hexo.io/zh-cn/docs/commands\" target=\"_blank\" rel=\"noopener\">Hexo指令</a></p>\n<h3 id=\"打开博客页面\"><a href=\"#打开博客页面\" class=\"headerlink\" title=\"打开博客页面\"></a>打开博客页面</h3><p>浏览器输入:<a href=\"https://用户名.github.io\" target=\"_blank\" rel=\"noopener\">https://用户名.github.io</a>,打开博客页面,博客创建成功!</p>\n<p>由于Hexo使用MarkDown解析,附上链接<a href=\"http://wow.kuapp.com/markdown/\" target=\"_blank\" rel=\"noopener\">MarkDown语法说明</a></p>\n<h3 id=\"同时部署到Coding\"><a href=\"#同时部署到Coding\" class=\"headerlink\" title=\"同时部署到Coding\"></a>同时部署到Coding</h3><p>由于GitHub服务器在国外,国内访问速度可能会很慢,所以可以将hexo同时部署到Coding上</p>\n<h4 id=\"注册-Coding-帐号\"><a href=\"#注册-Coding-帐号\" class=\"headerlink\" title=\"注册 Coding 帐号\"></a>注册 Coding 帐号</h4><p>注册网址：<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding官网</a></p>\n<h4 id=\"将本电脑的-SSH-公钥配置到-Coding-上\"><a href=\"#将本电脑的-SSH-公钥配置到-Coding-上\" class=\"headerlink\" title=\"将本电脑的 SSH 公钥配置到 Coding 上\"></a>将本电脑的 SSH 公钥配置到 Coding 上</h4><p>方法类似上方</p>\n<blockquote>\n<p>将本电脑的 SSH 公钥配置到 GitHub 上</p>\n</blockquote>\n<h4 id=\"测试-SSH-公钥是否添加成功\"><a href=\"#测试-SSH-公钥是否添加成功\" class=\"headerlink\" title=\"测试 SSH 公钥是否添加成功\"></a>测试 SSH 公钥是否添加成功</h4><p>本地打开 Git Bash 窗口，输入一下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@coding.net</span><br></pre></td></tr></table></figure></p>\n<p>这时候会显示是否继续，选择 yes 继续，如果提示下列内容成功，即 SSH 公钥配置成功：</p>\n<p><code>Hello username You&#39;ve connected to Coding.net by SSH successfully!</code></p>\n<p>如果显示如下错误：</p>\n<p><code>ssh: connect to host coding.net port 22: Connection refused</code></p>\n<p>说明防火墙完全屏蔽了端口 22 ，这时候不要慌张，直接输入如下命令使用 Coding 提供的 443 端口 SSH 服务即可解决：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T -p 443 git@git-ssh.coding.net</span><br></pre></td></tr></table></figure>\n<p>然后在输入验证命令，显示 Coding 帐号与相关信息，即 SSH 公钥配置成功。</p>\n<h4 id=\"新建Coding项目\"><a href=\"#新建Coding项目\" class=\"headerlink\" title=\"新建Coding项目\"></a>新建Coding项目</h4><p>比较简单,按提示设置即可<br>特别注意一点:<strong>为了方便访问,Coding的用户名一定要修改(除非使用默认用户名创建项目!!!),默认用户名是网站生成的乱码,如果不修改,则项目地址会根据默认用户名生成,导致部署成功后博客首页展示乱码而且无法跳转.</strong></p>\n<p>新建项目完毕后，打开项目的 Pages 服务选项，选择部署来源为 master 分支.</p>\n<h4 id=\"配置博客主文件，同时部署-Hexo-博客到-GitHub-和-Coding-上\"><a href=\"#配置博客主文件，同时部署-Hexo-博客到-GitHub-和-Coding-上\" class=\"headerlink\" title=\"配置博客主文件，同时部署 Hexo 博客到 GitHub 和 Coding 上\"></a>配置博客主文件，同时部署 Hexo 博客到 GitHub 和 Coding 上</h4><p>1.打开_config.yml,找到deploy属性,修改如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: </span><br><span class=\"line\">    github: https://github.com/username/username.github.io.git</span><br><span class=\"line\">    coding: https://git.dev.tencent.com/username/username.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p>2.打开 Hexo 主目录下的 source 文件，新建文件 Staticfile ，这个文件是 Coding 静态文件部署的标志，注意文件名字必须为 Staticfile(只要生成空文件即可)，否则 Coding 上无法完成静态文件的部署</p>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>键入如下命令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p>\n<p>部署成功，到浏览器地址栏分别输入 GitHub 地址 和 Coding 地址，访问成功：</p>\n<p><a href=\"https://username.github.io/\" target=\"_blank\" rel=\"noopener\">https://username.github.io/</a></p>\n<p><a href=\"https://username.coding.me/\" target=\"_blank\" rel=\"noopener\">https://username.coding.me/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"https://www.runoob.com/markdown/md-tutorial.html\" target=\"_blank\" rel=\"noopener\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h4><ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a> (Should be at least nodejs 6.9)</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a></li>\n</ul>\n<p>如果你的电脑中已经安装上述必备程序,接下来只需要使用 npm 即可完成 Hexo 的安装。</p>\n<p><code>$ npm install -g hexo-cli</code></p>\n<p>如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>\n<blockquote>\n<p>Mac 用户<br>您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p>\n</blockquote>\n<h4 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h4><ul>\n<li>Windows：下载并安装 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git</a>.</li>\n<li>Mac：使用 <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>, <a href=\"https://www.macports.org/\" target=\"_blank\" rel=\"noopener\">MacPorts</a> ：<code>brew install git</code>;或下载 <a href=\"https://sourceforge.net/projects/git-osx-installer/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 安装。</li>\n<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li>\n<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li>\n</ul>\n<h4 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h4><p>安装 Node.js 的最佳方式是使用 <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a>。</p>\n<p>cURL:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>Wget:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install stable</span><br></pre></td></tr></table></figure>\n<p>或者也可以下载 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 来安装。</p>\n<h4 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h3><p>安装 Hexo 完成后，执行下列命令建站，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<h4 id=\"本地预览\"><a href=\"#本地预览\" class=\"headerlink\" title=\"本地预览\"></a>本地预览</h4><p>此时已经可以本地预览Blog页面了,执行下列命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server <span class=\"comment\"># 开启本地服务器</span></span><br></pre></td></tr></table></figure>\n<p>终端会输出本地url,默认是<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>,打开可预览本地Blog页面</p>\n<h3 id=\"与GitHub建立关联\"><a href=\"#与GitHub建立关联\" class=\"headerlink\" title=\"与GitHub建立关联\"></a>与GitHub建立关联</h3><h4 id=\"新建GitHub仓库-如果已经创建-请跳到下一步\"><a href=\"#新建GitHub仓库-如果已经创建-请跳到下一步\" class=\"headerlink\" title=\"新建GitHub仓库(如果已经创建,请跳到下一步)\"></a>新建GitHub仓库(如果已经创建,请跳到下一步)</h4><p>新建一个GitHub仓库,名称为: <code>用户名.github.io.git # 将用户名替换为你自己的github用户名</code></p>\n<h4 id=\"生成-ssh-key-如果已经生成-请跳到下一步\"><a href=\"#生成-ssh-key-如果已经生成-请跳到下一步\" class=\"headerlink\" title=\"生成 ssh key(如果已经生成,请跳到下一步)\"></a>生成 ssh key(如果已经生成,请跳到下一步)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"your_email@example.com\"</span> <span class=\"comment\"># 注意将`your_email`替换成之前注册github帐号时的邮箱</span></span><br></pre></td></tr></table></figure>\n<p>然后进入 <code>~/.ssh/id_rsa.pub</code> 路径下,打开<code>id_rsa.pub</code>,将内容复制到剪切板</p>\n<h4 id=\"将本电脑的-SSH-公钥配置到-GitHub-上\"><a href=\"#将本电脑的-SSH-公钥配置到-GitHub-上\" class=\"headerlink\" title=\"将本电脑的 SSH 公钥配置到 GitHub 上\"></a>将本电脑的 SSH 公钥配置到 GitHub 上</h4><p>登录<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>, 点击Settings –&gt; SSH and GPG keys –&gt; New SSH key,将SSH key添加到GitHub账号中</p>\n<h4 id=\"配置-config-yml-在Hexo生成的根目录下\"><a href=\"#配置-config-yml-在Hexo生成的根目录下\" class=\"headerlink\" title=\"配置_config.yml(在Hexo生成的根目录下)\"></a>配置_config.yml(在Hexo生成的根目录下)</h4><p>打开_config.yml,找到deployment模块,将改模块替换为如下格式(<strong>格式要一模一样,包括空格和换行之后的位置</strong>):<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/用户名/用户名.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p><code>_config.yml</code>其他配置参考官方文档 <a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">配置_config.yml</a></p>\n<h3 id=\"将博客推至远端\"><a href=\"#将博客推至远端\" class=\"headerlink\" title=\"将博客推至远端\"></a>将博客推至远端</h3><h4 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d, –deploy</td>\n<td>文件生成后立即部署网站</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-g, –generate</td>\n<td>部署之前预先生成静态文件</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"其他指令\"><a href=\"#其他指令\" class=\"headerlink\" title=\"其他指令\"></a>其他指令</h4><p>参见 <a href=\"https://hexo.io/zh-cn/docs/commands\" target=\"_blank\" rel=\"noopener\">Hexo指令</a></p>\n<h3 id=\"打开博客页面\"><a href=\"#打开博客页面\" class=\"headerlink\" title=\"打开博客页面\"></a>打开博客页面</h3><p>浏览器输入:<a href=\"https://用户名.github.io\" target=\"_blank\" rel=\"noopener\">https://用户名.github.io</a>,打开博客页面,博客创建成功!</p>\n<p>由于Hexo使用MarkDown解析,附上链接<a href=\"http://wow.kuapp.com/markdown/\" target=\"_blank\" rel=\"noopener\">MarkDown语法说明</a></p>\n<h3 id=\"同时部署到Coding\"><a href=\"#同时部署到Coding\" class=\"headerlink\" title=\"同时部署到Coding\"></a>同时部署到Coding</h3><p>由于GitHub服务器在国外,国内访问速度可能会很慢,所以可以将hexo同时部署到Coding上</p>\n<h4 id=\"注册-Coding-帐号\"><a href=\"#注册-Coding-帐号\" class=\"headerlink\" title=\"注册 Coding 帐号\"></a>注册 Coding 帐号</h4><p>注册网址：<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding官网</a></p>\n<h4 id=\"将本电脑的-SSH-公钥配置到-Coding-上\"><a href=\"#将本电脑的-SSH-公钥配置到-Coding-上\" class=\"headerlink\" title=\"将本电脑的 SSH 公钥配置到 Coding 上\"></a>将本电脑的 SSH 公钥配置到 Coding 上</h4><p>方法类似上方</p>\n<blockquote>\n<p>将本电脑的 SSH 公钥配置到 GitHub 上</p>\n</blockquote>\n<h4 id=\"测试-SSH-公钥是否添加成功\"><a href=\"#测试-SSH-公钥是否添加成功\" class=\"headerlink\" title=\"测试 SSH 公钥是否添加成功\"></a>测试 SSH 公钥是否添加成功</h4><p>本地打开 Git Bash 窗口，输入一下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@coding.net</span><br></pre></td></tr></table></figure></p>\n<p>这时候会显示是否继续，选择 yes 继续，如果提示下列内容成功，即 SSH 公钥配置成功：</p>\n<p><code>Hello username You&#39;ve connected to Coding.net by SSH successfully!</code></p>\n<p>如果显示如下错误：</p>\n<p><code>ssh: connect to host coding.net port 22: Connection refused</code></p>\n<p>说明防火墙完全屏蔽了端口 22 ，这时候不要慌张，直接输入如下命令使用 Coding 提供的 443 端口 SSH 服务即可解决：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T -p 443 git@git-ssh.coding.net</span><br></pre></td></tr></table></figure>\n<p>然后在输入验证命令，显示 Coding 帐号与相关信息，即 SSH 公钥配置成功。</p>\n<h4 id=\"新建Coding项目\"><a href=\"#新建Coding项目\" class=\"headerlink\" title=\"新建Coding项目\"></a>新建Coding项目</h4><p>比较简单,按提示设置即可<br>特别注意一点:<strong>为了方便访问,Coding的用户名一定要修改(除非使用默认用户名创建项目!!!),默认用户名是网站生成的乱码,如果不修改,则项目地址会根据默认用户名生成,导致部署成功后博客首页展示乱码而且无法跳转.</strong></p>\n<p>新建项目完毕后，打开项目的 Pages 服务选项，选择部署来源为 master 分支.</p>\n<h4 id=\"配置博客主文件，同时部署-Hexo-博客到-GitHub-和-Coding-上\"><a href=\"#配置博客主文件，同时部署-Hexo-博客到-GitHub-和-Coding-上\" class=\"headerlink\" title=\"配置博客主文件，同时部署 Hexo 博客到 GitHub 和 Coding 上\"></a>配置博客主文件，同时部署 Hexo 博客到 GitHub 和 Coding 上</h4><p>1.打开_config.yml,找到deploy属性,修改如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: </span><br><span class=\"line\">    github: https://github.com/username/username.github.io.git</span><br><span class=\"line\">    coding: https://git.dev.tencent.com/username/username.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p>2.打开 Hexo 主目录下的 source 文件，新建文件 Staticfile ，这个文件是 Coding 静态文件部署的标志，注意文件名字必须为 Staticfile(只要生成空文件即可)，否则 Coding 上无法完成静态文件的部署</p>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>键入如下命令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p>\n<p>部署成功，到浏览器地址栏分别输入 GitHub 地址 和 Coding 地址，访问成功：</p>\n<p><a href=\"https://username.github.io/\" target=\"_blank\" rel=\"noopener\">https://username.github.io/</a></p>\n<p><a href=\"https://username.coding.me/\" target=\"_blank\" rel=\"noopener\">https://username.coding.me/</a></p>\n"},{"title":"图像显示原理","date":"2021-12-29T12:37:03.000Z","_content":"\n### 屏幕显示图像的原理\n\n{% asset_img A2A666D8-C4D3-4702-86D9-00B76CEBC609.png This is an image %}\n\n首先从过去的 CRT 显示器原理说起。CRT 的电子枪按照上面方式，从上到下一行行扫描，扫描完成后显示器就呈现一帧画面，随后电子枪回到初始位置继续下一次扫描。为了把显示器的显示过程和系统的视频控制器进行同步，显示器（或者其他硬件）会用硬件时钟产生一系列的定时信号。当电子枪换到新的一行，准备进行扫描时，显示器会发出一个水平同步信号（horizonal synchronization），简称 HSync；而当一帧画面绘制完成后，电子枪回复到原位，准备画下一帧前，显示器会发出一个垂直同步信号（vertical synchronization），简称 VSync。显示器通常以固定频率进行刷新，这个刷新率就是 VSync 信号产生的频率。尽管现在的设备大都是液晶显示屏了，但原理仍然没有变。\n\n### 屏幕图形显示结构\n\n{% asset_img 7BA90FE9-B975-4D25-A870-2EB996926B64.png This is an image %}\n\nCPU将图形数据通过总线BUS提交至GPU，GPU经过渲染处理转化为一帧帧的数据并提交至帧缓冲区，视频控制器会通过垂直同步信号VSync逐帧读取帧缓冲区的数据并提交至屏幕控制器最终显示在屏幕上。\n\n### 双缓冲机制\n\n{% asset_img 27A5F497-17F3-4D00-9594-AEDA0C6B2DDE.png This is an image %}\n\n为解决一个帧缓冲区效率问题(读取和写入都是一个无法有效的并发处理)，采用双缓冲机制，在这种情况下，GPU 会预先渲染一帧放入一个缓冲区中，用于视频控制器的读取。当下一帧渲染完毕后，GPU 会直接把视频控制器的指针指向第二个缓冲器，如图所示\n \n### 画面撕裂\n\n{% asset_img A9D9461A-2433-47F3-955B-AB4BA82245F2.png This is an image %}\n\n双缓冲机制虽然提升了效率但也引入了画面撕裂问题，即当视频控制器还未读取完成时，即屏幕内容刚显示一半时，GPU 将新的一帧内容提交到帧缓冲区并把两个缓冲区进行交换后，视频控制器就会把新的一帧数据的下半段显示到屏幕上，造成画面撕裂现象，如图所示.\n\n为了解决这个问题，GPU 通常有一个机制叫做垂直同步（简写也是 V-Sync），当开启垂直同步后，GPU 会等待显示器的 VSync 信号发出后，才进行新的一帧渲染和缓冲区更新。这样能解决画面撕裂现象，也增加了画面流畅度，但需要消费更多的计算资源，也会带来部分延迟。\n\n### 图形渲染技术栈\n\n{% asset_img A0F25D10-87FC-40C9-8E1C-9CE2038B1B88.png This is an image %}\n\n- UIKit: UIKit 自身并不具备在屏幕成像的能力，其主要负责对用户操作事件的响应（UIView 继承自 UIResponder），事件响应的传递大体是经过逐层的 视图树 遍历实现的。\n\n- Core Animation: Core Animation 是一个复合引擎，其职责是 尽可能快地组合屏幕上不同的可视内容，这些可视内容可被分解成独立的图层（即 CALayer），这些图层会被存储在一个叫做图层树的体系之中。从本质上而言，CALayer 是用户所能在屏幕上看见的一切的基础。\n\n- Core Graphics: Core Graphics 基于 Quartz 高级绘图引擎，主要用于运行时绘制图像。开发者可以使用此框架来处理基于路径的绘图，转换，颜色管理，离屏渲染，图案，渐变和阴影，图像数据管理，图像创建和图像遮罩以及 PDF 文档创建，显示和分析。\n\n- Core Image: Core Image 与 Core Graphics 恰恰相反，Core Graphics 用于在运行时创建图像，而 Core Image 是用来处理运行前创建的图像 的。Core Image 框架拥有一系列现成的图像过滤器，能对已存在的图像进行高效的处理。\n\n- OpenGL(ES): OpenGL ES（OpenGL for Embedded Systems，简称 GLES），是 OpenGL 的子集。\n\n- Metal: Metal 类似于 OpenGL ES，也是一套第三方标准，具体实现由苹果实现。大多数开发者都没有直接使用过 Metal，但其实所有开发者都在间接地使用 Metal。Core Animation、Core Image、SceneKit、SpriteKit 等等渲染框架都是构建于 Metal 之上的。当在真机上调试 OpenGL 程序时，控制台会打印出启用 Metal 的日志。根据这一点可以猜测，Apple 已经实现了一套机制将 OpenGL 命令无缝桥接到 Metal 上，由 Metal 担任真正于硬件交互的工作。","source":"_posts/iOS/UI/图像显示原理.md","raw":"---\ntitle: 图像显示原理\ndate: 2021-12-29 20:37:03\ntags:\ncategories: UI\n---\n\n### 屏幕显示图像的原理\n\n{% asset_img A2A666D8-C4D3-4702-86D9-00B76CEBC609.png This is an image %}\n\n首先从过去的 CRT 显示器原理说起。CRT 的电子枪按照上面方式，从上到下一行行扫描，扫描完成后显示器就呈现一帧画面，随后电子枪回到初始位置继续下一次扫描。为了把显示器的显示过程和系统的视频控制器进行同步，显示器（或者其他硬件）会用硬件时钟产生一系列的定时信号。当电子枪换到新的一行，准备进行扫描时，显示器会发出一个水平同步信号（horizonal synchronization），简称 HSync；而当一帧画面绘制完成后，电子枪回复到原位，准备画下一帧前，显示器会发出一个垂直同步信号（vertical synchronization），简称 VSync。显示器通常以固定频率进行刷新，这个刷新率就是 VSync 信号产生的频率。尽管现在的设备大都是液晶显示屏了，但原理仍然没有变。\n\n### 屏幕图形显示结构\n\n{% asset_img 7BA90FE9-B975-4D25-A870-2EB996926B64.png This is an image %}\n\nCPU将图形数据通过总线BUS提交至GPU，GPU经过渲染处理转化为一帧帧的数据并提交至帧缓冲区，视频控制器会通过垂直同步信号VSync逐帧读取帧缓冲区的数据并提交至屏幕控制器最终显示在屏幕上。\n\n### 双缓冲机制\n\n{% asset_img 27A5F497-17F3-4D00-9594-AEDA0C6B2DDE.png This is an image %}\n\n为解决一个帧缓冲区效率问题(读取和写入都是一个无法有效的并发处理)，采用双缓冲机制，在这种情况下，GPU 会预先渲染一帧放入一个缓冲区中，用于视频控制器的读取。当下一帧渲染完毕后，GPU 会直接把视频控制器的指针指向第二个缓冲器，如图所示\n \n### 画面撕裂\n\n{% asset_img A9D9461A-2433-47F3-955B-AB4BA82245F2.png This is an image %}\n\n双缓冲机制虽然提升了效率但也引入了画面撕裂问题，即当视频控制器还未读取完成时，即屏幕内容刚显示一半时，GPU 将新的一帧内容提交到帧缓冲区并把两个缓冲区进行交换后，视频控制器就会把新的一帧数据的下半段显示到屏幕上，造成画面撕裂现象，如图所示.\n\n为了解决这个问题，GPU 通常有一个机制叫做垂直同步（简写也是 V-Sync），当开启垂直同步后，GPU 会等待显示器的 VSync 信号发出后，才进行新的一帧渲染和缓冲区更新。这样能解决画面撕裂现象，也增加了画面流畅度，但需要消费更多的计算资源，也会带来部分延迟。\n\n### 图形渲染技术栈\n\n{% asset_img A0F25D10-87FC-40C9-8E1C-9CE2038B1B88.png This is an image %}\n\n- UIKit: UIKit 自身并不具备在屏幕成像的能力，其主要负责对用户操作事件的响应（UIView 继承自 UIResponder），事件响应的传递大体是经过逐层的 视图树 遍历实现的。\n\n- Core Animation: Core Animation 是一个复合引擎，其职责是 尽可能快地组合屏幕上不同的可视内容，这些可视内容可被分解成独立的图层（即 CALayer），这些图层会被存储在一个叫做图层树的体系之中。从本质上而言，CALayer 是用户所能在屏幕上看见的一切的基础。\n\n- Core Graphics: Core Graphics 基于 Quartz 高级绘图引擎，主要用于运行时绘制图像。开发者可以使用此框架来处理基于路径的绘图，转换，颜色管理，离屏渲染，图案，渐变和阴影，图像数据管理，图像创建和图像遮罩以及 PDF 文档创建，显示和分析。\n\n- Core Image: Core Image 与 Core Graphics 恰恰相反，Core Graphics 用于在运行时创建图像，而 Core Image 是用来处理运行前创建的图像 的。Core Image 框架拥有一系列现成的图像过滤器，能对已存在的图像进行高效的处理。\n\n- OpenGL(ES): OpenGL ES（OpenGL for Embedded Systems，简称 GLES），是 OpenGL 的子集。\n\n- Metal: Metal 类似于 OpenGL ES，也是一套第三方标准，具体实现由苹果实现。大多数开发者都没有直接使用过 Metal，但其实所有开发者都在间接地使用 Metal。Core Animation、Core Image、SceneKit、SpriteKit 等等渲染框架都是构建于 Metal 之上的。当在真机上调试 OpenGL 程序时，控制台会打印出启用 Metal 的日志。根据这一点可以猜测，Apple 已经实现了一套机制将 OpenGL 命令无缝桥接到 Metal 上，由 Metal 担任真正于硬件交互的工作。","slug":"iOS/UI/图像显示原理","published":1,"updated":"2021-12-30T02:54:20.457Z","_id":"ckxsdhbnm000r54zx1okoro7a","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"屏幕显示图像的原理\"><a href=\"#屏幕显示图像的原理\" class=\"headerlink\" title=\"屏幕显示图像的原理\"></a>屏幕显示图像的原理</h3><img src=\"/2021/12/29/iOS/UI/图像显示原理/A2A666D8-C4D3-4702-86D9-00B76CEBC609.png\" title=\"This is an image\">\n<p>首先从过去的 CRT 显示器原理说起。CRT 的电子枪按照上面方式，从上到下一行行扫描，扫描完成后显示器就呈现一帧画面，随后电子枪回到初始位置继续下一次扫描。为了把显示器的显示过程和系统的视频控制器进行同步，显示器（或者其他硬件）会用硬件时钟产生一系列的定时信号。当电子枪换到新的一行，准备进行扫描时，显示器会发出一个水平同步信号（horizonal synchronization），简称 HSync；而当一帧画面绘制完成后，电子枪回复到原位，准备画下一帧前，显示器会发出一个垂直同步信号（vertical synchronization），简称 VSync。显示器通常以固定频率进行刷新，这个刷新率就是 VSync 信号产生的频率。尽管现在的设备大都是液晶显示屏了，但原理仍然没有变。</p>\n<h3 id=\"屏幕图形显示结构\"><a href=\"#屏幕图形显示结构\" class=\"headerlink\" title=\"屏幕图形显示结构\"></a>屏幕图形显示结构</h3><img src=\"/2021/12/29/iOS/UI/图像显示原理/7BA90FE9-B975-4D25-A870-2EB996926B64.png\" title=\"This is an image\">\n<p>CPU将图形数据通过总线BUS提交至GPU，GPU经过渲染处理转化为一帧帧的数据并提交至帧缓冲区，视频控制器会通过垂直同步信号VSync逐帧读取帧缓冲区的数据并提交至屏幕控制器最终显示在屏幕上。</p>\n<h3 id=\"双缓冲机制\"><a href=\"#双缓冲机制\" class=\"headerlink\" title=\"双缓冲机制\"></a>双缓冲机制</h3><img src=\"/2021/12/29/iOS/UI/图像显示原理/27A5F497-17F3-4D00-9594-AEDA0C6B2DDE.png\" title=\"This is an image\">\n<p>为解决一个帧缓冲区效率问题(读取和写入都是一个无法有效的并发处理)，采用双缓冲机制，在这种情况下，GPU 会预先渲染一帧放入一个缓冲区中，用于视频控制器的读取。当下一帧渲染完毕后，GPU 会直接把视频控制器的指针指向第二个缓冲器，如图所示</p>\n<h3 id=\"画面撕裂\"><a href=\"#画面撕裂\" class=\"headerlink\" title=\"画面撕裂\"></a>画面撕裂</h3><img src=\"/2021/12/29/iOS/UI/图像显示原理/A9D9461A-2433-47F3-955B-AB4BA82245F2.png\" title=\"This is an image\">\n<p>双缓冲机制虽然提升了效率但也引入了画面撕裂问题，即当视频控制器还未读取完成时，即屏幕内容刚显示一半时，GPU 将新的一帧内容提交到帧缓冲区并把两个缓冲区进行交换后，视频控制器就会把新的一帧数据的下半段显示到屏幕上，造成画面撕裂现象，如图所示.</p>\n<p>为了解决这个问题，GPU 通常有一个机制叫做垂直同步（简写也是 V-Sync），当开启垂直同步后，GPU 会等待显示器的 VSync 信号发出后，才进行新的一帧渲染和缓冲区更新。这样能解决画面撕裂现象，也增加了画面流畅度，但需要消费更多的计算资源，也会带来部分延迟。</p>\n<h3 id=\"图形渲染技术栈\"><a href=\"#图形渲染技术栈\" class=\"headerlink\" title=\"图形渲染技术栈\"></a>图形渲染技术栈</h3><img src=\"/2021/12/29/iOS/UI/图像显示原理/A0F25D10-87FC-40C9-8E1C-9CE2038B1B88.png\" title=\"This is an image\">\n<ul>\n<li><p>UIKit: UIKit 自身并不具备在屏幕成像的能力，其主要负责对用户操作事件的响应（UIView 继承自 UIResponder），事件响应的传递大体是经过逐层的 视图树 遍历实现的。</p>\n</li>\n<li><p>Core Animation: Core Animation 是一个复合引擎，其职责是 尽可能快地组合屏幕上不同的可视内容，这些可视内容可被分解成独立的图层（即 CALayer），这些图层会被存储在一个叫做图层树的体系之中。从本质上而言，CALayer 是用户所能在屏幕上看见的一切的基础。</p>\n</li>\n<li><p>Core Graphics: Core Graphics 基于 Quartz 高级绘图引擎，主要用于运行时绘制图像。开发者可以使用此框架来处理基于路径的绘图，转换，颜色管理，离屏渲染，图案，渐变和阴影，图像数据管理，图像创建和图像遮罩以及 PDF 文档创建，显示和分析。</p>\n</li>\n<li><p>Core Image: Core Image 与 Core Graphics 恰恰相反，Core Graphics 用于在运行时创建图像，而 Core Image 是用来处理运行前创建的图像 的。Core Image 框架拥有一系列现成的图像过滤器，能对已存在的图像进行高效的处理。</p>\n</li>\n<li><p>OpenGL(ES): OpenGL ES（OpenGL for Embedded Systems，简称 GLES），是 OpenGL 的子集。</p>\n</li>\n<li><p>Metal: Metal 类似于 OpenGL ES，也是一套第三方标准，具体实现由苹果实现。大多数开发者都没有直接使用过 Metal，但其实所有开发者都在间接地使用 Metal。Core Animation、Core Image、SceneKit、SpriteKit 等等渲染框架都是构建于 Metal 之上的。当在真机上调试 OpenGL 程序时，控制台会打印出启用 Metal 的日志。根据这一点可以猜测，Apple 已经实现了一套机制将 OpenGL 命令无缝桥接到 Metal 上，由 Metal 担任真正于硬件交互的工作。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"屏幕显示图像的原理\"><a href=\"#屏幕显示图像的原理\" class=\"headerlink\" title=\"屏幕显示图像的原理\"></a>屏幕显示图像的原理</h3><img src=\"/2021/12/29/iOS/UI/图像显示原理/A2A666D8-C4D3-4702-86D9-00B76CEBC609.png\" title=\"This is an image\">\n<p>首先从过去的 CRT 显示器原理说起。CRT 的电子枪按照上面方式，从上到下一行行扫描，扫描完成后显示器就呈现一帧画面，随后电子枪回到初始位置继续下一次扫描。为了把显示器的显示过程和系统的视频控制器进行同步，显示器（或者其他硬件）会用硬件时钟产生一系列的定时信号。当电子枪换到新的一行，准备进行扫描时，显示器会发出一个水平同步信号（horizonal synchronization），简称 HSync；而当一帧画面绘制完成后，电子枪回复到原位，准备画下一帧前，显示器会发出一个垂直同步信号（vertical synchronization），简称 VSync。显示器通常以固定频率进行刷新，这个刷新率就是 VSync 信号产生的频率。尽管现在的设备大都是液晶显示屏了，但原理仍然没有变。</p>\n<h3 id=\"屏幕图形显示结构\"><a href=\"#屏幕图形显示结构\" class=\"headerlink\" title=\"屏幕图形显示结构\"></a>屏幕图形显示结构</h3><img src=\"/2021/12/29/iOS/UI/图像显示原理/7BA90FE9-B975-4D25-A870-2EB996926B64.png\" title=\"This is an image\">\n<p>CPU将图形数据通过总线BUS提交至GPU，GPU经过渲染处理转化为一帧帧的数据并提交至帧缓冲区，视频控制器会通过垂直同步信号VSync逐帧读取帧缓冲区的数据并提交至屏幕控制器最终显示在屏幕上。</p>\n<h3 id=\"双缓冲机制\"><a href=\"#双缓冲机制\" class=\"headerlink\" title=\"双缓冲机制\"></a>双缓冲机制</h3><img src=\"/2021/12/29/iOS/UI/图像显示原理/27A5F497-17F3-4D00-9594-AEDA0C6B2DDE.png\" title=\"This is an image\">\n<p>为解决一个帧缓冲区效率问题(读取和写入都是一个无法有效的并发处理)，采用双缓冲机制，在这种情况下，GPU 会预先渲染一帧放入一个缓冲区中，用于视频控制器的读取。当下一帧渲染完毕后，GPU 会直接把视频控制器的指针指向第二个缓冲器，如图所示</p>\n<h3 id=\"画面撕裂\"><a href=\"#画面撕裂\" class=\"headerlink\" title=\"画面撕裂\"></a>画面撕裂</h3><img src=\"/2021/12/29/iOS/UI/图像显示原理/A9D9461A-2433-47F3-955B-AB4BA82245F2.png\" title=\"This is an image\">\n<p>双缓冲机制虽然提升了效率但也引入了画面撕裂问题，即当视频控制器还未读取完成时，即屏幕内容刚显示一半时，GPU 将新的一帧内容提交到帧缓冲区并把两个缓冲区进行交换后，视频控制器就会把新的一帧数据的下半段显示到屏幕上，造成画面撕裂现象，如图所示.</p>\n<p>为了解决这个问题，GPU 通常有一个机制叫做垂直同步（简写也是 V-Sync），当开启垂直同步后，GPU 会等待显示器的 VSync 信号发出后，才进行新的一帧渲染和缓冲区更新。这样能解决画面撕裂现象，也增加了画面流畅度，但需要消费更多的计算资源，也会带来部分延迟。</p>\n<h3 id=\"图形渲染技术栈\"><a href=\"#图形渲染技术栈\" class=\"headerlink\" title=\"图形渲染技术栈\"></a>图形渲染技术栈</h3><img src=\"/2021/12/29/iOS/UI/图像显示原理/A0F25D10-87FC-40C9-8E1C-9CE2038B1B88.png\" title=\"This is an image\">\n<ul>\n<li><p>UIKit: UIKit 自身并不具备在屏幕成像的能力，其主要负责对用户操作事件的响应（UIView 继承自 UIResponder），事件响应的传递大体是经过逐层的 视图树 遍历实现的。</p>\n</li>\n<li><p>Core Animation: Core Animation 是一个复合引擎，其职责是 尽可能快地组合屏幕上不同的可视内容，这些可视内容可被分解成独立的图层（即 CALayer），这些图层会被存储在一个叫做图层树的体系之中。从本质上而言，CALayer 是用户所能在屏幕上看见的一切的基础。</p>\n</li>\n<li><p>Core Graphics: Core Graphics 基于 Quartz 高级绘图引擎，主要用于运行时绘制图像。开发者可以使用此框架来处理基于路径的绘图，转换，颜色管理，离屏渲染，图案，渐变和阴影，图像数据管理，图像创建和图像遮罩以及 PDF 文档创建，显示和分析。</p>\n</li>\n<li><p>Core Image: Core Image 与 Core Graphics 恰恰相反，Core Graphics 用于在运行时创建图像，而 Core Image 是用来处理运行前创建的图像 的。Core Image 框架拥有一系列现成的图像过滤器，能对已存在的图像进行高效的处理。</p>\n</li>\n<li><p>OpenGL(ES): OpenGL ES（OpenGL for Embedded Systems，简称 GLES），是 OpenGL 的子集。</p>\n</li>\n<li><p>Metal: Metal 类似于 OpenGL ES，也是一套第三方标准，具体实现由苹果实现。大多数开发者都没有直接使用过 Metal，但其实所有开发者都在间接地使用 Metal。Core Animation、Core Image、SceneKit、SpriteKit 等等渲染框架都是构建于 Metal 之上的。当在真机上调试 OpenGL 程序时，控制台会打印出启用 Metal 的日志。根据这一点可以猜测，Apple 已经实现了一套机制将 OpenGL 命令无缝桥接到 Metal 上，由 Metal 担任真正于硬件交互的工作。</p>\n</li>\n</ul>\n"},{"title":"事件传递&响应者链","date":"2021-12-29T11:06:55.000Z","_content":"\n### 事件传递过程\n\n{% asset_img C708B73F-4B04-44E8-B655-F3EF81A9749C.png This is an image %}\n\n触摸事件发生后, UIApplication 会触发 func sendEvent(_ event: UIEvent) 将封装好的 UIEvent 传给 UIWindow(当前展示的UIWindow), 通常接下来传给 UIViewController 然后传给 UIViewController 的根视图, 然后👇🏻\n\n#### 命中测试(hitTest)\n\n{% asset_img 2031C1E0-CD22-4887-974F-816D5575DF78.png This is an image %}\n\n① 检查自身是否可以接收事件, 以下三种情况无法接收事件:\n\n- view.isUserInteractionEnabled = false\n- view.alpha <= 0.01\n- view.isHidden = true\n\n② 检查坐标是否在自身内部, 使用 func point(inside point: CGPoint, wizzth event: UIEvent?) -> Bool 方法判断, 该方法可以被重写\n\n③ 从后往前遍历子视图重复执行命中测试, 保证后添加的视图先遍历, 即使视图有重叠, 该视图也是同级中展示最完整的, 即用户最可能想点击的视图\n\n#### 确定第一响应者\n\n{% asset_img B0ABE2DF-0087-492F-9A07-7E2BD9CD5B0E.png This is an image %}\n\n整个命中测试的走向是这样的：A✅ --> D❎ --> B✅ --> C❎ >>>> B\n\n实际上这个流程就是 UIView 的一个方法：func hitTest(_ point: CGPoint, with event: UIEvent?) -> UIView?，方法最后返回的 UIView? 即第一响应者\n\n#### 越界!\n\n{% asset_img 31B1BB9C-89E7-4E9E-AE05-EA7690765197.png This is an image %}\n\n如图, 最终获得第一响应者仍然是 B，甚至整个命中测试的走向和之前是一样的：A✅ --> D❎ --> B✅ --> C❎ >>>> B，究其原因是在 D 检查触摸点是否在自身内部时，答案是否，所以不会去对 E 进行命中测试，即使看起来我们点了 E。这个例子告诉我们，要注意可点击的子视图是否会超出父视图的范围。另若有这种情况可以重写 func point(inside point: CGPoint, with event: UIEvent?) -> Bool 方法来扩大点击有效范围。\n\n\n### 响应链传递\n\n#### 确定响应链成员\n\n{% asset_img 15F294D4-4F56-46B9-96A0-1B0436EDEB94.png This is an image %}\n\n在找到了第一响应者之后，整个响应链也随着确定下来了。所谓响应链是由响应者组成的一个链表，链表的头是第一响应者，链表的每个结点的下一个结点都是该结点的 next 属性。\n\n默认来说，若该结点是 UIView 类型的话，这个 next 属性是该结点的父视图。但也有几个例外：\n\n- 如果是 UIViewController 的根视图，则下一个响应者是 UIViewController。\n\n- 如果是 UIViewController\n    - 如果 UIViewController 的视图是 UIWindow 的根视图，则下一个响应者是 UIWindow 对象。\n    - 如果 UIViewController 是由另一个 UIViewController 呈现的，则下一个响应者是第二个 UIViewController。\n\n- UIWindow的下一个响应者是 UIApplication\n\n- UIApplication 的下一个响应者是 app delegate。但仅当该 app delegate 是 UIResponder 的实例且不是 UIView、UIViewController 或 app 对象本身时，才是下一个响应者。\n\n#### 沿响应链传递事件\n\n{% asset_img 290E2C72-06E8-4C29-9323-75DA862B6772.png This is an image %}\n\n触摸事件首先将会由第一响应者响应，触发其 open func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) 等方法，根据触摸的方式不同（如拖动，双指），具体的方法和过程也不一样。若第一响应者在这个方法中不处理这个事件，则会传递给响应链中的下一个响应者触发该方法处理，若下一个也不处理，则以此类推传递下去。若到最后还没有人响应，则会被丢弃（比如一个误触） \n\n#### 阻断响应链传递\n\n{% asset_img 5C23F3FB-57F1-42A3-A295-97359D12123E.png This is an image %}\n\n如果我们把上图中的 C 换成平时使用的 UIControl 类，控制台又会怎么打印呢？\n\n如图所示，会发现响应链的事件传递到 C 处就停止了，也就是 A 的 touches 方法没有被触发。这意味着在响应链中，UIControl 及其子类默认来说，是不会将事件传递下去的。在代码中，可以理解为 UIView 默认会在其 touches 方法中去调用其 next 的 touches 方法，而 UIControl 默认不会去调用。这样就做到了，当某个控件接受了事件之后，事件的传递就会终止。另外，UIScrollView 也是这样的工作机制。\n\n\n### 响应链及手势识别\n\n#### 当手势识别参与响应链\n\n{% asset_img F7D740CA-617A-4BFE-A9D7-D07E0B2D1E7B.png This is an image %}\n\n{% asset_img 58D35CDC-3D1A-4379-9B77-0DE377CD89DF.png This is an image %}\n\n从图中我们可以看到，当不带手势的情况下，手指按下去的时候，响应者的 touchBegan 方法会触发，随着手指的移动，touchMoved 会不断触发，当手指结束移动并抬起来的时候，touchEnded 会触发。在这个过程中，我们接收到一直是一个不断更新的 UITouch。\n\n在该视图有添加一个 UIPanGestureRecognizer 手势的情况下，我们多了下方这一条来表示与响应链同时工作的手势识别系统，可以看到手势识别系统也是在手指按下去那一刻就开始工作的，前半段处于一直正在识别的状态。在我们拖动了很小一段距离之后（注意这时候我们的手指还没抬起）， 手势识别系统确定了该 UITouch 所做的动作是符合 UIPanGestureRecognizer 的特点的，于是给该视图的响应链发送了 touchCancelled 的信息，从而阻止这个 UITouch 继续触发这个视图的 touches 系列方法（同时也取消了别的相关手势的 touches 系列方法，图中未体现）。在这之后，被调用的只有与手势关联的 target-action 方法（也就是图中的墨绿色节点 call PanFunction）。\n\n***再进一步理解***\n为了图片的美观和易读，在图片中隐去了不少细节，在此列出：\n\n- 手势识别器的状态在图中未标出：\n\n\t- 手势在图中 recognizing 的橙色节点处和 recognized 棕色节点处都处于 .possible 状态\n\t- 手势在图中绿色节点处的状态变化是 .began -> [.changed] -> ended\n\n- 手势识别器不是响应者，但也有 touches 系列方法，比它所添加的视图的 touches 方法更早那么一点触发\n\n\t- 从图中也可以看出，手势那条线上的每个节点都稍靠左一些\n\t- 手势那条线上的橙、棕、墨绿色节点处也可以看做手势识别器的 touches 方法触发\n\n- 更详细的触发顺序应当如下图所示（在一个 UIView 上添加了 UIPanGestureRecognizer ，并单指在上面滑动一段距离的情况）\n\n\n(手势和响应者的 touches 方法名字是一样的，都是「began」，「moved」，「ended」，「cancelled」。很容易和手势识别器的 state 属性搞混，state 属性是根据每个手势的类型（离散型/连续型）的不同，可能有 .possible、.began、.changed、.ended、.cancelled、.failed 这些状态，名字很像方法名很像但不是一回事。)\n\n#### UIControl 与手势识别\n\n由于 UIControl 接收 target-action 方法的方式是在其 touches 方法中识别、接收、处理，而手势的 touches 方法一定比其所在视图的 touches 方法早触发。可以得到的结论是：对于自定义的 UIControl 来说，手势识别的优先级比 UIControl 自身处理事件的优先级高。\n\n\n### 总结\n\n总的来说，触摸屏幕后事件的传递可以分为以下几个步骤：\n\n1. 通过「命中测试」来找到「第一响应者」\n\n2. 由「第一响应者」来确定「响应链」\n\n3. 将事件沿「响应链」传递\n\n4. 事件被某个响应者接收，或没有响应者接收从而被丢弃\n\n在步骤 3 中，事件沿「响应链」传递这个过程，就是响应者通过调用其 next 的 touches 系列方法来实现的。在上篇文章中我们也提到，假如我们使用 UIControl 等类作为响应者，这些类本身就不会调用其 next 的 touches 系列方法，从而实现阻断响应链的效果，也可以认为是实现接受某个事件的效果。\n\n手势识别器(UIGestureRecognizer)在大多数情况下，识别屏幕触摸事件的优先级，比控件本身的方法的优先级高。","source":"_posts/iOS/UI/事件传递&响应者链.md","raw":"---\ntitle: 事件传递&响应者链\ndate: 2021-12-29 19:06:55\ntags:\ncategories: UI\n---\n\n### 事件传递过程\n\n{% asset_img C708B73F-4B04-44E8-B655-F3EF81A9749C.png This is an image %}\n\n触摸事件发生后, UIApplication 会触发 func sendEvent(_ event: UIEvent) 将封装好的 UIEvent 传给 UIWindow(当前展示的UIWindow), 通常接下来传给 UIViewController 然后传给 UIViewController 的根视图, 然后👇🏻\n\n#### 命中测试(hitTest)\n\n{% asset_img 2031C1E0-CD22-4887-974F-816D5575DF78.png This is an image %}\n\n① 检查自身是否可以接收事件, 以下三种情况无法接收事件:\n\n- view.isUserInteractionEnabled = false\n- view.alpha <= 0.01\n- view.isHidden = true\n\n② 检查坐标是否在自身内部, 使用 func point(inside point: CGPoint, wizzth event: UIEvent?) -> Bool 方法判断, 该方法可以被重写\n\n③ 从后往前遍历子视图重复执行命中测试, 保证后添加的视图先遍历, 即使视图有重叠, 该视图也是同级中展示最完整的, 即用户最可能想点击的视图\n\n#### 确定第一响应者\n\n{% asset_img B0ABE2DF-0087-492F-9A07-7E2BD9CD5B0E.png This is an image %}\n\n整个命中测试的走向是这样的：A✅ --> D❎ --> B✅ --> C❎ >>>> B\n\n实际上这个流程就是 UIView 的一个方法：func hitTest(_ point: CGPoint, with event: UIEvent?) -> UIView?，方法最后返回的 UIView? 即第一响应者\n\n#### 越界!\n\n{% asset_img 31B1BB9C-89E7-4E9E-AE05-EA7690765197.png This is an image %}\n\n如图, 最终获得第一响应者仍然是 B，甚至整个命中测试的走向和之前是一样的：A✅ --> D❎ --> B✅ --> C❎ >>>> B，究其原因是在 D 检查触摸点是否在自身内部时，答案是否，所以不会去对 E 进行命中测试，即使看起来我们点了 E。这个例子告诉我们，要注意可点击的子视图是否会超出父视图的范围。另若有这种情况可以重写 func point(inside point: CGPoint, with event: UIEvent?) -> Bool 方法来扩大点击有效范围。\n\n\n### 响应链传递\n\n#### 确定响应链成员\n\n{% asset_img 15F294D4-4F56-46B9-96A0-1B0436EDEB94.png This is an image %}\n\n在找到了第一响应者之后，整个响应链也随着确定下来了。所谓响应链是由响应者组成的一个链表，链表的头是第一响应者，链表的每个结点的下一个结点都是该结点的 next 属性。\n\n默认来说，若该结点是 UIView 类型的话，这个 next 属性是该结点的父视图。但也有几个例外：\n\n- 如果是 UIViewController 的根视图，则下一个响应者是 UIViewController。\n\n- 如果是 UIViewController\n    - 如果 UIViewController 的视图是 UIWindow 的根视图，则下一个响应者是 UIWindow 对象。\n    - 如果 UIViewController 是由另一个 UIViewController 呈现的，则下一个响应者是第二个 UIViewController。\n\n- UIWindow的下一个响应者是 UIApplication\n\n- UIApplication 的下一个响应者是 app delegate。但仅当该 app delegate 是 UIResponder 的实例且不是 UIView、UIViewController 或 app 对象本身时，才是下一个响应者。\n\n#### 沿响应链传递事件\n\n{% asset_img 290E2C72-06E8-4C29-9323-75DA862B6772.png This is an image %}\n\n触摸事件首先将会由第一响应者响应，触发其 open func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) 等方法，根据触摸的方式不同（如拖动，双指），具体的方法和过程也不一样。若第一响应者在这个方法中不处理这个事件，则会传递给响应链中的下一个响应者触发该方法处理，若下一个也不处理，则以此类推传递下去。若到最后还没有人响应，则会被丢弃（比如一个误触） \n\n#### 阻断响应链传递\n\n{% asset_img 5C23F3FB-57F1-42A3-A295-97359D12123E.png This is an image %}\n\n如果我们把上图中的 C 换成平时使用的 UIControl 类，控制台又会怎么打印呢？\n\n如图所示，会发现响应链的事件传递到 C 处就停止了，也就是 A 的 touches 方法没有被触发。这意味着在响应链中，UIControl 及其子类默认来说，是不会将事件传递下去的。在代码中，可以理解为 UIView 默认会在其 touches 方法中去调用其 next 的 touches 方法，而 UIControl 默认不会去调用。这样就做到了，当某个控件接受了事件之后，事件的传递就会终止。另外，UIScrollView 也是这样的工作机制。\n\n\n### 响应链及手势识别\n\n#### 当手势识别参与响应链\n\n{% asset_img F7D740CA-617A-4BFE-A9D7-D07E0B2D1E7B.png This is an image %}\n\n{% asset_img 58D35CDC-3D1A-4379-9B77-0DE377CD89DF.png This is an image %}\n\n从图中我们可以看到，当不带手势的情况下，手指按下去的时候，响应者的 touchBegan 方法会触发，随着手指的移动，touchMoved 会不断触发，当手指结束移动并抬起来的时候，touchEnded 会触发。在这个过程中，我们接收到一直是一个不断更新的 UITouch。\n\n在该视图有添加一个 UIPanGestureRecognizer 手势的情况下，我们多了下方这一条来表示与响应链同时工作的手势识别系统，可以看到手势识别系统也是在手指按下去那一刻就开始工作的，前半段处于一直正在识别的状态。在我们拖动了很小一段距离之后（注意这时候我们的手指还没抬起）， 手势识别系统确定了该 UITouch 所做的动作是符合 UIPanGestureRecognizer 的特点的，于是给该视图的响应链发送了 touchCancelled 的信息，从而阻止这个 UITouch 继续触发这个视图的 touches 系列方法（同时也取消了别的相关手势的 touches 系列方法，图中未体现）。在这之后，被调用的只有与手势关联的 target-action 方法（也就是图中的墨绿色节点 call PanFunction）。\n\n***再进一步理解***\n为了图片的美观和易读，在图片中隐去了不少细节，在此列出：\n\n- 手势识别器的状态在图中未标出：\n\n\t- 手势在图中 recognizing 的橙色节点处和 recognized 棕色节点处都处于 .possible 状态\n\t- 手势在图中绿色节点处的状态变化是 .began -> [.changed] -> ended\n\n- 手势识别器不是响应者，但也有 touches 系列方法，比它所添加的视图的 touches 方法更早那么一点触发\n\n\t- 从图中也可以看出，手势那条线上的每个节点都稍靠左一些\n\t- 手势那条线上的橙、棕、墨绿色节点处也可以看做手势识别器的 touches 方法触发\n\n- 更详细的触发顺序应当如下图所示（在一个 UIView 上添加了 UIPanGestureRecognizer ，并单指在上面滑动一段距离的情况）\n\n\n(手势和响应者的 touches 方法名字是一样的，都是「began」，「moved」，「ended」，「cancelled」。很容易和手势识别器的 state 属性搞混，state 属性是根据每个手势的类型（离散型/连续型）的不同，可能有 .possible、.began、.changed、.ended、.cancelled、.failed 这些状态，名字很像方法名很像但不是一回事。)\n\n#### UIControl 与手势识别\n\n由于 UIControl 接收 target-action 方法的方式是在其 touches 方法中识别、接收、处理，而手势的 touches 方法一定比其所在视图的 touches 方法早触发。可以得到的结论是：对于自定义的 UIControl 来说，手势识别的优先级比 UIControl 自身处理事件的优先级高。\n\n\n### 总结\n\n总的来说，触摸屏幕后事件的传递可以分为以下几个步骤：\n\n1. 通过「命中测试」来找到「第一响应者」\n\n2. 由「第一响应者」来确定「响应链」\n\n3. 将事件沿「响应链」传递\n\n4. 事件被某个响应者接收，或没有响应者接收从而被丢弃\n\n在步骤 3 中，事件沿「响应链」传递这个过程，就是响应者通过调用其 next 的 touches 系列方法来实现的。在上篇文章中我们也提到，假如我们使用 UIControl 等类作为响应者，这些类本身就不会调用其 next 的 touches 系列方法，从而实现阻断响应链的效果，也可以认为是实现接受某个事件的效果。\n\n手势识别器(UIGestureRecognizer)在大多数情况下，识别屏幕触摸事件的优先级，比控件本身的方法的优先级高。","slug":"iOS/UI/事件传递&响应者链","published":1,"updated":"2021-12-29T12:34:47.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxsdhbno000s54zxwlg5mc71","content":"<h3 id=\"事件传递过程\"><a href=\"#事件传递过程\" class=\"headerlink\" title=\"事件传递过程\"></a>事件传递过程</h3><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/C708B73F-4B04-44E8-B655-F3EF81A9749C.png\" title=\"This is an image\">\n<p>触摸事件发生后, UIApplication 会触发 func sendEvent(_ event: UIEvent) 将封装好的 UIEvent 传给 UIWindow(当前展示的UIWindow), 通常接下来传给 UIViewController 然后传给 UIViewController 的根视图, 然后👇🏻</p>\n<h4 id=\"命中测试-hitTest\"><a href=\"#命中测试-hitTest\" class=\"headerlink\" title=\"命中测试(hitTest)\"></a>命中测试(hitTest)</h4><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/2031C1E0-CD22-4887-974F-816D5575DF78.png\" title=\"This is an image\">\n<p>① 检查自身是否可以接收事件, 以下三种情况无法接收事件:</p>\n<ul>\n<li>view.isUserInteractionEnabled = false</li>\n<li>view.alpha &lt;= 0.01</li>\n<li>view.isHidden = true</li>\n</ul>\n<p>② 检查坐标是否在自身内部, 使用 func point(inside point: CGPoint, wizzth event: UIEvent?) -&gt; Bool 方法判断, 该方法可以被重写</p>\n<p>③ 从后往前遍历子视图重复执行命中测试, 保证后添加的视图先遍历, 即使视图有重叠, 该视图也是同级中展示最完整的, 即用户最可能想点击的视图</p>\n<h4 id=\"确定第一响应者\"><a href=\"#确定第一响应者\" class=\"headerlink\" title=\"确定第一响应者\"></a>确定第一响应者</h4><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/B0ABE2DF-0087-492F-9A07-7E2BD9CD5B0E.png\" title=\"This is an image\">\n<p>整个命中测试的走向是这样的：A✅ –&gt; D❎ –&gt; B✅ –&gt; C❎ &gt;&gt;&gt;&gt; B</p>\n<p>实际上这个流程就是 UIView 的一个方法：func hitTest(_ point: CGPoint, with event: UIEvent?) -&gt; UIView?，方法最后返回的 UIView? 即第一响应者</p>\n<h4 id=\"越界\"><a href=\"#越界\" class=\"headerlink\" title=\"越界!\"></a>越界!</h4><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/31B1BB9C-89E7-4E9E-AE05-EA7690765197.png\" title=\"This is an image\">\n<p>如图, 最终获得第一响应者仍然是 B，甚至整个命中测试的走向和之前是一样的：A✅ –&gt; D❎ –&gt; B✅ –&gt; C❎ &gt;&gt;&gt;&gt; B，究其原因是在 D 检查触摸点是否在自身内部时，答案是否，所以不会去对 E 进行命中测试，即使看起来我们点了 E。这个例子告诉我们，要注意可点击的子视图是否会超出父视图的范围。另若有这种情况可以重写 func point(inside point: CGPoint, with event: UIEvent?) -&gt; Bool 方法来扩大点击有效范围。</p>\n<h3 id=\"响应链传递\"><a href=\"#响应链传递\" class=\"headerlink\" title=\"响应链传递\"></a>响应链传递</h3><h4 id=\"确定响应链成员\"><a href=\"#确定响应链成员\" class=\"headerlink\" title=\"确定响应链成员\"></a>确定响应链成员</h4><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/15F294D4-4F56-46B9-96A0-1B0436EDEB94.png\" title=\"This is an image\">\n<p>在找到了第一响应者之后，整个响应链也随着确定下来了。所谓响应链是由响应者组成的一个链表，链表的头是第一响应者，链表的每个结点的下一个结点都是该结点的 next 属性。</p>\n<p>默认来说，若该结点是 UIView 类型的话，这个 next 属性是该结点的父视图。但也有几个例外：</p>\n<ul>\n<li><p>如果是 UIViewController 的根视图，则下一个响应者是 UIViewController。</p>\n</li>\n<li><p>如果是 UIViewController</p>\n<ul>\n<li>如果 UIViewController 的视图是 UIWindow 的根视图，则下一个响应者是 UIWindow 对象。</li>\n<li>如果 UIViewController 是由另一个 UIViewController 呈现的，则下一个响应者是第二个 UIViewController。</li>\n</ul>\n</li>\n<li><p>UIWindow的下一个响应者是 UIApplication</p>\n</li>\n<li><p>UIApplication 的下一个响应者是 app delegate。但仅当该 app delegate 是 UIResponder 的实例且不是 UIView、UIViewController 或 app 对象本身时，才是下一个响应者。</p>\n</li>\n</ul>\n<h4 id=\"沿响应链传递事件\"><a href=\"#沿响应链传递事件\" class=\"headerlink\" title=\"沿响应链传递事件\"></a>沿响应链传递事件</h4><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/290E2C72-06E8-4C29-9323-75DA862B6772.png\" title=\"This is an image\">\n<p>触摸事件首先将会由第一响应者响应，触发其 open func touchesBegan(_ touches: Set<uitouch>, with event: UIEvent?) 等方法，根据触摸的方式不同（如拖动，双指），具体的方法和过程也不一样。若第一响应者在这个方法中不处理这个事件，则会传递给响应链中的下一个响应者触发该方法处理，若下一个也不处理，则以此类推传递下去。若到最后还没有人响应，则会被丢弃（比如一个误触） </uitouch></p>\n<h4 id=\"阻断响应链传递\"><a href=\"#阻断响应链传递\" class=\"headerlink\" title=\"阻断响应链传递\"></a>阻断响应链传递</h4><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/5C23F3FB-57F1-42A3-A295-97359D12123E.png\" title=\"This is an image\">\n<p>如果我们把上图中的 C 换成平时使用的 UIControl 类，控制台又会怎么打印呢？</p>\n<p>如图所示，会发现响应链的事件传递到 C 处就停止了，也就是 A 的 touches 方法没有被触发。这意味着在响应链中，UIControl 及其子类默认来说，是不会将事件传递下去的。在代码中，可以理解为 UIView 默认会在其 touches 方法中去调用其 next 的 touches 方法，而 UIControl 默认不会去调用。这样就做到了，当某个控件接受了事件之后，事件的传递就会终止。另外，UIScrollView 也是这样的工作机制。</p>\n<h3 id=\"响应链及手势识别\"><a href=\"#响应链及手势识别\" class=\"headerlink\" title=\"响应链及手势识别\"></a>响应链及手势识别</h3><h4 id=\"当手势识别参与响应链\"><a href=\"#当手势识别参与响应链\" class=\"headerlink\" title=\"当手势识别参与响应链\"></a>当手势识别参与响应链</h4><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/F7D740CA-617A-4BFE-A9D7-D07E0B2D1E7B.png\" title=\"This is an image\">\n<img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/58D35CDC-3D1A-4379-9B77-0DE377CD89DF.png\" title=\"This is an image\">\n<p>从图中我们可以看到，当不带手势的情况下，手指按下去的时候，响应者的 touchBegan 方法会触发，随着手指的移动，touchMoved 会不断触发，当手指结束移动并抬起来的时候，touchEnded 会触发。在这个过程中，我们接收到一直是一个不断更新的 UITouch。</p>\n<p>在该视图有添加一个 UIPanGestureRecognizer 手势的情况下，我们多了下方这一条来表示与响应链同时工作的手势识别系统，可以看到手势识别系统也是在手指按下去那一刻就开始工作的，前半段处于一直正在识别的状态。在我们拖动了很小一段距离之后（注意这时候我们的手指还没抬起）， 手势识别系统确定了该 UITouch 所做的动作是符合 UIPanGestureRecognizer 的特点的，于是给该视图的响应链发送了 touchCancelled 的信息，从而阻止这个 UITouch 继续触发这个视图的 touches 系列方法（同时也取消了别的相关手势的 touches 系列方法，图中未体现）。在这之后，被调用的只有与手势关联的 target-action 方法（也就是图中的墨绿色节点 call PanFunction）。</p>\n<p><strong><em>再进一步理解</em></strong><br>为了图片的美观和易读，在图片中隐去了不少细节，在此列出：</p>\n<ul>\n<li><p>手势识别器的状态在图中未标出：</p>\n<ul>\n<li>手势在图中 recognizing 的橙色节点处和 recognized 棕色节点处都处于 .possible 状态</li>\n<li>手势在图中绿色节点处的状态变化是 .began -&gt; [.changed] -&gt; ended</li>\n</ul>\n</li>\n<li><p>手势识别器不是响应者，但也有 touches 系列方法，比它所添加的视图的 touches 方法更早那么一点触发</p>\n<ul>\n<li>从图中也可以看出，手势那条线上的每个节点都稍靠左一些</li>\n<li>手势那条线上的橙、棕、墨绿色节点处也可以看做手势识别器的 touches 方法触发</li>\n</ul>\n</li>\n<li><p>更详细的触发顺序应当如下图所示（在一个 UIView 上添加了 UIPanGestureRecognizer ，并单指在上面滑动一段距离的情况）</p>\n</li>\n</ul>\n<p>(手势和响应者的 touches 方法名字是一样的，都是「began」，「moved」，「ended」，「cancelled」。很容易和手势识别器的 state 属性搞混，state 属性是根据每个手势的类型（离散型/连续型）的不同，可能有 .possible、.began、.changed、.ended、.cancelled、.failed 这些状态，名字很像方法名很像但不是一回事。)</p>\n<h4 id=\"UIControl-与手势识别\"><a href=\"#UIControl-与手势识别\" class=\"headerlink\" title=\"UIControl 与手势识别\"></a>UIControl 与手势识别</h4><p>由于 UIControl 接收 target-action 方法的方式是在其 touches 方法中识别、接收、处理，而手势的 touches 方法一定比其所在视图的 touches 方法早触发。可以得到的结论是：对于自定义的 UIControl 来说，手势识别的优先级比 UIControl 自身处理事件的优先级高。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>总的来说，触摸屏幕后事件的传递可以分为以下几个步骤：</p>\n<ol>\n<li><p>通过「命中测试」来找到「第一响应者」</p>\n</li>\n<li><p>由「第一响应者」来确定「响应链」</p>\n</li>\n<li><p>将事件沿「响应链」传递</p>\n</li>\n<li><p>事件被某个响应者接收，或没有响应者接收从而被丢弃</p>\n</li>\n</ol>\n<p>在步骤 3 中，事件沿「响应链」传递这个过程，就是响应者通过调用其 next 的 touches 系列方法来实现的。在上篇文章中我们也提到，假如我们使用 UIControl 等类作为响应者，这些类本身就不会调用其 next 的 touches 系列方法，从而实现阻断响应链的效果，也可以认为是实现接受某个事件的效果。</p>\n<p>手势识别器(UIGestureRecognizer)在大多数情况下，识别屏幕触摸事件的优先级，比控件本身的方法的优先级高。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"事件传递过程\"><a href=\"#事件传递过程\" class=\"headerlink\" title=\"事件传递过程\"></a>事件传递过程</h3><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/C708B73F-4B04-44E8-B655-F3EF81A9749C.png\" title=\"This is an image\">\n<p>触摸事件发生后, UIApplication 会触发 func sendEvent(_ event: UIEvent) 将封装好的 UIEvent 传给 UIWindow(当前展示的UIWindow), 通常接下来传给 UIViewController 然后传给 UIViewController 的根视图, 然后👇🏻</p>\n<h4 id=\"命中测试-hitTest\"><a href=\"#命中测试-hitTest\" class=\"headerlink\" title=\"命中测试(hitTest)\"></a>命中测试(hitTest)</h4><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/2031C1E0-CD22-4887-974F-816D5575DF78.png\" title=\"This is an image\">\n<p>① 检查自身是否可以接收事件, 以下三种情况无法接收事件:</p>\n<ul>\n<li>view.isUserInteractionEnabled = false</li>\n<li>view.alpha &lt;= 0.01</li>\n<li>view.isHidden = true</li>\n</ul>\n<p>② 检查坐标是否在自身内部, 使用 func point(inside point: CGPoint, wizzth event: UIEvent?) -&gt; Bool 方法判断, 该方法可以被重写</p>\n<p>③ 从后往前遍历子视图重复执行命中测试, 保证后添加的视图先遍历, 即使视图有重叠, 该视图也是同级中展示最完整的, 即用户最可能想点击的视图</p>\n<h4 id=\"确定第一响应者\"><a href=\"#确定第一响应者\" class=\"headerlink\" title=\"确定第一响应者\"></a>确定第一响应者</h4><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/B0ABE2DF-0087-492F-9A07-7E2BD9CD5B0E.png\" title=\"This is an image\">\n<p>整个命中测试的走向是这样的：A✅ –&gt; D❎ –&gt; B✅ –&gt; C❎ &gt;&gt;&gt;&gt; B</p>\n<p>实际上这个流程就是 UIView 的一个方法：func hitTest(_ point: CGPoint, with event: UIEvent?) -&gt; UIView?，方法最后返回的 UIView? 即第一响应者</p>\n<h4 id=\"越界\"><a href=\"#越界\" class=\"headerlink\" title=\"越界!\"></a>越界!</h4><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/31B1BB9C-89E7-4E9E-AE05-EA7690765197.png\" title=\"This is an image\">\n<p>如图, 最终获得第一响应者仍然是 B，甚至整个命中测试的走向和之前是一样的：A✅ –&gt; D❎ –&gt; B✅ –&gt; C❎ &gt;&gt;&gt;&gt; B，究其原因是在 D 检查触摸点是否在自身内部时，答案是否，所以不会去对 E 进行命中测试，即使看起来我们点了 E。这个例子告诉我们，要注意可点击的子视图是否会超出父视图的范围。另若有这种情况可以重写 func point(inside point: CGPoint, with event: UIEvent?) -&gt; Bool 方法来扩大点击有效范围。</p>\n<h3 id=\"响应链传递\"><a href=\"#响应链传递\" class=\"headerlink\" title=\"响应链传递\"></a>响应链传递</h3><h4 id=\"确定响应链成员\"><a href=\"#确定响应链成员\" class=\"headerlink\" title=\"确定响应链成员\"></a>确定响应链成员</h4><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/15F294D4-4F56-46B9-96A0-1B0436EDEB94.png\" title=\"This is an image\">\n<p>在找到了第一响应者之后，整个响应链也随着确定下来了。所谓响应链是由响应者组成的一个链表，链表的头是第一响应者，链表的每个结点的下一个结点都是该结点的 next 属性。</p>\n<p>默认来说，若该结点是 UIView 类型的话，这个 next 属性是该结点的父视图。但也有几个例外：</p>\n<ul>\n<li><p>如果是 UIViewController 的根视图，则下一个响应者是 UIViewController。</p>\n</li>\n<li><p>如果是 UIViewController</p>\n<ul>\n<li>如果 UIViewController 的视图是 UIWindow 的根视图，则下一个响应者是 UIWindow 对象。</li>\n<li>如果 UIViewController 是由另一个 UIViewController 呈现的，则下一个响应者是第二个 UIViewController。</li>\n</ul>\n</li>\n<li><p>UIWindow的下一个响应者是 UIApplication</p>\n</li>\n<li><p>UIApplication 的下一个响应者是 app delegate。但仅当该 app delegate 是 UIResponder 的实例且不是 UIView、UIViewController 或 app 对象本身时，才是下一个响应者。</p>\n</li>\n</ul>\n<h4 id=\"沿响应链传递事件\"><a href=\"#沿响应链传递事件\" class=\"headerlink\" title=\"沿响应链传递事件\"></a>沿响应链传递事件</h4><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/290E2C72-06E8-4C29-9323-75DA862B6772.png\" title=\"This is an image\">\n<p>触摸事件首先将会由第一响应者响应，触发其 open func touchesBegan(_ touches: Set<uitouch>, with event: UIEvent?) 等方法，根据触摸的方式不同（如拖动，双指），具体的方法和过程也不一样。若第一响应者在这个方法中不处理这个事件，则会传递给响应链中的下一个响应者触发该方法处理，若下一个也不处理，则以此类推传递下去。若到最后还没有人响应，则会被丢弃（比如一个误触） </uitouch></p>\n<h4 id=\"阻断响应链传递\"><a href=\"#阻断响应链传递\" class=\"headerlink\" title=\"阻断响应链传递\"></a>阻断响应链传递</h4><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/5C23F3FB-57F1-42A3-A295-97359D12123E.png\" title=\"This is an image\">\n<p>如果我们把上图中的 C 换成平时使用的 UIControl 类，控制台又会怎么打印呢？</p>\n<p>如图所示，会发现响应链的事件传递到 C 处就停止了，也就是 A 的 touches 方法没有被触发。这意味着在响应链中，UIControl 及其子类默认来说，是不会将事件传递下去的。在代码中，可以理解为 UIView 默认会在其 touches 方法中去调用其 next 的 touches 方法，而 UIControl 默认不会去调用。这样就做到了，当某个控件接受了事件之后，事件的传递就会终止。另外，UIScrollView 也是这样的工作机制。</p>\n<h3 id=\"响应链及手势识别\"><a href=\"#响应链及手势识别\" class=\"headerlink\" title=\"响应链及手势识别\"></a>响应链及手势识别</h3><h4 id=\"当手势识别参与响应链\"><a href=\"#当手势识别参与响应链\" class=\"headerlink\" title=\"当手势识别参与响应链\"></a>当手势识别参与响应链</h4><img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/F7D740CA-617A-4BFE-A9D7-D07E0B2D1E7B.png\" title=\"This is an image\">\n<img src=\"/2021/12/29/iOS/UI/事件传递&响应者链/58D35CDC-3D1A-4379-9B77-0DE377CD89DF.png\" title=\"This is an image\">\n<p>从图中我们可以看到，当不带手势的情况下，手指按下去的时候，响应者的 touchBegan 方法会触发，随着手指的移动，touchMoved 会不断触发，当手指结束移动并抬起来的时候，touchEnded 会触发。在这个过程中，我们接收到一直是一个不断更新的 UITouch。</p>\n<p>在该视图有添加一个 UIPanGestureRecognizer 手势的情况下，我们多了下方这一条来表示与响应链同时工作的手势识别系统，可以看到手势识别系统也是在手指按下去那一刻就开始工作的，前半段处于一直正在识别的状态。在我们拖动了很小一段距离之后（注意这时候我们的手指还没抬起）， 手势识别系统确定了该 UITouch 所做的动作是符合 UIPanGestureRecognizer 的特点的，于是给该视图的响应链发送了 touchCancelled 的信息，从而阻止这个 UITouch 继续触发这个视图的 touches 系列方法（同时也取消了别的相关手势的 touches 系列方法，图中未体现）。在这之后，被调用的只有与手势关联的 target-action 方法（也就是图中的墨绿色节点 call PanFunction）。</p>\n<p><strong><em>再进一步理解</em></strong><br>为了图片的美观和易读，在图片中隐去了不少细节，在此列出：</p>\n<ul>\n<li><p>手势识别器的状态在图中未标出：</p>\n<ul>\n<li>手势在图中 recognizing 的橙色节点处和 recognized 棕色节点处都处于 .possible 状态</li>\n<li>手势在图中绿色节点处的状态变化是 .began -&gt; [.changed] -&gt; ended</li>\n</ul>\n</li>\n<li><p>手势识别器不是响应者，但也有 touches 系列方法，比它所添加的视图的 touches 方法更早那么一点触发</p>\n<ul>\n<li>从图中也可以看出，手势那条线上的每个节点都稍靠左一些</li>\n<li>手势那条线上的橙、棕、墨绿色节点处也可以看做手势识别器的 touches 方法触发</li>\n</ul>\n</li>\n<li><p>更详细的触发顺序应当如下图所示（在一个 UIView 上添加了 UIPanGestureRecognizer ，并单指在上面滑动一段距离的情况）</p>\n</li>\n</ul>\n<p>(手势和响应者的 touches 方法名字是一样的，都是「began」，「moved」，「ended」，「cancelled」。很容易和手势识别器的 state 属性搞混，state 属性是根据每个手势的类型（离散型/连续型）的不同，可能有 .possible、.began、.changed、.ended、.cancelled、.failed 这些状态，名字很像方法名很像但不是一回事。)</p>\n<h4 id=\"UIControl-与手势识别\"><a href=\"#UIControl-与手势识别\" class=\"headerlink\" title=\"UIControl 与手势识别\"></a>UIControl 与手势识别</h4><p>由于 UIControl 接收 target-action 方法的方式是在其 touches 方法中识别、接收、处理，而手势的 touches 方法一定比其所在视图的 touches 方法早触发。可以得到的结论是：对于自定义的 UIControl 来说，手势识别的优先级比 UIControl 自身处理事件的优先级高。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>总的来说，触摸屏幕后事件的传递可以分为以下几个步骤：</p>\n<ol>\n<li><p>通过「命中测试」来找到「第一响应者」</p>\n</li>\n<li><p>由「第一响应者」来确定「响应链」</p>\n</li>\n<li><p>将事件沿「响应链」传递</p>\n</li>\n<li><p>事件被某个响应者接收，或没有响应者接收从而被丢弃</p>\n</li>\n</ol>\n<p>在步骤 3 中，事件沿「响应链」传递这个过程，就是响应者通过调用其 next 的 touches 系列方法来实现的。在上篇文章中我们也提到，假如我们使用 UIControl 等类作为响应者，这些类本身就不会调用其 next 的 touches 系列方法，从而实现阻断响应链的效果，也可以认为是实现接受某个事件的效果。</p>\n<p>手势识别器(UIGestureRecognizer)在大多数情况下，识别屏幕触摸事件的优先级，比控件本身的方法的优先级高。</p>\n"},{"title":"UITableView","date":"2021-12-29T09:11:49.000Z","_content":"\n### UITableView的重用机制\n\n{% asset_img 0398244C-928A-412F-BEFE-6BA54BA5E0ED.png This is an image %}\n\n#### UITableView的重用机制可以理解为四个部分\n\n- 即将滚出可视区域的cell\n- 可视区域显示的cell\n- 即将滚入可视区域的cell\n- 重用池\n\n#### 重用机制\n\n- 即将滚入可视区域的cell, 先去重用池中根据identifier寻找是否有可重用的cell, 有就复用, 没有就创建一个cell\n- 即将滚出可视区域的cell, 在滚出可视区域后, 根据identifier去复用池查找是否存在这个cell, 没有就加入缓冲池(重用池)\n- 如此滚动循环根据identifier完成缓冲池(复用池)的更新和cell的重用\n\n\n### 数据源同步\n\n#### 方案一 (并发访问, 数据拷贝)\n\n{% asset_img 78636893-F9AA-4FEA-BA71-8DD4EB997002.png This is an image %}\n\n① 先将数据拷贝一份(一般在主线程)\n② 拷贝的数据传给子线程, 在子线程对数据进行处理(新数据请求、数据解析、预排版等)\n③ 子线程处理新数据的同时, 在主线程对数据进行了删除/新增操作, 需要对删除/新增操作进行记录, 然后reloadUI\n④ 子线程处理完数据之后, 同步删除/新增操作\n⑤ 回到主线程reloadUI\n\n#### 方案二 (串行访问)\n\n{% asset_img D1A906F5-B600-440D-B9AE-FE416040FB07.png This is an image %}\n\n① 子线程进行网络请求, 数据解析, 然后交给子线程的串行队列进行预排版\n② 此时在主线程进行了删除/新增操作, 需要同步的在串行队列中进行处理, 如果此时串行队列中有任务正在进行, 会block直至队列中的任务处理完\n③ 在串行队列中同步主线程的删除/新增操作, 回到主线程reloadUI\n\n#### 取舍\n\n```\n方案一(并发访问, 数据拷贝): 需要记录操作, 且数据拷贝也需要额外的内存, 所以可能会有内存开销的问题\n方案二(串行访问): 如果在子线程处理的任务特别耗时, 那么主线程的操作可能会有一定延迟\n```\n\n两种方案各有利弊, 根据实际情况选择哪种方案\n\n\n### UITableView 中 cell 的动态高度计算\n\n- cell 使用 AutoLayout 布局, 设置tableview 的 estimatedRowHeight 为一个非零值(预估高度, 不用太准确), rowHeight 设置为 UITableViewAutomaticDimension\n- 手动计算每个控件的高度并相加, 然后缓存高度\n\n\n### 如何对 UITableView 的滚动加载进行优化，防止卡顿\n\n#### 减少 cellForRowAtIndexPath 代理中的计算量(cell的内容计算)\n\n- 提前计算每个 cell 中需要的一些基本数据, 代理调用是直接使用\n\n- 图片优化\n    - 图片异步加载\n    - 子线程预解码 ([主流图片加载库所使用的预解码究竟干了什么](https://dreampiggy.com/2019/01/18/%E4%B8%BB%E6%B5%81%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84%E9%A2%84%E8%A7%A3%E7%A0%81%E7%A9%B6%E7%AB%9F%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88/))\n    - 优化图片大小, 尽量避免动态缩放(contentMode), 必要时准备一张缩略图和一张高清图, 需要时再加载高清图\n    - 尽可能将多张图片合成一张进行展示\n    - 图片\"懒加载\"(延迟加载), 快速滚动时不频繁的请求/处理数据\n\n#### 减少 heightForRowAtIndexPath 代理中的计算量(cell的高度计算)\n\n- 如果 cell 的高度是固定的, 去掉 heightForRowAtIndexPath 的代理, 直接设置 UITableView 的 rowHeight 为固定高度\n\n- 预计算 cell 的高度并缓存, heightForRowAtIndexPath 调用时直接设置","source":"_posts/iOS/UI/UITableView.md","raw":"---\ntitle: UITableView\ndate: 2021-12-29 17:11:49\ntags:\ncategories: UI\n---\n\n### UITableView的重用机制\n\n{% asset_img 0398244C-928A-412F-BEFE-6BA54BA5E0ED.png This is an image %}\n\n#### UITableView的重用机制可以理解为四个部分\n\n- 即将滚出可视区域的cell\n- 可视区域显示的cell\n- 即将滚入可视区域的cell\n- 重用池\n\n#### 重用机制\n\n- 即将滚入可视区域的cell, 先去重用池中根据identifier寻找是否有可重用的cell, 有就复用, 没有就创建一个cell\n- 即将滚出可视区域的cell, 在滚出可视区域后, 根据identifier去复用池查找是否存在这个cell, 没有就加入缓冲池(重用池)\n- 如此滚动循环根据identifier完成缓冲池(复用池)的更新和cell的重用\n\n\n### 数据源同步\n\n#### 方案一 (并发访问, 数据拷贝)\n\n{% asset_img 78636893-F9AA-4FEA-BA71-8DD4EB997002.png This is an image %}\n\n① 先将数据拷贝一份(一般在主线程)\n② 拷贝的数据传给子线程, 在子线程对数据进行处理(新数据请求、数据解析、预排版等)\n③ 子线程处理新数据的同时, 在主线程对数据进行了删除/新增操作, 需要对删除/新增操作进行记录, 然后reloadUI\n④ 子线程处理完数据之后, 同步删除/新增操作\n⑤ 回到主线程reloadUI\n\n#### 方案二 (串行访问)\n\n{% asset_img D1A906F5-B600-440D-B9AE-FE416040FB07.png This is an image %}\n\n① 子线程进行网络请求, 数据解析, 然后交给子线程的串行队列进行预排版\n② 此时在主线程进行了删除/新增操作, 需要同步的在串行队列中进行处理, 如果此时串行队列中有任务正在进行, 会block直至队列中的任务处理完\n③ 在串行队列中同步主线程的删除/新增操作, 回到主线程reloadUI\n\n#### 取舍\n\n```\n方案一(并发访问, 数据拷贝): 需要记录操作, 且数据拷贝也需要额外的内存, 所以可能会有内存开销的问题\n方案二(串行访问): 如果在子线程处理的任务特别耗时, 那么主线程的操作可能会有一定延迟\n```\n\n两种方案各有利弊, 根据实际情况选择哪种方案\n\n\n### UITableView 中 cell 的动态高度计算\n\n- cell 使用 AutoLayout 布局, 设置tableview 的 estimatedRowHeight 为一个非零值(预估高度, 不用太准确), rowHeight 设置为 UITableViewAutomaticDimension\n- 手动计算每个控件的高度并相加, 然后缓存高度\n\n\n### 如何对 UITableView 的滚动加载进行优化，防止卡顿\n\n#### 减少 cellForRowAtIndexPath 代理中的计算量(cell的内容计算)\n\n- 提前计算每个 cell 中需要的一些基本数据, 代理调用是直接使用\n\n- 图片优化\n    - 图片异步加载\n    - 子线程预解码 ([主流图片加载库所使用的预解码究竟干了什么](https://dreampiggy.com/2019/01/18/%E4%B8%BB%E6%B5%81%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84%E9%A2%84%E8%A7%A3%E7%A0%81%E7%A9%B6%E7%AB%9F%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88/))\n    - 优化图片大小, 尽量避免动态缩放(contentMode), 必要时准备一张缩略图和一张高清图, 需要时再加载高清图\n    - 尽可能将多张图片合成一张进行展示\n    - 图片\"懒加载\"(延迟加载), 快速滚动时不频繁的请求/处理数据\n\n#### 减少 heightForRowAtIndexPath 代理中的计算量(cell的高度计算)\n\n- 如果 cell 的高度是固定的, 去掉 heightForRowAtIndexPath 的代理, 直接设置 UITableView 的 rowHeight 为固定高度\n\n- 预计算 cell 的高度并缓存, heightForRowAtIndexPath 调用时直接设置","slug":"iOS/UI/UITableView","published":1,"updated":"2021-12-29T11:03:23.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxsdhbnq000u54zxdap7eoo3","content":"<h3 id=\"UITableView的重用机制\"><a href=\"#UITableView的重用机制\" class=\"headerlink\" title=\"UITableView的重用机制\"></a>UITableView的重用机制</h3><img src=\"/2021/12/29/iOS/UI/UITableView/0398244C-928A-412F-BEFE-6BA54BA5E0ED.png\" title=\"This is an image\">\n<h4 id=\"UITableView的重用机制可以理解为四个部分\"><a href=\"#UITableView的重用机制可以理解为四个部分\" class=\"headerlink\" title=\"UITableView的重用机制可以理解为四个部分\"></a>UITableView的重用机制可以理解为四个部分</h4><ul>\n<li>即将滚出可视区域的cell</li>\n<li>可视区域显示的cell</li>\n<li>即将滚入可视区域的cell</li>\n<li>重用池</li>\n</ul>\n<h4 id=\"重用机制\"><a href=\"#重用机制\" class=\"headerlink\" title=\"重用机制\"></a>重用机制</h4><ul>\n<li>即将滚入可视区域的cell, 先去重用池中根据identifier寻找是否有可重用的cell, 有就复用, 没有就创建一个cell</li>\n<li>即将滚出可视区域的cell, 在滚出可视区域后, 根据identifier去复用池查找是否存在这个cell, 没有就加入缓冲池(重用池)</li>\n<li>如此滚动循环根据identifier完成缓冲池(复用池)的更新和cell的重用</li>\n</ul>\n<h3 id=\"数据源同步\"><a href=\"#数据源同步\" class=\"headerlink\" title=\"数据源同步\"></a>数据源同步</h3><h4 id=\"方案一-并发访问-数据拷贝\"><a href=\"#方案一-并发访问-数据拷贝\" class=\"headerlink\" title=\"方案一 (并发访问, 数据拷贝)\"></a>方案一 (并发访问, 数据拷贝)</h4><img src=\"/2021/12/29/iOS/UI/UITableView/78636893-F9AA-4FEA-BA71-8DD4EB997002.png\" title=\"This is an image\">\n<p>① 先将数据拷贝一份(一般在主线程)<br>② 拷贝的数据传给子线程, 在子线程对数据进行处理(新数据请求、数据解析、预排版等)<br>③ 子线程处理新数据的同时, 在主线程对数据进行了删除/新增操作, 需要对删除/新增操作进行记录, 然后reloadUI<br>④ 子线程处理完数据之后, 同步删除/新增操作<br>⑤ 回到主线程reloadUI</p>\n<h4 id=\"方案二-串行访问\"><a href=\"#方案二-串行访问\" class=\"headerlink\" title=\"方案二 (串行访问)\"></a>方案二 (串行访问)</h4><img src=\"/2021/12/29/iOS/UI/UITableView/D1A906F5-B600-440D-B9AE-FE416040FB07.png\" title=\"This is an image\">\n<p>① 子线程进行网络请求, 数据解析, 然后交给子线程的串行队列进行预排版<br>② 此时在主线程进行了删除/新增操作, 需要同步的在串行队列中进行处理, 如果此时串行队列中有任务正在进行, 会block直至队列中的任务处理完<br>③ 在串行队列中同步主线程的删除/新增操作, 回到主线程reloadUI</p>\n<h4 id=\"取舍\"><a href=\"#取舍\" class=\"headerlink\" title=\"取舍\"></a>取舍</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方案一(并发访问, 数据拷贝): 需要记录操作, 且数据拷贝也需要额外的内存, 所以可能会有内存开销的问题</span><br><span class=\"line\">方案二(串行访问): 如果在子线程处理的任务特别耗时, 那么主线程的操作可能会有一定延迟</span><br></pre></td></tr></table></figure>\n<p>两种方案各有利弊, 根据实际情况选择哪种方案</p>\n<h3 id=\"UITableView-中-cell-的动态高度计算\"><a href=\"#UITableView-中-cell-的动态高度计算\" class=\"headerlink\" title=\"UITableView 中 cell 的动态高度计算\"></a>UITableView 中 cell 的动态高度计算</h3><ul>\n<li>cell 使用 AutoLayout 布局, 设置tableview 的 estimatedRowHeight 为一个非零值(预估高度, 不用太准确), rowHeight 设置为 UITableViewAutomaticDimension</li>\n<li>手动计算每个控件的高度并相加, 然后缓存高度</li>\n</ul>\n<h3 id=\"如何对-UITableView-的滚动加载进行优化，防止卡顿\"><a href=\"#如何对-UITableView-的滚动加载进行优化，防止卡顿\" class=\"headerlink\" title=\"如何对 UITableView 的滚动加载进行优化，防止卡顿\"></a>如何对 UITableView 的滚动加载进行优化，防止卡顿</h3><h4 id=\"减少-cellForRowAtIndexPath-代理中的计算量-cell的内容计算\"><a href=\"#减少-cellForRowAtIndexPath-代理中的计算量-cell的内容计算\" class=\"headerlink\" title=\"减少 cellForRowAtIndexPath 代理中的计算量(cell的内容计算)\"></a>减少 cellForRowAtIndexPath 代理中的计算量(cell的内容计算)</h4><ul>\n<li><p>提前计算每个 cell 中需要的一些基本数据, 代理调用是直接使用</p>\n</li>\n<li><p>图片优化</p>\n<ul>\n<li>图片异步加载</li>\n<li>子线程预解码 (<a href=\"https://dreampiggy.com/2019/01/18/%E4%B8%BB%E6%B5%81%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84%E9%A2%84%E8%A7%A3%E7%A0%81%E7%A9%B6%E7%AB%9F%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88/\" target=\"_blank\" rel=\"noopener\">主流图片加载库所使用的预解码究竟干了什么</a>)</li>\n<li>优化图片大小, 尽量避免动态缩放(contentMode), 必要时准备一张缩略图和一张高清图, 需要时再加载高清图</li>\n<li>尽可能将多张图片合成一张进行展示</li>\n<li>图片”懒加载”(延迟加载), 快速滚动时不频繁的请求/处理数据</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"减少-heightForRowAtIndexPath-代理中的计算量-cell的高度计算\"><a href=\"#减少-heightForRowAtIndexPath-代理中的计算量-cell的高度计算\" class=\"headerlink\" title=\"减少 heightForRowAtIndexPath 代理中的计算量(cell的高度计算)\"></a>减少 heightForRowAtIndexPath 代理中的计算量(cell的高度计算)</h4><ul>\n<li><p>如果 cell 的高度是固定的, 去掉 heightForRowAtIndexPath 的代理, 直接设置 UITableView 的 rowHeight 为固定高度</p>\n</li>\n<li><p>预计算 cell 的高度并缓存, heightForRowAtIndexPath 调用时直接设置</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"UITableView的重用机制\"><a href=\"#UITableView的重用机制\" class=\"headerlink\" title=\"UITableView的重用机制\"></a>UITableView的重用机制</h3><img src=\"/2021/12/29/iOS/UI/UITableView/0398244C-928A-412F-BEFE-6BA54BA5E0ED.png\" title=\"This is an image\">\n<h4 id=\"UITableView的重用机制可以理解为四个部分\"><a href=\"#UITableView的重用机制可以理解为四个部分\" class=\"headerlink\" title=\"UITableView的重用机制可以理解为四个部分\"></a>UITableView的重用机制可以理解为四个部分</h4><ul>\n<li>即将滚出可视区域的cell</li>\n<li>可视区域显示的cell</li>\n<li>即将滚入可视区域的cell</li>\n<li>重用池</li>\n</ul>\n<h4 id=\"重用机制\"><a href=\"#重用机制\" class=\"headerlink\" title=\"重用机制\"></a>重用机制</h4><ul>\n<li>即将滚入可视区域的cell, 先去重用池中根据identifier寻找是否有可重用的cell, 有就复用, 没有就创建一个cell</li>\n<li>即将滚出可视区域的cell, 在滚出可视区域后, 根据identifier去复用池查找是否存在这个cell, 没有就加入缓冲池(重用池)</li>\n<li>如此滚动循环根据identifier完成缓冲池(复用池)的更新和cell的重用</li>\n</ul>\n<h3 id=\"数据源同步\"><a href=\"#数据源同步\" class=\"headerlink\" title=\"数据源同步\"></a>数据源同步</h3><h4 id=\"方案一-并发访问-数据拷贝\"><a href=\"#方案一-并发访问-数据拷贝\" class=\"headerlink\" title=\"方案一 (并发访问, 数据拷贝)\"></a>方案一 (并发访问, 数据拷贝)</h4><img src=\"/2021/12/29/iOS/UI/UITableView/78636893-F9AA-4FEA-BA71-8DD4EB997002.png\" title=\"This is an image\">\n<p>① 先将数据拷贝一份(一般在主线程)<br>② 拷贝的数据传给子线程, 在子线程对数据进行处理(新数据请求、数据解析、预排版等)<br>③ 子线程处理新数据的同时, 在主线程对数据进行了删除/新增操作, 需要对删除/新增操作进行记录, 然后reloadUI<br>④ 子线程处理完数据之后, 同步删除/新增操作<br>⑤ 回到主线程reloadUI</p>\n<h4 id=\"方案二-串行访问\"><a href=\"#方案二-串行访问\" class=\"headerlink\" title=\"方案二 (串行访问)\"></a>方案二 (串行访问)</h4><img src=\"/2021/12/29/iOS/UI/UITableView/D1A906F5-B600-440D-B9AE-FE416040FB07.png\" title=\"This is an image\">\n<p>① 子线程进行网络请求, 数据解析, 然后交给子线程的串行队列进行预排版<br>② 此时在主线程进行了删除/新增操作, 需要同步的在串行队列中进行处理, 如果此时串行队列中有任务正在进行, 会block直至队列中的任务处理完<br>③ 在串行队列中同步主线程的删除/新增操作, 回到主线程reloadUI</p>\n<h4 id=\"取舍\"><a href=\"#取舍\" class=\"headerlink\" title=\"取舍\"></a>取舍</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方案一(并发访问, 数据拷贝): 需要记录操作, 且数据拷贝也需要额外的内存, 所以可能会有内存开销的问题</span><br><span class=\"line\">方案二(串行访问): 如果在子线程处理的任务特别耗时, 那么主线程的操作可能会有一定延迟</span><br></pre></td></tr></table></figure>\n<p>两种方案各有利弊, 根据实际情况选择哪种方案</p>\n<h3 id=\"UITableView-中-cell-的动态高度计算\"><a href=\"#UITableView-中-cell-的动态高度计算\" class=\"headerlink\" title=\"UITableView 中 cell 的动态高度计算\"></a>UITableView 中 cell 的动态高度计算</h3><ul>\n<li>cell 使用 AutoLayout 布局, 设置tableview 的 estimatedRowHeight 为一个非零值(预估高度, 不用太准确), rowHeight 设置为 UITableViewAutomaticDimension</li>\n<li>手动计算每个控件的高度并相加, 然后缓存高度</li>\n</ul>\n<h3 id=\"如何对-UITableView-的滚动加载进行优化，防止卡顿\"><a href=\"#如何对-UITableView-的滚动加载进行优化，防止卡顿\" class=\"headerlink\" title=\"如何对 UITableView 的滚动加载进行优化，防止卡顿\"></a>如何对 UITableView 的滚动加载进行优化，防止卡顿</h3><h4 id=\"减少-cellForRowAtIndexPath-代理中的计算量-cell的内容计算\"><a href=\"#减少-cellForRowAtIndexPath-代理中的计算量-cell的内容计算\" class=\"headerlink\" title=\"减少 cellForRowAtIndexPath 代理中的计算量(cell的内容计算)\"></a>减少 cellForRowAtIndexPath 代理中的计算量(cell的内容计算)</h4><ul>\n<li><p>提前计算每个 cell 中需要的一些基本数据, 代理调用是直接使用</p>\n</li>\n<li><p>图片优化</p>\n<ul>\n<li>图片异步加载</li>\n<li>子线程预解码 (<a href=\"https://dreampiggy.com/2019/01/18/%E4%B8%BB%E6%B5%81%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93%E6%89%80%E4%BD%BF%E7%94%A8%E7%9A%84%E9%A2%84%E8%A7%A3%E7%A0%81%E7%A9%B6%E7%AB%9F%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88/\" target=\"_blank\" rel=\"noopener\">主流图片加载库所使用的预解码究竟干了什么</a>)</li>\n<li>优化图片大小, 尽量避免动态缩放(contentMode), 必要时准备一张缩略图和一张高清图, 需要时再加载高清图</li>\n<li>尽可能将多张图片合成一张进行展示</li>\n<li>图片”懒加载”(延迟加载), 快速滚动时不频繁的请求/处理数据</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"减少-heightForRowAtIndexPath-代理中的计算量-cell的高度计算\"><a href=\"#减少-heightForRowAtIndexPath-代理中的计算量-cell的高度计算\" class=\"headerlink\" title=\"减少 heightForRowAtIndexPath 代理中的计算量(cell的高度计算)\"></a>减少 heightForRowAtIndexPath 代理中的计算量(cell的高度计算)</h4><ul>\n<li><p>如果 cell 的高度是固定的, 去掉 heightForRowAtIndexPath 的代理, 直接设置 UITableView 的 rowHeight 为固定高度</p>\n</li>\n<li><p>预计算 cell 的高度并缓存, heightForRowAtIndexPath 调用时直接设置</p>\n</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/iOS/UI/事件传递&响应者链/31B1BB9C-89E7-4E9E-AE05-EA7690765197.png","slug":"31B1BB9C-89E7-4E9E-AE05-EA7690765197.png","post":"ckxsdhbno000s54zxwlg5mc71","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/图像显示原理/27A5F497-17F3-4D00-9594-AEDA0C6B2DDE.png","slug":"27A5F497-17F3-4D00-9594-AEDA0C6B2DDE.png","post":"ckxsdhbnm000r54zx1okoro7a","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/15F294D4-4F56-46B9-96A0-1B0436EDEB94.png","slug":"15F294D4-4F56-46B9-96A0-1B0436EDEB94.png","post":"ckxsdhbno000s54zxwlg5mc71","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/B0ABE2DF-0087-492F-9A07-7E2BD9CD5B0E.png","slug":"B0ABE2DF-0087-492F-9A07-7E2BD9CD5B0E.png","post":"ckxsdhbno000s54zxwlg5mc71","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/C708B73F-4B04-44E8-B655-F3EF81A9749C.png","slug":"C708B73F-4B04-44E8-B655-F3EF81A9749C.png","post":"ckxsdhbno000s54zxwlg5mc71","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/UITableView/0398244C-928A-412F-BEFE-6BA54BA5E0ED.png","slug":"0398244C-928A-412F-BEFE-6BA54BA5E0ED.png","post":"ckxsdhbnq000u54zxdap7eoo3","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/UITableView/78636893-F9AA-4FEA-BA71-8DD4EB997002.png","slug":"78636893-F9AA-4FEA-BA71-8DD4EB997002.png","post":"ckxsdhbnq000u54zxdap7eoo3","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/UITableView/D1A906F5-B600-440D-B9AE-FE416040FB07.png","slug":"D1A906F5-B600-440D-B9AE-FE416040FB07.png","post":"ckxsdhbnq000u54zxdap7eoo3","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/图像显示原理/7BA90FE9-B975-4D25-A870-2EB996926B64.png","slug":"7BA90FE9-B975-4D25-A870-2EB996926B64.png","post":"ckxsdhbnm000r54zx1okoro7a","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/图像显示原理/A0F25D10-87FC-40C9-8E1C-9CE2038B1B88.png","slug":"A0F25D10-87FC-40C9-8E1C-9CE2038B1B88.png","post":"ckxsdhbnm000r54zx1okoro7a","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/图像显示原理/A2A666D8-C4D3-4702-86D9-00B76CEBC609.png","slug":"A2A666D8-C4D3-4702-86D9-00B76CEBC609.png","post":"ckxsdhbnm000r54zx1okoro7a","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/图像显示原理/A9D9461A-2433-47F3-955B-AB4BA82245F2.png","slug":"A9D9461A-2433-47F3-955B-AB4BA82245F2.png","post":"ckxsdhbnm000r54zx1okoro7a","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/2031C1E0-CD22-4887-974F-816D5575DF78.png","slug":"2031C1E0-CD22-4887-974F-816D5575DF78.png","post":"ckxsdhbno000s54zxwlg5mc71","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/290E2C72-06E8-4C29-9323-75DA862B6772.png","slug":"290E2C72-06E8-4C29-9323-75DA862B6772.png","post":"ckxsdhbno000s54zxwlg5mc71","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/58D35CDC-3D1A-4379-9B77-0DE377CD89DF.png","slug":"58D35CDC-3D1A-4379-9B77-0DE377CD89DF.png","post":"ckxsdhbno000s54zxwlg5mc71","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/5C23F3FB-57F1-42A3-A295-97359D12123E.png","slug":"5C23F3FB-57F1-42A3-A295-97359D12123E.png","post":"ckxsdhbno000s54zxwlg5mc71","modified":0,"renderable":0},{"_id":"source/_posts/iOS/UI/事件传递&响应者链/F7D740CA-617A-4BFE-A9D7-D07E0B2D1E7B.png","slug":"F7D740CA-617A-4BFE-A9D7-D07E0B2D1E7B.png","post":"ckxsdhbno000s54zxwlg5mc71","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckxsdhbli000154zxqvqlq3sy","category_id":"ckxsdhblq000354zx3wb4jcm5","_id":"ckxsdhbm5000b54zx1krwj3vn"},{"post_id":"ckxsdhblo000254zxz82b3bh5","category_id":"ckxsdhbm1000754zxms2wt0pd","_id":"ckxsdhbm8000f54zxm5jzx433"},{"post_id":"ckxsdhbls000454zxa144es2m","category_id":"ckxsdhblq000354zx3wb4jcm5","_id":"ckxsdhbm9000h54zxu42q090b"},{"post_id":"ckxsdhblw000554zxbwvjbfge","category_id":"ckxsdhbm8000e54zx4bz4d3sr","_id":"ckxsdhbm9000j54zxd735y2nx"},{"post_id":"ckxsdhbm0000654zxfwyq8nx7","category_id":"ckxsdhbm9000i54zx64pmuoxh","_id":"ckxsdhbma000l54zxbzxvo2eu"},{"post_id":"ckxsdhbm2000854zx775fon0v","category_id":"ckxsdhbm9000k54zx7l69wohh","_id":"ckxsdhbma000n54zx2gm73rch"},{"post_id":"ckxsdhbm4000a54zxljnm4t82","category_id":"ckxsdhbma000m54zxqpi7dgg2","_id":"ckxsdhbmb000p54zxtz2ht1t2"},{"post_id":"ckxsdhbm6000d54zxil0775cy","category_id":"ckxsdhbma000m54zxqpi7dgg2","_id":"ckxsdhbmb000q54zxtpxtyf1y"},{"post_id":"ckxsdhbnm000r54zx1okoro7a","category_id":"ckxsdhbnp000t54zxokny4kof","_id":"ckxsdhbns000x54zxk6wqjyin"},{"post_id":"ckxsdhbno000s54zxwlg5mc71","category_id":"ckxsdhbnp000t54zxokny4kof","_id":"ckxsdhbnt000y54zxvrss7tdj"},{"post_id":"ckxsdhbnq000u54zxdap7eoo3","category_id":"ckxsdhbnp000t54zxokny4kof","_id":"ckxsdhbnt000z54zxzy7t9ii8"}],"PostTag":[{"post_id":"ckxsdhbm0000654zxfwyq8nx7","tag_id":"ckxsdhbm3000954zx2y9kjrnm","_id":"ckxsdhbm9000g54zxwfcu3wnu"}],"Tag":[{"name":"Drops","_id":"ckxsdhbm3000954zx2y9kjrnm"}]}}
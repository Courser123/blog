{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557830246356},{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1557892290755},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1557892290756},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1557892290755},{"_id":"themes/next/.gitignore","hash":"3558a8b174618c7a643aceb13233edd729813f9a","modified":1557892290762},{"_id":"source/.DS_Store","hash":"e24bf43d1f3e204cdb724458062d21979debae44","modified":1561706307396},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1557892290756},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1557892290757},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1557892290762},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1557892290762},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1557892290762},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1557892290763},{"_id":"themes/next/bower.json","hash":"9bc3900396a375f817db47d147bb6d207c661678","modified":1557892290764},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1557892290764},{"_id":"themes/next/_config.yml","hash":"abfd46c87f992a7203b2beabe875d8c96deb6ff0","modified":1598863802333},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1557892290770},{"_id":"themes/next/package.json","hash":"0284636ddd0e06ae593f4887819f3a35b08c1370","modified":1557892290804},{"_id":"source/_posts/.DS_Store","hash":"0f3402925f9eafbccfec63b22ef20146a7a3adb8","modified":1561706179553},{"_id":"source/categories/index.md","hash":"a20f1f7d848d1b4d6aeac3cbabf4059777c61ae8","modified":1557978446664},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557892290745},{"_id":"themes/next/.git/FETCH_HEAD","hash":"91c898a5fdc573b8337b03c6ca96bdf10ed93a60","modified":1557987627783},{"_id":"themes/next/.git/config","hash":"e78135eac1ede2f3ca79747839db482790e54b3c","modified":1557892290749},{"_id":"themes/next/.git/index","hash":"e92769b79b1937a67b86eefc53712b494ff3c924","modified":1557892291257},{"_id":"themes/next/.git/packed-refs","hash":"071a85ddf7fe2fd4c736d1f311d94c2cd0402c73","modified":1557892290742},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1557892290757},{"_id":"themes/next/.git/sourcetreeconfig","hash":"9ff78c9a63b1e5627bd2fed99860257cf4f1f3f7","modified":1557987628046},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"285a95aca36e0ac770bcde2b35e3b572d45d1518","modified":1557892290758},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"492b2c159d871e5b5d4c70d259f36e603afe192d","modified":1557892290759},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1557892290758},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1557892290760},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1557892290760},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1557892290760},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1557892290760},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1557892290761},{"_id":"themes/next/.github/mergeable.yml","hash":"8e3a6abc74b5cba57f9586fe6d98762fd4fc9b04","modified":1557892290761},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1557892290762},{"_id":"themes/next/.github/release-drafter.yml","hash":"b4476ada5c62ee7d63ba2e59ead2ec4897086e3c","modified":1557892290761},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1557892290761},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1557892290761},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1557892290764},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1557892290765},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1557892290765},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1557892290765},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1557892290765},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1557892290765},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1557892290764},{"_id":"themes/next/docs/MATH.md","hash":"026d2cff73c22a30ea39c50783557ff4913aceac","modified":1557892290766},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1557892290766},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1557892290770},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1557892290770},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1557892290770},{"_id":"themes/next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1557892290771},{"_id":"themes/next/languages/fa.yml","hash":"cd41db832af5e399590b70a5227cfe0b0e98e101","modified":1557892290771},{"_id":"themes/next/languages/fr.yml","hash":"7005c2b42c2c6e82bd7a1be5cc2f443b5fc79105","modified":1557892290771},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1557892290771},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1557892290772},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1557892290772},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1557892290773},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1557892290773},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1557892290773},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1557892290774},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1557892290774},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1557892290775},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1557892290775},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1557892290775},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1557892290776},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1557892290776},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1557892290776},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1557892290778},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1557892290802},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1557892290803},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1557892290803},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1557892290803},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1557892290803},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1557892290803},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1557892290804},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1557892290805},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1557892290806},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1557892290871},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1557892290871},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1557892290871},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557892290847},{"_id":"source/_posts/LeetCode/Reverse Integer.md","hash":"9f618657fba451c16055c88d1667d0511d3cecc8","modified":1564561335579},{"_id":"source/_posts/LeetCode/Two Sum.md","hash":"b274b4390a675371594164b8d2455e1e401fea42","modified":1564561409736},{"_id":"source/_posts/Runtime/runtime机制(1)-基本数据结构.md","hash":"184e3531830a00e31ce9edb5448b3a8ef16b17eb","modified":1598877135572},{"_id":"source/_posts/Swift Summary/Swift基本语法.md","hash":"763ce79bd928cb72f4a5e87b404a1ed2bb160588","modified":1561705367764},{"_id":"source/_posts/备忘录/备忘录.md","hash":"22820cffd7e0c2d382ba21d6ace62e996f532800","modified":1561713160100},{"_id":"source/_posts/备忘录/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1561705607799},{"_id":"source/_posts/总结/使用Hexo-Github创建博客.md","hash":"5a1d3296de79e88f578b073efdf117687c422b9c","modified":1598876027856},{"_id":"source/_posts/Swift Summary/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1561705602791},{"_id":"source/_posts/总结/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1561705324769},{"_id":"themes/next/.git/logs/HEAD","hash":"8fb34c3947c700d1946b5b560da25b7b83f05c2c","modified":1557892290746},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1557892290759},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1557892290759},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1557892290759},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1557892290759},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1557892290766},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1557892290766},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1557892290766},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1557892290767},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1557892290767},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bc43beb3af74d64fbd3920539d08861e4cadb9a0","modified":1557892290767},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1557892290768},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1557892290767},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1557892290768},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1557892290769},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"83feca62190abcca0332915ffe0eefe582573085","modified":1557892290769},{"_id":"themes/next/docs/zh-CN/README.md","hash":"cdd7a8bdcf4a83ff4c74ee6c95c6bcc0b8c1831c","modified":1557892290769},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1557892290769},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1557892290777},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1557892290777},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1557892290778},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1557892290779},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1557892290780},{"_id":"themes/next/layout/_macro/post.swig","hash":"8a8a2865b09e933c454d9a68e54dd9063dc8c559","modified":1557892290779},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5352f96f4544c1520babf1cec7b44ddf2f8057b3","modified":1557892290780},{"_id":"themes/next/layout/_partials/footer.swig","hash":"589f545333e21a8c7823bce89ab45cf1eb7db6e2","modified":1557892290781},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1557892290781},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1557892290785},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1557892290785},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1557892290789},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1557892290789},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1557892290789},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1557892290789},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1557892290791},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1557892290791},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1557892290796},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1557892290796},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1557892290796},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"9be7c2c9cef63006866d1232c5289901e46be7ed","modified":1557892290798},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1557892290800},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1557892290799},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1557892290800},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1557892290800},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5db80e8d7ea3f29e998320f79508f7e14342a33c","modified":1557892290800},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1557892290801},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1557892290801},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1557892290802},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1557892290804},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1557892290804},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1557892290805},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1557892290806},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1557892290806},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1557892290807},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1557892290807},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1557892290807},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1557892290807},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1557892290807},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1557892290808},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1557892290808},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1557892290809},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1557892290810},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1557892290811},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1557892290847},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1557892290847},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1557892290847},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1557892290848},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1557892290848},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1557892290848},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1557892290849},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1557892290849},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1557892290849},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1557892290850},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1557892290850},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1557892290849},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1557892290850},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1557892290850},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557892290851},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1557892290851},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1557892290852},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1557892290851},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557892290850},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1557892290852},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1557892290852},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1557892290853},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1557892290853},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1557892290853},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1557892290853},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1557892290854},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1557892290855},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1557892290856},{"_id":"themes/next/source/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1557892290856},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557892290837},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557892290837},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557892290838},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557892290846},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557892290846},{"_id":"themes/next/.git/refs/heads/master","hash":"d591ec996e3ef9ea7b8660103296d85235048ca2","modified":1557892290746},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1557892290778},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1557892290779},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1557892290782},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1557892290782},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"36eae78a4d7160a1c5e59ca3f7333f00b43d359b","modified":1557892290782},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1557892290783},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1557892290783},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1557892290784},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1557892290784},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1557892290783},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1557892290785},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1557892290785},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1557892290786},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1557892290786},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1557892290786},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1557892290786},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1557892290787},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1557892290787},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1557892290787},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1557892290787},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1557892290788},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1557892290788},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1557892290790},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1557892290790},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1557892290790},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1557892290791},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1557892290791},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1557892290792},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1557892290792},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1557892290792},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1557892290793},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1557892290793},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1557892290793},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1557892290793},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"d422beaf35a5d2646feaa098bc3e5adf691c7565","modified":1557892290794},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1557892290794},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1557892290794},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1557892290795},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1557892290795},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1557892290795},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1557892290795},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1557892290796},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1557892290797},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1557892290797},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c77a2e7ef5f449a445fb4d36b055721fba4a81af","modified":1557892290797},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1557892290797},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1557892290798},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1557892290798},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1557892290798},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1557892290799},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1557892290799},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1557892290799},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1557892290801},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1557892290802},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1557892290802},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1557892290836},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1557892290837},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1557892290837},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"2036bbb73afd43251982ce824f06c6e88d35a2ef","modified":1557892290838},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1557892290845},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1557892290846},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1557892290846},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1557892290854},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1557892290855},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1557892290857},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1557892290857},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1557892290856},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1557892290857},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1557892290857},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1557892290868},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1557892290869},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1557892290869},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1557892290846},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1557892290866},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"8fb34c3947c700d1946b5b560da25b7b83f05c2c","modified":1557892290748},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557892290745},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1557892290813},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1557892290814},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1557892290813},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1557892290814},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1557892290814},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1557892290819},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1557892290825},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1557892290825},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1557892290834},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1557892290835},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a190ef2f49bdbf69604b48ad1dc7197895ee9b6","modified":1557892290835},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1557892290836},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1557892290836},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1557892290836},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1557892290835},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1557892290839},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1557892290839},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1557892290839},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1557892290840},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1557892290840},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1557892290840},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1557892290840},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1557892290842},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1557892290842},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1557892290842},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1557892290839},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1557892290843},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1557892290842},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1557892290843},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1557892290843},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1557892290844},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1557892290844},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1557892290845},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1557892290845},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1557892290858},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1557892290859},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1557892290859},{"_id":"themes/next/.git/objects/pack/pack-666779668e313d586492f3aeaa86e15bf70118a9.idx","hash":"2b90239a27d36ba9cdfa0c1c243719fc084f611b","modified":1557892290728},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1557892290868},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1557892290864},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1557892290865},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"8fb34c3947c700d1946b5b560da25b7b83f05c2c","modified":1557892290745},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1557892290815},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1557892290814},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1557892290815},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1557892290815},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1557892290815},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1557892290815},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1557892290816},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1557892290816},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1557892290816},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1557892290817},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1557892290817},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1557892290818},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1557892290818},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1557892290818},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1557892290819},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1557892290818},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1557892290819},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1557892290820},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1557892290820},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1557892290821},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1557892290821},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1557892290822},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1557892290821},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1557892290820},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1557892290822},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1557892290823},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1557892290823},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1557892290823},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1557892290824},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1557892290824},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1557892290824},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1557892290825},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1557892290825},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1557892290826},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1557892290827},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1557892290826},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1557892290827},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1557892290827},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1557892290828},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1557892290828},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1557892290829},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1557892290828},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1557892290829},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1557892290829},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1557892290830},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1557892290827},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1557892290830},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1557892290830},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1557892290830},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"fcda60fecff1479adaf6521cf629cda2506337a8","modified":1557892290831},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1557892290831},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1557892290831},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1557892290832},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1557892290832},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1557892290832},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1557892290832},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1557892290833},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1557892290833},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1557892290833},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1557892290834},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1557892290834},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1557892290841},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1557892290841},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1557892290843},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1557892290863},{"_id":"themes/next/.git/objects/pack/pack-666779668e313d586492f3aeaa86e15bf70118a9.pack","hash":"b859230713abef4a5f125dd8f95b1af83c96f4b0","modified":1557892290725}],"Category":[{"name":"LeetCode(Swift)","_id":"ckeihxm240003d7b9kfl21yfs"},{"name":"Runtime","_id":"ckeihxm2d0009d7b9391gkkbh"},{"name":"Swift Summary","_id":"ckeihxm2f000dd7b962oqg84k"},{"name":"总结","_id":"ckeihxm2f000gd7b9tqc2znws"},{"name":"备忘录","_id":"ckeihxm2g000id7b9teefw7pj"}],"Data":[],"Page":[{"title":"分类","date":"2019-05-16T03:28:45.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-05-16 11:28:45\ntype: \"categories\"\n---\n","updated":"2019-05-16T03:47:26.664Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckeihxlzy0000d7b94l2oh3e6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Reverse Integer","date":"2019-06-28T07:13:50.000Z","_content":"\n\n### Reverse Integer\n\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n示例 1:\n\n>输入: 123\n输出: 321\n \n示例 2:\n\n>输入: -123\n输出: -321\n\n示例 3:\n\n>输入: 120\n输出: 21\n注意:\n\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n\n解法:\n将整数 % 10,取到的值放入数组中,再将整数 / 10, 得到的将是减少一位后的值,循环重复这个过程,则将每位数字都存入了数组中,若整数位负数,则取反,若超出数值范围,则返回0,代码如下:\n\n```bash\nfunc reverseInteger(num : Int) -> Int {\n        \n        var temp = abs(num);\n        var i = 0;\n        var array = [Int]();\n        while (temp != 0) {\n            i = temp % 10;\n            temp = temp / 10;\n            array.append(i);\n        }\n        \n        var res = 0;\n        for (index, item) in array.enumerated() {\n            let t : Double = pow(10.0, Double(array.count - index - 1));\n            res = res + item * Int(t);\n        }\n        \n        if (num < 0) {\n            res = -res;\n        }\n        \n        if (res < Int32.min || res > Int32.max) {\n            res = 0;\n        }\n        \n        return res;\n    }\n```","source":"_posts/LeetCode/Reverse Integer.md","raw":"---\ntitle: Reverse Integer\ndate: 2019-06-28 15:13:50\ncategories: LeetCode(Swift)\n---\n\n\n### Reverse Integer\n\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n示例 1:\n\n>输入: 123\n输出: 321\n \n示例 2:\n\n>输入: -123\n输出: -321\n\n示例 3:\n\n>输入: 120\n输出: 21\n注意:\n\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n\n解法:\n将整数 % 10,取到的值放入数组中,再将整数 / 10, 得到的将是减少一位后的值,循环重复这个过程,则将每位数字都存入了数组中,若整数位负数,则取反,若超出数值范围,则返回0,代码如下:\n\n```bash\nfunc reverseInteger(num : Int) -> Int {\n        \n        var temp = abs(num);\n        var i = 0;\n        var array = [Int]();\n        while (temp != 0) {\n            i = temp % 10;\n            temp = temp / 10;\n            array.append(i);\n        }\n        \n        var res = 0;\n        for (index, item) in array.enumerated() {\n            let t : Double = pow(10.0, Double(array.count - index - 1));\n            res = res + item * Int(t);\n        }\n        \n        if (num < 0) {\n            res = -res;\n        }\n        \n        if (res < Int32.min || res > Int32.max) {\n            res = 0;\n        }\n        \n        return res;\n    }\n```","slug":"LeetCode/Reverse Integer","published":1,"updated":"2019-07-31T08:22:15.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeihxm1z0001d7b93doisiyn","content":"<h3 id=\"Reverse-Integer\"><a href=\"#Reverse-Integer\" class=\"headerlink\" title=\"Reverse Integer\"></a>Reverse Integer</h3><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n<p>示例 1:</p>\n<blockquote>\n<p>输入: 123<br>输出: 321</p>\n</blockquote>\n<p>示例 2:</p>\n<blockquote>\n<p>输入: -123<br>输出: -321</p>\n</blockquote>\n<p>示例 3:</p>\n<blockquote>\n<p>输入: 120<br>输出: 21<br>注意:</p>\n</blockquote>\n<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>\n<p>解法:<br>将整数 % 10,取到的值放入数组中,再将整数 / 10, 得到的将是减少一位后的值,循环重复这个过程,则将每位数字都存入了数组中,若整数位负数,则取反,若超出数值范围,则返回0,代码如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func reverseInteger(num : Int) -&gt; Int &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var temp = abs(num);</span><br><span class=\"line\">        var i = 0;</span><br><span class=\"line\">        var array = [Int]();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (temp != 0) &#123;</span><br><span class=\"line\">            i = temp % 10;</span><br><span class=\"line\">            temp = temp / 10;</span><br><span class=\"line\">            array.append(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var res = 0;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> array.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> t : Double = pow(10.0, Double(array.count - index - 1));</span><br><span class=\"line\">            res = res + item * Int(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &lt; 0) &#123;</span><br><span class=\"line\">            res = -res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res &lt; Int32.min || res &gt; Int32.max) &#123;</span><br><span class=\"line\">            res = 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Reverse-Integer\"><a href=\"#Reverse-Integer\" class=\"headerlink\" title=\"Reverse Integer\"></a>Reverse Integer</h3><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n<p>示例 1:</p>\n<blockquote>\n<p>输入: 123<br>输出: 321</p>\n</blockquote>\n<p>示例 2:</p>\n<blockquote>\n<p>输入: -123<br>输出: -321</p>\n</blockquote>\n<p>示例 3:</p>\n<blockquote>\n<p>输入: 120<br>输出: 21<br>注意:</p>\n</blockquote>\n<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>\n<p>解法:<br>将整数 % 10,取到的值放入数组中,再将整数 / 10, 得到的将是减少一位后的值,循环重复这个过程,则将每位数字都存入了数组中,若整数位负数,则取反,若超出数值范围,则返回0,代码如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func reverseInteger(num : Int) -&gt; Int &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var temp = abs(num);</span><br><span class=\"line\">        var i = 0;</span><br><span class=\"line\">        var array = [Int]();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (temp != 0) &#123;</span><br><span class=\"line\">            i = temp % 10;</span><br><span class=\"line\">            temp = temp / 10;</span><br><span class=\"line\">            array.append(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var res = 0;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> array.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> t : Double = pow(10.0, Double(array.count - index - 1));</span><br><span class=\"line\">            res = res + item * Int(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &lt; 0) &#123;</span><br><span class=\"line\">            res = -res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res &lt; Int32.min || res &gt; Int32.max) &#123;</span><br><span class=\"line\">            res = 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"Two Sum","date":"2019-05-14T12:35:17.000Z","_content":"\n### Two Sum\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n示例:\n\n> 给定 nums = [2, 7, 11, 15], target = 9  \n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n\n暴力解法可以使用两个循环嵌套,但是时间复杂度过高\n可以牺牲一定空间,使用查表的方式提升效率\n\n解法一:\n\n两遍遍历\n```bash\nfunc twoSum( nums : [Int], target: Int) -> [Int] {\n        \n        var dict = [Int : Int]();\n        for (index, item) in nums.enumerated() {\n            dict.updateValue(index, forKey: item);\n        }\n\n        var result = [Int]();\n        for (index, item) in nums.enumerated() {\n            if(dict.keys.contains(target - item) && (dict[target - item] != index)) {\n                result.append(index);\n                result.append(dict[target - item]!);\n                break;\n            }\n        }\n        \n        return result;\n    }\n```\n\n解法二:\n\n一遍遍历\n```bash\nfunc twoSum( nums : [Int], target: Int) -> [Int] {\n        \n        var dict = [Int : Int]();\n        var result = [Int]();\n        for (index, item) in nums.enumerated() {\n            if(dict.keys.contains(target - item) && (dict[target - item] != index)) {\n                result.append(index);\n                result.append(dict[target - item]!);\n                break;\n            }\n            dict.updateValue(index, forKey: item);\n        }\n        \n        return result;\n    }\n```","source":"_posts/LeetCode/Two Sum.md","raw":"---\ntitle: Two Sum\ndate: 2019-05-14 20:35:17\ncategories: LeetCode(Swift)\n---\n\n### Two Sum\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n示例:\n\n> 给定 nums = [2, 7, 11, 15], target = 9  \n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n\n暴力解法可以使用两个循环嵌套,但是时间复杂度过高\n可以牺牲一定空间,使用查表的方式提升效率\n\n解法一:\n\n两遍遍历\n```bash\nfunc twoSum( nums : [Int], target: Int) -> [Int] {\n        \n        var dict = [Int : Int]();\n        for (index, item) in nums.enumerated() {\n            dict.updateValue(index, forKey: item);\n        }\n\n        var result = [Int]();\n        for (index, item) in nums.enumerated() {\n            if(dict.keys.contains(target - item) && (dict[target - item] != index)) {\n                result.append(index);\n                result.append(dict[target - item]!);\n                break;\n            }\n        }\n        \n        return result;\n    }\n```\n\n解法二:\n\n一遍遍历\n```bash\nfunc twoSum( nums : [Int], target: Int) -> [Int] {\n        \n        var dict = [Int : Int]();\n        var result = [Int]();\n        for (index, item) in nums.enumerated() {\n            if(dict.keys.contains(target - item) && (dict[target - item] != index)) {\n                result.append(index);\n                result.append(dict[target - item]!);\n                break;\n            }\n            dict.updateValue(index, forKey: item);\n        }\n        \n        return result;\n    }\n```","slug":"LeetCode/Two Sum","published":1,"updated":"2019-07-31T08:23:29.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeihxm220002d7b9g8oqw8b2","content":"<h3 id=\"Two-Sum\"><a href=\"#Two-Sum\" class=\"headerlink\" title=\"Two Sum\"></a>Two Sum</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<p>示例:</p>\n<blockquote>\n<p>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>\n</blockquote>\n<p>暴力解法可以使用两个循环嵌套,但是时间复杂度过高<br>可以牺牲一定空间,使用查表的方式提升效率</p>\n<p>解法一:</p>\n<p>两遍遍历<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func twoSum( nums : [Int], target: Int) -&gt; [Int] &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var dict = [Int : Int]();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> nums.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            dict.updateValue(index, forKey: item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var result = [Int]();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> nums.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dict.keys.contains(target - item) &amp;&amp; (dict[target - item] != index)) &#123;</span><br><span class=\"line\">                result.append(index);</span><br><span class=\"line\">                result.append(dict[target - item]!);</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>解法二:</p>\n<p>一遍遍历<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func twoSum( nums : [Int], target: Int) -&gt; [Int] &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var dict = [Int : Int]();</span><br><span class=\"line\">        var result = [Int]();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> nums.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dict.keys.contains(target - item) &amp;&amp; (dict[target - item] != index)) &#123;</span><br><span class=\"line\">                result.append(index);</span><br><span class=\"line\">                result.append(dict[target - item]!);</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dict.updateValue(index, forKey: item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Two-Sum\"><a href=\"#Two-Sum\" class=\"headerlink\" title=\"Two Sum\"></a>Two Sum</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<p>示例:</p>\n<blockquote>\n<p>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>\n</blockquote>\n<p>暴力解法可以使用两个循环嵌套,但是时间复杂度过高<br>可以牺牲一定空间,使用查表的方式提升效率</p>\n<p>解法一:</p>\n<p>两遍遍历<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func twoSum( nums : [Int], target: Int) -&gt; [Int] &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var dict = [Int : Int]();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> nums.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            dict.updateValue(index, forKey: item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        var result = [Int]();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> nums.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dict.keys.contains(target - item) &amp;&amp; (dict[target - item] != index)) &#123;</span><br><span class=\"line\">                result.append(index);</span><br><span class=\"line\">                result.append(dict[target - item]!);</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>解法二:</p>\n<p>一遍遍历<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func twoSum( nums : [Int], target: Int) -&gt; [Int] &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var dict = [Int : Int]();</span><br><span class=\"line\">        var result = [Int]();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index, item) <span class=\"keyword\">in</span> nums.<span class=\"function\"><span class=\"title\">enumerated</span></span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dict.keys.contains(target - item) &amp;&amp; (dict[target - item] != index)) &#123;</span><br><span class=\"line\">                result.append(index);</span><br><span class=\"line\">                result.append(dict[target - item]!);</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dict.updateValue(index, forKey: item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"runtime机制(1)-基本数据结构","p":"/Runtime/runtime机制(1)-基本数据结构","date":"2020-08-31T12:15:14.000Z","_content":"\n### 什么是runtime\n\nOC是动态语言, 与静态语言不同, 静态语言的各种数据结构在编译期已经决定了, 不能被修改, 而动态语言可以在程序的运行期, 动态的修改一个类的结构, 如修改方法实现、绑定实例变量等.\n\n> OC作为动态语言, 会想办法将编译期做的事推迟到运行期来做, 所以, 仅有编译器是不够的, 还需要一个运行时系统(runtime system), 它是OC运行框架的基石.\n\n要想了解runtime，就要先了解runtime中定义的各种数据结构, 先从最基础的objc_object和objc_class开始。\n\n### 缘起:NSObject\n\nOC中，基本上所有的类的基类，都是NSObject。因此要深入了解OC中的类的结构，就要从NSObject这个类说起。\n\nXCode中NSObject的实现:\n\n```\n@interface NSObject <NSObject> {\n    Class isa  OBJC_ISA_AVAILABILITY;\n}\n```\n\nNSObject仅有一个实例变量Class isa：\n```\n/// An opaque type that represents an Objective-C class.\ntypedef struct objc_class *Class;\n```\n\nClass实质上是指向objc_class的指针, 在runtime源码的objc-runtime-new.h中，可以看到objc_class在OC 2.0中的定义:\n```\nstruct objc_class : objc_object {\n    // Class ISA;\n    Class superclass;\n    cache_t cache;             // formerly cache pointer and vtable\n    class_data_bits_t bits;    // class_rw_t * plus custom rr/alloc flags\n\n    class_rw_t *data() { \n        return bits.data();\n    }\n    void setData(class_rw_t *newData) {\n        bits.setData(newData);\n    }\n\t。。。。。。\n}\n\nobjc_class继承自objc_object, 所以在runtime中, class也被看做一种对象, class中, 有三个数据:\n* Class superclass: 同样是Class类型，表明当前类的父类。\n* cache_t cache: cache用于优化方法调用，其对应的数据结构如是：\n```\nstruct cache_t {\n    struct bucket_t *_buckets;\n    mask_t _mask;\n    mask_t _occupied;\n    \n\t// 省略其余方法\n\t。。。   \n}\n\ntypedef uintptr_t cache_key_t;\n\nstruct bucket_t {\nprivate:\n    cache_key_t _key;\n    IMP _imp;\n\npublic:\n    inline cache_key_t key() const { return _key; }\n    inline IMP imp() const { return (IMP)_imp; }\n    inline void setKey(cache_key_t newKey) { _key = newKey; }\n    inline void setImp(IMP newImp) { _imp = newImp; }\n\n    void set(cache_key_t newKey, IMP newImp);\n};\n```","source":"_posts/Runtime/runtime机制(1)-基本数据结构.md","raw":"---\ntitle: runtime机制(1)-基本数据结构\np: /Runtime/runtime机制(1)-基本数据结构\ndate: 2020-08-31 20:15:14\ntags:\ncategories: Runtime\n---\n\n### 什么是runtime\n\nOC是动态语言, 与静态语言不同, 静态语言的各种数据结构在编译期已经决定了, 不能被修改, 而动态语言可以在程序的运行期, 动态的修改一个类的结构, 如修改方法实现、绑定实例变量等.\n\n> OC作为动态语言, 会想办法将编译期做的事推迟到运行期来做, 所以, 仅有编译器是不够的, 还需要一个运行时系统(runtime system), 它是OC运行框架的基石.\n\n要想了解runtime，就要先了解runtime中定义的各种数据结构, 先从最基础的objc_object和objc_class开始。\n\n### 缘起:NSObject\n\nOC中，基本上所有的类的基类，都是NSObject。因此要深入了解OC中的类的结构，就要从NSObject这个类说起。\n\nXCode中NSObject的实现:\n\n```\n@interface NSObject <NSObject> {\n    Class isa  OBJC_ISA_AVAILABILITY;\n}\n```\n\nNSObject仅有一个实例变量Class isa：\n```\n/// An opaque type that represents an Objective-C class.\ntypedef struct objc_class *Class;\n```\n\nClass实质上是指向objc_class的指针, 在runtime源码的objc-runtime-new.h中，可以看到objc_class在OC 2.0中的定义:\n```\nstruct objc_class : objc_object {\n    // Class ISA;\n    Class superclass;\n    cache_t cache;             // formerly cache pointer and vtable\n    class_data_bits_t bits;    // class_rw_t * plus custom rr/alloc flags\n\n    class_rw_t *data() { \n        return bits.data();\n    }\n    void setData(class_rw_t *newData) {\n        bits.setData(newData);\n    }\n\t。。。。。。\n}\n\nobjc_class继承自objc_object, 所以在runtime中, class也被看做一种对象, class中, 有三个数据:\n* Class superclass: 同样是Class类型，表明当前类的父类。\n* cache_t cache: cache用于优化方法调用，其对应的数据结构如是：\n```\nstruct cache_t {\n    struct bucket_t *_buckets;\n    mask_t _mask;\n    mask_t _occupied;\n    \n\t// 省略其余方法\n\t。。。   \n}\n\ntypedef uintptr_t cache_key_t;\n\nstruct bucket_t {\nprivate:\n    cache_key_t _key;\n    IMP _imp;\n\npublic:\n    inline cache_key_t key() const { return _key; }\n    inline IMP imp() const { return (IMP)_imp; }\n    inline void setKey(cache_key_t newKey) { _key = newKey; }\n    inline void setImp(IMP newImp) { _imp = newImp; }\n\n    void set(cache_key_t newKey, IMP newImp);\n};\n```","slug":"Runtime/runtime机制(1)-基本数据结构","published":1,"updated":"2020-08-31T12:53:52.933Z","_id":"ckeihxm260004d7b98uagwwt8","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"什么是runtime\"><a href=\"#什么是runtime\" class=\"headerlink\" title=\"什么是runtime\"></a>什么是runtime</h3><p>OC是动态语言, 与静态语言不同, 静态语言的各种数据结构在编译期已经决定了, 不能被修改, 而动态语言可以在程序的运行期, 动态的修改一个类的结构, 如修改方法实现、绑定实例变量等.</p>\n<blockquote>\n<p>OC作为动态语言, 会想办法将编译期做的事推迟到运行期来做, 所以, 仅有编译器是不够的, 还需要一个运行时系统(runtime system), 它是OC运行框架的基石.</p>\n</blockquote>\n<p>要想了解runtime，就要先了解runtime中定义的各种数据结构, 先从最基础的objc_object和objc_class开始。</p>\n<h3 id=\"缘起-NSObject\"><a href=\"#缘起-NSObject\" class=\"headerlink\" title=\"缘起:NSObject\"></a>缘起:NSObject</h3><p>OC中，基本上所有的类的基类，都是NSObject。因此要深入了解OC中的类的结构，就要从NSObject这个类说起。</p>\n<p>XCode中NSObject的实现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface NSObject &lt;NSObject&gt; &#123;</span><br><span class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NSObject仅有一个实例变量Class isa：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// An opaque type that represents an Objective-C class.</span><br><span class=\"line\">typedef struct objc_class *Class;</span><br></pre></td></tr></table></figure></p>\n<p>Class实质上是指向objc_class的指针, 在runtime源码的objc-runtime-new.h中，可以看到objc_class在OC 2.0中的定义:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_class : objc_object &#123;</span><br><span class=\"line\">    // Class ISA;</span><br><span class=\"line\">    Class superclass;</span><br><span class=\"line\">    cache_t cache;             // formerly cache pointer and vtable</span><br><span class=\"line\">    class_data_bits_t bits;    // class_rw_t * plus custom rr/alloc flags</span><br><span class=\"line\"></span><br><span class=\"line\">    class_rw_t *data() &#123; </span><br><span class=\"line\">        return bits.data();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void setData(class_rw_t *newData) &#123;</span><br><span class=\"line\">        bits.setData(newData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t。。。。。。</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">objc_class继承自objc_object, 所以在runtime中, class也被看做一种对象, class中, 有三个数据:</span><br><span class=\"line\">* Class superclass: 同样是Class类型，表明当前类的父类。</span><br><span class=\"line\">* cache_t cache: cache用于优化方法调用，其对应的数据结构如是：</span><br></pre></td></tr></table></figure></p>\n<p>struct cache_t {<br>    struct bucket_t *_buckets;<br>    mask_t _mask;<br>    mask_t _occupied;</p>\n<pre><code>// 省略其余方法\n。。。   \n</code></pre><p>}</p>\n<p>typedef uintptr_t cache_key_t;</p>\n<p>struct bucket_t {<br>private:<br>    cache_key_t _key;<br>    IMP _imp;</p>\n<p>public:<br>    inline cache_key_t key() const { return _key; }<br>    inline IMP imp() const { return (IMP)_imp; }<br>    inline void setKey(cache_key_t newKey) { _key = newKey; }<br>    inline void setImp(IMP newImp) { _imp = newImp; }</p>\n<pre><code>void set(cache_key_t newKey, IMP newImp);\n</code></pre><p>};<br><code>`</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是runtime\"><a href=\"#什么是runtime\" class=\"headerlink\" title=\"什么是runtime\"></a>什么是runtime</h3><p>OC是动态语言, 与静态语言不同, 静态语言的各种数据结构在编译期已经决定了, 不能被修改, 而动态语言可以在程序的运行期, 动态的修改一个类的结构, 如修改方法实现、绑定实例变量等.</p>\n<blockquote>\n<p>OC作为动态语言, 会想办法将编译期做的事推迟到运行期来做, 所以, 仅有编译器是不够的, 还需要一个运行时系统(runtime system), 它是OC运行框架的基石.</p>\n</blockquote>\n<p>要想了解runtime，就要先了解runtime中定义的各种数据结构, 先从最基础的objc_object和objc_class开始。</p>\n<h3 id=\"缘起-NSObject\"><a href=\"#缘起-NSObject\" class=\"headerlink\" title=\"缘起:NSObject\"></a>缘起:NSObject</h3><p>OC中，基本上所有的类的基类，都是NSObject。因此要深入了解OC中的类的结构，就要从NSObject这个类说起。</p>\n<p>XCode中NSObject的实现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface NSObject &lt;NSObject&gt; &#123;</span><br><span class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NSObject仅有一个实例变量Class isa：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// An opaque type that represents an Objective-C class.</span><br><span class=\"line\">typedef struct objc_class *Class;</span><br></pre></td></tr></table></figure></p>\n<p>Class实质上是指向objc_class的指针, 在runtime源码的objc-runtime-new.h中，可以看到objc_class在OC 2.0中的定义:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_class : objc_object &#123;</span><br><span class=\"line\">    // Class ISA;</span><br><span class=\"line\">    Class superclass;</span><br><span class=\"line\">    cache_t cache;             // formerly cache pointer and vtable</span><br><span class=\"line\">    class_data_bits_t bits;    // class_rw_t * plus custom rr/alloc flags</span><br><span class=\"line\"></span><br><span class=\"line\">    class_rw_t *data() &#123; </span><br><span class=\"line\">        return bits.data();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void setData(class_rw_t *newData) &#123;</span><br><span class=\"line\">        bits.setData(newData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t。。。。。。</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">objc_class继承自objc_object, 所以在runtime中, class也被看做一种对象, class中, 有三个数据:</span><br><span class=\"line\">* Class superclass: 同样是Class类型，表明当前类的父类。</span><br><span class=\"line\">* cache_t cache: cache用于优化方法调用，其对应的数据结构如是：</span><br></pre></td></tr></table></figure></p>\n<p>struct cache_t {<br>    struct bucket_t *_buckets;<br>    mask_t _mask;<br>    mask_t _occupied;</p>\n<pre><code>// 省略其余方法\n。。。   \n</code></pre><p>}</p>\n<p>typedef uintptr_t cache_key_t;</p>\n<p>struct bucket_t {<br>private:<br>    cache_key_t _key;<br>    IMP _imp;</p>\n<p>public:<br>    inline cache_key_t key() const { return _key; }<br>    inline IMP imp() const { return (IMP)_imp; }<br>    inline void setKey(cache_key_t newKey) { _key = newKey; }<br>    inline void setImp(IMP newImp) { _imp = newImp; }</p>\n<pre><code>void set(cache_key_t newKey, IMP newImp);\n</code></pre><p>};<br><code>`</code></p>\n"},{"title":"Swift基本语法","date":"2019-06-28T03:09:13.000Z","_content":"\n1.变量和常量可以使用 print（swift 2 将 print 替换了 println） 函数来输出。\n\n在字符串中可以使用括号与反斜线来插入变量，如下实例：\n```bash\nimport Cocoa\n\nvar name = \"菜鸟教程\"\nvar site = \"http://www.runoob.com\"\n\nprint(\"\\(name)的官网地址为：\\(site)\")\n以上程序执行结果为：\n\n菜鸟教程的官网地址为：http://www.runoob.com\n```\n\n2.当声明一个可选类型的时候，要确保用括号给 ? 操作符一个合适的范围。例如，声明可选整数数组，应该写成 (Int[])? 写成 Int[]? 会报错。\n\n3.如果一个可选类型的实例包含一个值，你可以用后缀操作符 ！来访问这个值，如下所示：\n\n```bash\noptionalInteger = 42\noptionalInteger! // 42\n```\n注意：\n使用!来获取一个不存在的可选值会导致运行时错误。使用!来强制解析值之前，一定要确定可选包含一个非nil的值。\n\n4.你可以在声明可选变量时使用感叹号（!）替换问号（?）。这样可选变量在使用时就不需要再加一个感叹号（!）来获取值，它会自动解析。\n\n5.使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在if和while语句中来对可选类型的值进行判断并把值赋给一个常量或者变量。\n\n让我们来看下一个简单的可选绑定实例：\n```bash\nimport Cocoa\n\nvar myString:String?\n\nmyString = \"Hello, Swift!\"\n\nif let yourString = myString {\n   print(\"你的字符串值为 - \\(yourString)\")\n}else{\n   print(\"你的字符串没有值\")\n}\n以上程序执行结果为：\n\n你的字符串值为 - Hello, Swift!\n```\n\n6.整型字面量可以是一个十进制，二进制，八进制或十六进制常量。 二进制前缀为 0b，八进制前缀为 0o，十六进制前缀为 0x，十进制没有前缀：\n\n以下为一些整型字面量的实例：\n```bash\nlet decimalInteger = 17           // 17 - 十进制表示\nlet binaryInteger = 0b10001       // 17 - 二进制表示\nlet octalInteger = 0o21           // 17 - 八进制表示\nlet hexadecimalInteger = 0x11     // 17 - 十六进制表示\n```\n\n7.除非特别指定，浮点型字面量的默认推导类型为 Swift 标准库类型中的 Double，表示64位浮点数。\n\n8.注意：swift3 中已经取消了++、--。\n\n9.以下为区间运算的简单实例：\n\n```bash\nimport Cocoa\n\nprint(\"闭区间运算符:\")\nfor index in 1...5 {\n    print(\"\\(index) * 5 = \\(index * 5)\")\n}\n\nprint(\"半开区间运算符:\")\nfor index in 1..<5 {\n    print(\"\\(index) * 5 = \\(index * 5)\")\n}\n```\n\n10.注意：在大多数语言中，switch 语句块中，case 要紧跟 break，否则 case 之后的语句会顺序运行，而在 Swift 语言中，默认是不会执行下去的，switch 也会终止。如果你想在 Swift 中让 case 之后的语句会按顺序继续运行，则需要使用 fallthrough 语句。\n\n11.你可以使用 == 来比较两个字符串是否相等\n\n12.Swift 中不能创建空的 Character（字符） 类型变量或常量\n\n13.字符串连接字符\n以下实例演示了使用 String 的 append() 方法来实现字符串连接字符：\n```bash\nimport Cocoa\n\nvar varA:String = \"Hello \"\nlet varB:Character = \"G\"\n\nvarA.append( varB )\n\nprint(\"varC  =  \\(varA)\")\n```\n\n14.你可以使用 append() 方法或者赋值运算符 += 在数组末尾添加元素，如下所示，我们初始化一个数组，并向其添加元素\n\n15.如果我们同时需要每个数据项的值和索引值，可以使用 String 的 enumerate() 方法来进行数组遍历\n\n16.我们可以使用加法操作符（+）来合并两种已存在的相同类型数组。新数组的数据类型会从两个数组的数据类型中推断出来\n\n17.我们可以使用 updateValue(forKey:) 增加或更新字典的内容。如果 key 不存在，则添加值，如果存在则修改 key 对应的值。updateValue(_:forKey:)方法返回Optional值.\n\n18.我们可以使用 removeValueForKey() 方法来移除字典 key-value 对。如果 key 存在该方法返回移除的值，如果不存在返回 nil ","source":"_posts/Swift Summary/Swift基本语法.md","raw":"---\ntitle: Swift基本语法\ndate: 2019-06-28 11:09:13\ntags:\ncategories: Swift Summary\n---\n\n1.变量和常量可以使用 print（swift 2 将 print 替换了 println） 函数来输出。\n\n在字符串中可以使用括号与反斜线来插入变量，如下实例：\n```bash\nimport Cocoa\n\nvar name = \"菜鸟教程\"\nvar site = \"http://www.runoob.com\"\n\nprint(\"\\(name)的官网地址为：\\(site)\")\n以上程序执行结果为：\n\n菜鸟教程的官网地址为：http://www.runoob.com\n```\n\n2.当声明一个可选类型的时候，要确保用括号给 ? 操作符一个合适的范围。例如，声明可选整数数组，应该写成 (Int[])? 写成 Int[]? 会报错。\n\n3.如果一个可选类型的实例包含一个值，你可以用后缀操作符 ！来访问这个值，如下所示：\n\n```bash\noptionalInteger = 42\noptionalInteger! // 42\n```\n注意：\n使用!来获取一个不存在的可选值会导致运行时错误。使用!来强制解析值之前，一定要确定可选包含一个非nil的值。\n\n4.你可以在声明可选变量时使用感叹号（!）替换问号（?）。这样可选变量在使用时就不需要再加一个感叹号（!）来获取值，它会自动解析。\n\n5.使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在if和while语句中来对可选类型的值进行判断并把值赋给一个常量或者变量。\n\n让我们来看下一个简单的可选绑定实例：\n```bash\nimport Cocoa\n\nvar myString:String?\n\nmyString = \"Hello, Swift!\"\n\nif let yourString = myString {\n   print(\"你的字符串值为 - \\(yourString)\")\n}else{\n   print(\"你的字符串没有值\")\n}\n以上程序执行结果为：\n\n你的字符串值为 - Hello, Swift!\n```\n\n6.整型字面量可以是一个十进制，二进制，八进制或十六进制常量。 二进制前缀为 0b，八进制前缀为 0o，十六进制前缀为 0x，十进制没有前缀：\n\n以下为一些整型字面量的实例：\n```bash\nlet decimalInteger = 17           // 17 - 十进制表示\nlet binaryInteger = 0b10001       // 17 - 二进制表示\nlet octalInteger = 0o21           // 17 - 八进制表示\nlet hexadecimalInteger = 0x11     // 17 - 十六进制表示\n```\n\n7.除非特别指定，浮点型字面量的默认推导类型为 Swift 标准库类型中的 Double，表示64位浮点数。\n\n8.注意：swift3 中已经取消了++、--。\n\n9.以下为区间运算的简单实例：\n\n```bash\nimport Cocoa\n\nprint(\"闭区间运算符:\")\nfor index in 1...5 {\n    print(\"\\(index) * 5 = \\(index * 5)\")\n}\n\nprint(\"半开区间运算符:\")\nfor index in 1..<5 {\n    print(\"\\(index) * 5 = \\(index * 5)\")\n}\n```\n\n10.注意：在大多数语言中，switch 语句块中，case 要紧跟 break，否则 case 之后的语句会顺序运行，而在 Swift 语言中，默认是不会执行下去的，switch 也会终止。如果你想在 Swift 中让 case 之后的语句会按顺序继续运行，则需要使用 fallthrough 语句。\n\n11.你可以使用 == 来比较两个字符串是否相等\n\n12.Swift 中不能创建空的 Character（字符） 类型变量或常量\n\n13.字符串连接字符\n以下实例演示了使用 String 的 append() 方法来实现字符串连接字符：\n```bash\nimport Cocoa\n\nvar varA:String = \"Hello \"\nlet varB:Character = \"G\"\n\nvarA.append( varB )\n\nprint(\"varC  =  \\(varA)\")\n```\n\n14.你可以使用 append() 方法或者赋值运算符 += 在数组末尾添加元素，如下所示，我们初始化一个数组，并向其添加元素\n\n15.如果我们同时需要每个数据项的值和索引值，可以使用 String 的 enumerate() 方法来进行数组遍历\n\n16.我们可以使用加法操作符（+）来合并两种已存在的相同类型数组。新数组的数据类型会从两个数组的数据类型中推断出来\n\n17.我们可以使用 updateValue(forKey:) 增加或更新字典的内容。如果 key 不存在，则添加值，如果存在则修改 key 对应的值。updateValue(_:forKey:)方法返回Optional值.\n\n18.我们可以使用 removeValueForKey() 方法来移除字典 key-value 对。如果 key 存在该方法返回移除的值，如果不存在返回 nil ","slug":"Swift Summary/Swift基本语法","published":1,"updated":"2019-06-28T07:02:47.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeihxm280005d7b99lco9yam","content":"<p>1.变量和常量可以使用 print（swift 2 将 print 替换了 println） 函数来输出。</p>\n<p>在字符串中可以使用括号与反斜线来插入变量，如下实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\">var name = <span class=\"string\">\"菜鸟教程\"</span></span><br><span class=\"line\">var site = <span class=\"string\">\"http://www.runoob.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name)的官网地址为：\\(site)\"</span>)</span><br><span class=\"line\">以上程序执行结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">菜鸟教程的官网地址为：http://www.runoob.com</span><br></pre></td></tr></table></figure></p>\n<p>2.当声明一个可选类型的时候，要确保用括号给 ? 操作符一个合适的范围。例如，声明可选整数数组，应该写成 (Int[])? 写成 Int[]? 会报错。</p>\n<p>3.如果一个可选类型的实例包含一个值，你可以用后缀操作符 ！来访问这个值，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optionalInteger = 42</span><br><span class=\"line\">optionalInteger! // 42</span><br></pre></td></tr></table></figure>\n<p>注意：<br>使用!来获取一个不存在的可选值会导致运行时错误。使用!来强制解析值之前，一定要确定可选包含一个非nil的值。</p>\n<p>4.你可以在声明可选变量时使用感叹号（!）替换问号（?）。这样可选变量在使用时就不需要再加一个感叹号（!）来获取值，它会自动解析。</p>\n<p>5.使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在if和while语句中来对可选类型的值进行判断并把值赋给一个常量或者变量。</p>\n<p>让我们来看下一个简单的可选绑定实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\">var myString:String?</span><br><span class=\"line\"></span><br><span class=\"line\">myString = <span class=\"string\">\"Hello, Swift!\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">let</span> yourString = myString &#123;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"你的字符串值为 - \\(yourString)\"</span>)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"你的字符串没有值\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">以上程序执行结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">你的字符串值为 - Hello, Swift!</span><br></pre></td></tr></table></figure></p>\n<p>6.整型字面量可以是一个十进制，二进制，八进制或十六进制常量。 二进制前缀为 0b，八进制前缀为 0o，十六进制前缀为 0x，十进制没有前缀：</p>\n<p>以下为一些整型字面量的实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> decimalInteger = 17           // 17 - 十进制表示</span><br><span class=\"line\"><span class=\"built_in\">let</span> binaryInteger = 0b10001       // 17 - 二进制表示</span><br><span class=\"line\"><span class=\"built_in\">let</span> octalInteger = 0o21           // 17 - 八进制表示</span><br><span class=\"line\"><span class=\"built_in\">let</span> hexadecimalInteger = 0x11     // 17 - 十六进制表示</span><br></pre></td></tr></table></figure></p>\n<p>7.除非特别指定，浮点型字面量的默认推导类型为 Swift 标准库类型中的 Double，表示64位浮点数。</p>\n<p>8.注意：swift3 中已经取消了++、–。</p>\n<p>9.以下为区间运算的简单实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"闭区间运算符:\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> 1...5 &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(index) * 5 = \\(index * 5)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"半开区间运算符:\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> 1..&lt;5 &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(index) * 5 = \\(index * 5)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>10.注意：在大多数语言中，switch 语句块中，case 要紧跟 break，否则 case 之后的语句会顺序运行，而在 Swift 语言中，默认是不会执行下去的，switch 也会终止。如果你想在 Swift 中让 case 之后的语句会按顺序继续运行，则需要使用 fallthrough 语句。</p>\n<p>11.你可以使用 == 来比较两个字符串是否相等</p>\n<p>12.Swift 中不能创建空的 Character（字符） 类型变量或常量</p>\n<p>13.字符串连接字符<br>以下实例演示了使用 String 的 append() 方法来实现字符串连接字符：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\">var varA:String = <span class=\"string\">\"Hello \"</span></span><br><span class=\"line\"><span class=\"built_in\">let</span> varB:Character = <span class=\"string\">\"G\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">varA.append( varB )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"varC  =  \\(varA)\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>14.你可以使用 append() 方法或者赋值运算符 += 在数组末尾添加元素，如下所示，我们初始化一个数组，并向其添加元素</p>\n<p>15.如果我们同时需要每个数据项的值和索引值，可以使用 String 的 enumerate() 方法来进行数组遍历</p>\n<p>16.我们可以使用加法操作符（+）来合并两种已存在的相同类型数组。新数组的数据类型会从两个数组的数据类型中推断出来</p>\n<p>17.我们可以使用 updateValue(forKey:) 增加或更新字典的内容。如果 key 不存在，则添加值，如果存在则修改 key 对应的值。updateValue(_:forKey:)方法返回Optional值.</p>\n<p>18.我们可以使用 removeValueForKey() 方法来移除字典 key-value 对。如果 key 存在该方法返回移除的值，如果不存在返回 nil </p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.变量和常量可以使用 print（swift 2 将 print 替换了 println） 函数来输出。</p>\n<p>在字符串中可以使用括号与反斜线来插入变量，如下实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\">var name = <span class=\"string\">\"菜鸟教程\"</span></span><br><span class=\"line\">var site = <span class=\"string\">\"http://www.runoob.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name)的官网地址为：\\(site)\"</span>)</span><br><span class=\"line\">以上程序执行结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">菜鸟教程的官网地址为：http://www.runoob.com</span><br></pre></td></tr></table></figure></p>\n<p>2.当声明一个可选类型的时候，要确保用括号给 ? 操作符一个合适的范围。例如，声明可选整数数组，应该写成 (Int[])? 写成 Int[]? 会报错。</p>\n<p>3.如果一个可选类型的实例包含一个值，你可以用后缀操作符 ！来访问这个值，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optionalInteger = 42</span><br><span class=\"line\">optionalInteger! // 42</span><br></pre></td></tr></table></figure>\n<p>注意：<br>使用!来获取一个不存在的可选值会导致运行时错误。使用!来强制解析值之前，一定要确定可选包含一个非nil的值。</p>\n<p>4.你可以在声明可选变量时使用感叹号（!）替换问号（?）。这样可选变量在使用时就不需要再加一个感叹号（!）来获取值，它会自动解析。</p>\n<p>5.使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在if和while语句中来对可选类型的值进行判断并把值赋给一个常量或者变量。</p>\n<p>让我们来看下一个简单的可选绑定实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\">var myString:String?</span><br><span class=\"line\"></span><br><span class=\"line\">myString = <span class=\"string\">\"Hello, Swift!\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">let</span> yourString = myString &#123;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"你的字符串值为 - \\(yourString)\"</span>)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"你的字符串没有值\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">以上程序执行结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">你的字符串值为 - Hello, Swift!</span><br></pre></td></tr></table></figure></p>\n<p>6.整型字面量可以是一个十进制，二进制，八进制或十六进制常量。 二进制前缀为 0b，八进制前缀为 0o，十六进制前缀为 0x，十进制没有前缀：</p>\n<p>以下为一些整型字面量的实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> decimalInteger = 17           // 17 - 十进制表示</span><br><span class=\"line\"><span class=\"built_in\">let</span> binaryInteger = 0b10001       // 17 - 二进制表示</span><br><span class=\"line\"><span class=\"built_in\">let</span> octalInteger = 0o21           // 17 - 八进制表示</span><br><span class=\"line\"><span class=\"built_in\">let</span> hexadecimalInteger = 0x11     // 17 - 十六进制表示</span><br></pre></td></tr></table></figure></p>\n<p>7.除非特别指定，浮点型字面量的默认推导类型为 Swift 标准库类型中的 Double，表示64位浮点数。</p>\n<p>8.注意：swift3 中已经取消了++、–。</p>\n<p>9.以下为区间运算的简单实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"闭区间运算符:\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> 1...5 &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(index) * 5 = \\(index * 5)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"半开区间运算符:\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> 1..&lt;5 &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(index) * 5 = \\(index * 5)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>10.注意：在大多数语言中，switch 语句块中，case 要紧跟 break，否则 case 之后的语句会顺序运行，而在 Swift 语言中，默认是不会执行下去的，switch 也会终止。如果你想在 Swift 中让 case 之后的语句会按顺序继续运行，则需要使用 fallthrough 语句。</p>\n<p>11.你可以使用 == 来比较两个字符串是否相等</p>\n<p>12.Swift 中不能创建空的 Character（字符） 类型变量或常量</p>\n<p>13.字符串连接字符<br>以下实例演示了使用 String 的 append() 方法来实现字符串连接字符：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\">var varA:String = <span class=\"string\">\"Hello \"</span></span><br><span class=\"line\"><span class=\"built_in\">let</span> varB:Character = <span class=\"string\">\"G\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">varA.append( varB )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"varC  =  \\(varA)\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>14.你可以使用 append() 方法或者赋值运算符 += 在数组末尾添加元素，如下所示，我们初始化一个数组，并向其添加元素</p>\n<p>15.如果我们同时需要每个数据项的值和索引值，可以使用 String 的 enumerate() 方法来进行数组遍历</p>\n<p>16.我们可以使用加法操作符（+）来合并两种已存在的相同类型数组。新数组的数据类型会从两个数组的数据类型中推断出来</p>\n<p>17.我们可以使用 updateValue(forKey:) 增加或更新字典的内容。如果 key 不存在，则添加值，如果存在则修改 key 对应的值。updateValue(_:forKey:)方法返回Optional值.</p>\n<p>18.我们可以使用 removeValueForKey() 方法来移除字典 key-value 对。如果 key 存在该方法返回移除的值，如果不存在返回 nil </p>\n"},{"title":"使用Hexo + Github创建博客","date":"2019-05-14T07:23:33.000Z","_content":"\n### 什么是 Hexo？\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown](https://www.runoob.com/markdown/md-tutorial.html)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 安装\n\n#### 安装前提\n\n- [Node.js](https://nodejs.org/en/) (Should be at least nodejs 6.9)\n- [Git](https://git-scm.com/)\n\n如果你的电脑中已经安装上述必备程序,接下来只需要使用 npm 即可完成 Hexo 的安装。\n\n`$ npm install -g hexo-cli`\n\n如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。\n\n> Mac 用户\n您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -> Download -> Command Line Tools -> Install 安装命令行工具。\n\n#### 安装Git\n\n- Windows：下载并安装 [git](https://git-scm.com/download/win).\n- Mac：使用 [Homebrew](https://brew.sh/), [MacPorts](https://www.macports.org/) ：`brew install git`;或下载 [安装程序](https://sourceforge.net/projects/git-osx-installer/) 安装。\n- Linux (Ubuntu, Debian)：`sudo apt-get install git-core`\n- Linux (Fedora, Red Hat, CentOS)：`sudo yum install git-core`\n\n#### 安装Node.js\n\n安装 Node.js 的最佳方式是使用 [nvm](https://github.com/nvm-sh/nvm)。\n\ncURL:\n\n``` bash\n$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh\n```\n\nWget:\n\n``` bash\n$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh\n```\n\n安装完成后，重启终端并执行下列命令即可安装 Node.js。\n\n```bash\n$ nvm install stable\n```\n\n或者也可以下载 [安装程序](https://nodejs.org/en/) 来安装。\n\n#### 安装 Hexo\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n```bash\n$ npm install -g hexo-cli\n```\n\n### 建站\n\n安装 Hexo 完成后，执行下列命令建站，Hexo 将会在指定文件夹中新建所需要的文件。\n\n```bash\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\n#### 本地预览\n\n此时已经可以本地预览Blog页面了,执行下列命令\n\n```bash\n$ hexo server # 开启本地服务器\n```\n\n终端会输出本地url,默认是[http://localhost:4000](http://localhost:4000),打开可预览本地Blog页面\n\n### 与GitHub建立关联\n\n#### 新建GitHub仓库(如果已经创建,请跳到下一步)\n\n新建一个GitHub仓库,名称为: `用户名.github.io.git # 将用户名替换为你自己的github用户名`\n\n#### 生成 ssh key(如果已经生成,请跳到下一步)\n\n```bash\n$ ssh-keygen -t rsa -C \"your_email@example.com\" # 注意将`your_email`替换成之前注册github帐号时的邮箱\n```\n\n然后进入 `~/.ssh/id_rsa.pub` 路径下,打开`id_rsa.pub`,将内容复制到剪切板\n\n#### 将本电脑的 SSH 公钥配置到 GitHub 上\n\n登录[GitHub](https://github.com/), 点击Settings –> SSH and GPG keys –> New SSH key,将SSH key添加到GitHub账号中\n\n#### 配置_config.yml(在Hexo生成的根目录下)\n\n打开_config.yml,找到deployment模块,将改模块替换为如下格式(**格式要一模一样,包括空格和换行之后的位置**):\n```bash\ndeploy: \n  type: git\n  repo: https://github.com/用户名/用户名.github.io.git\n  branch: master\n ```\n`_config.yml`其他配置参考官方文档 [配置_config.yml](https://hexo.io/zh-cn/docs/configuration)\n\n### 将博客推至远端\n\n#### generate\n\n```bash\n$ hexo generate\n```\n生成静态文件。\n\n选项\t| 描述\n----| ---\n-d, --deploy | 文件生成后立即部署网站\n\n#### deploy\n\n```bash\n$ hexo deploy\n```\n部署网站。\n\n参数\t| 描述\n----| ---\n-g, --generate | 部署之前预先生成静态文件\n\n#### 其他指令\n\n参见 [Hexo指令](https://hexo.io/zh-cn/docs/commands)\n\n### 打开博客页面\n\n浏览器输入:[https://用户名.github.io](https://用户名.github.io),打开博客页面,博客创建成功!\n\n由于Hexo使用MarkDown解析,附上链接[MarkDown语法说明](http://wow.kuapp.com/markdown/)\n\n### 同时部署到Coding\n\n由于GitHub服务器在国外,国内访问速度可能会很慢,所以可以将hexo同时部署到Coding上\n\n#### 注册 Coding 帐号\n注册网址：[Coding官网](https://coding.net/)\n\n#### 将本电脑的 SSH 公钥配置到 Coding 上\n\n方法类似上方\n>将本电脑的 SSH 公钥配置到 GitHub 上\n\n#### 测试 SSH 公钥是否添加成功 \n\n本地打开 Git Bash 窗口，输入一下命令：\n```bash\nssh -T git@coding.net\n```\n这时候会显示是否继续，选择 yes 继续，如果提示下列内容成功，即 SSH 公钥配置成功：\n\n`Hello username You've connected to Coding.net by SSH successfully!`\n\n如果显示如下错误：\n\n`ssh: connect to host coding.net port 22: Connection refused`\n\n说明防火墙完全屏蔽了端口 22 ，这时候不要慌张，直接输入如下命令使用 Coding 提供的 443 端口 SSH 服务即可解决：\n\n```bash\nssh -T -p 443 git@git-ssh.coding.net\n```\n\n然后在输入验证命令，显示 Coding 帐号与相关信息，即 SSH 公钥配置成功。\n\n#### 新建Coding项目\n\n比较简单,按提示设置即可\n特别注意一点:**为了方便访问,Coding的用户名一定要修改(除非使用默认用户名创建项目!!!),默认用户名是网站生成的乱码,如果不修改,则项目地址会根据默认用户名生成,导致部署成功后博客首页展示乱码而且无法跳转.**\n\n新建项目完毕后，打开项目的 Pages 服务选项，选择部署来源为 master 分支.\n\n#### 配置博客主文件，同时部署 Hexo 博客到 GitHub 和 Coding 上\n\n1.打开_config.yml,找到deploy属性,修改如下:\n```bash\ndeploy: \n  type: git\n  repo: \n    github: https://github.com/username/username.github.io.git\n    coding: https://git.dev.tencent.com/username/username.git\n  branch: master\n```\n\n2.打开 Hexo 主目录下的 source 文件，新建文件 Staticfile ，这个文件是 Coding 静态文件部署的标志，注意文件名字必须为 Staticfile(只要生成空文件即可)，否则 Coding 上无法完成静态文件的部署\n\n#### 部署\n\n键入如下命令:\n```bash\nhexo clean && hexo g && hexo d\n```\n\n部署成功，到浏览器地址栏分别输入 GitHub 地址 和 Coding 地址，访问成功：\n\n[https://username.github.io/](https://username.github.io/)\n\n[https://username.coding.me/](https://username.coding.me/)\n\n","source":"_posts/总结/使用Hexo-Github创建博客.md","raw":"---\ntitle: 使用Hexo + Github创建博客\ndate: 2019-05-14 15:23:33\ntags:\ncategories: 总结\n---\n\n### 什么是 Hexo？\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown](https://www.runoob.com/markdown/md-tutorial.html)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 安装\n\n#### 安装前提\n\n- [Node.js](https://nodejs.org/en/) (Should be at least nodejs 6.9)\n- [Git](https://git-scm.com/)\n\n如果你的电脑中已经安装上述必备程序,接下来只需要使用 npm 即可完成 Hexo 的安装。\n\n`$ npm install -g hexo-cli`\n\n如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。\n\n> Mac 用户\n您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -> Download -> Command Line Tools -> Install 安装命令行工具。\n\n#### 安装Git\n\n- Windows：下载并安装 [git](https://git-scm.com/download/win).\n- Mac：使用 [Homebrew](https://brew.sh/), [MacPorts](https://www.macports.org/) ：`brew install git`;或下载 [安装程序](https://sourceforge.net/projects/git-osx-installer/) 安装。\n- Linux (Ubuntu, Debian)：`sudo apt-get install git-core`\n- Linux (Fedora, Red Hat, CentOS)：`sudo yum install git-core`\n\n#### 安装Node.js\n\n安装 Node.js 的最佳方式是使用 [nvm](https://github.com/nvm-sh/nvm)。\n\ncURL:\n\n``` bash\n$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh\n```\n\nWget:\n\n``` bash\n$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh\n```\n\n安装完成后，重启终端并执行下列命令即可安装 Node.js。\n\n```bash\n$ nvm install stable\n```\n\n或者也可以下载 [安装程序](https://nodejs.org/en/) 来安装。\n\n#### 安装 Hexo\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n```bash\n$ npm install -g hexo-cli\n```\n\n### 建站\n\n安装 Hexo 完成后，执行下列命令建站，Hexo 将会在指定文件夹中新建所需要的文件。\n\n```bash\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\n#### 本地预览\n\n此时已经可以本地预览Blog页面了,执行下列命令\n\n```bash\n$ hexo server # 开启本地服务器\n```\n\n终端会输出本地url,默认是[http://localhost:4000](http://localhost:4000),打开可预览本地Blog页面\n\n### 与GitHub建立关联\n\n#### 新建GitHub仓库(如果已经创建,请跳到下一步)\n\n新建一个GitHub仓库,名称为: `用户名.github.io.git # 将用户名替换为你自己的github用户名`\n\n#### 生成 ssh key(如果已经生成,请跳到下一步)\n\n```bash\n$ ssh-keygen -t rsa -C \"your_email@example.com\" # 注意将`your_email`替换成之前注册github帐号时的邮箱\n```\n\n然后进入 `~/.ssh/id_rsa.pub` 路径下,打开`id_rsa.pub`,将内容复制到剪切板\n\n#### 将本电脑的 SSH 公钥配置到 GitHub 上\n\n登录[GitHub](https://github.com/), 点击Settings –> SSH and GPG keys –> New SSH key,将SSH key添加到GitHub账号中\n\n#### 配置_config.yml(在Hexo生成的根目录下)\n\n打开_config.yml,找到deployment模块,将改模块替换为如下格式(**格式要一模一样,包括空格和换行之后的位置**):\n```bash\ndeploy: \n  type: git\n  repo: https://github.com/用户名/用户名.github.io.git\n  branch: master\n ```\n`_config.yml`其他配置参考官方文档 [配置_config.yml](https://hexo.io/zh-cn/docs/configuration)\n\n### 将博客推至远端\n\n#### generate\n\n```bash\n$ hexo generate\n```\n生成静态文件。\n\n选项\t| 描述\n----| ---\n-d, --deploy | 文件生成后立即部署网站\n\n#### deploy\n\n```bash\n$ hexo deploy\n```\n部署网站。\n\n参数\t| 描述\n----| ---\n-g, --generate | 部署之前预先生成静态文件\n\n#### 其他指令\n\n参见 [Hexo指令](https://hexo.io/zh-cn/docs/commands)\n\n### 打开博客页面\n\n浏览器输入:[https://用户名.github.io](https://用户名.github.io),打开博客页面,博客创建成功!\n\n由于Hexo使用MarkDown解析,附上链接[MarkDown语法说明](http://wow.kuapp.com/markdown/)\n\n### 同时部署到Coding\n\n由于GitHub服务器在国外,国内访问速度可能会很慢,所以可以将hexo同时部署到Coding上\n\n#### 注册 Coding 帐号\n注册网址：[Coding官网](https://coding.net/)\n\n#### 将本电脑的 SSH 公钥配置到 Coding 上\n\n方法类似上方\n>将本电脑的 SSH 公钥配置到 GitHub 上\n\n#### 测试 SSH 公钥是否添加成功 \n\n本地打开 Git Bash 窗口，输入一下命令：\n```bash\nssh -T git@coding.net\n```\n这时候会显示是否继续，选择 yes 继续，如果提示下列内容成功，即 SSH 公钥配置成功：\n\n`Hello username You've connected to Coding.net by SSH successfully!`\n\n如果显示如下错误：\n\n`ssh: connect to host coding.net port 22: Connection refused`\n\n说明防火墙完全屏蔽了端口 22 ，这时候不要慌张，直接输入如下命令使用 Coding 提供的 443 端口 SSH 服务即可解决：\n\n```bash\nssh -T -p 443 git@git-ssh.coding.net\n```\n\n然后在输入验证命令，显示 Coding 帐号与相关信息，即 SSH 公钥配置成功。\n\n#### 新建Coding项目\n\n比较简单,按提示设置即可\n特别注意一点:**为了方便访问,Coding的用户名一定要修改(除非使用默认用户名创建项目!!!),默认用户名是网站生成的乱码,如果不修改,则项目地址会根据默认用户名生成,导致部署成功后博客首页展示乱码而且无法跳转.**\n\n新建项目完毕后，打开项目的 Pages 服务选项，选择部署来源为 master 分支.\n\n#### 配置博客主文件，同时部署 Hexo 博客到 GitHub 和 Coding 上\n\n1.打开_config.yml,找到deploy属性,修改如下:\n```bash\ndeploy: \n  type: git\n  repo: \n    github: https://github.com/username/username.github.io.git\n    coding: https://git.dev.tencent.com/username/username.git\n  branch: master\n```\n\n2.打开 Hexo 主目录下的 source 文件，新建文件 Staticfile ，这个文件是 Coding 静态文件部署的标志，注意文件名字必须为 Staticfile(只要生成空文件即可)，否则 Coding 上无法完成静态文件的部署\n\n#### 部署\n\n键入如下命令:\n```bash\nhexo clean && hexo g && hexo d\n```\n\n部署成功，到浏览器地址栏分别输入 GitHub 地址 和 Coding 地址，访问成功：\n\n[https://username.github.io/](https://username.github.io/)\n\n[https://username.coding.me/](https://username.coding.me/)\n\n","slug":"总结/使用Hexo-Github创建博客","published":1,"updated":"2020-08-31T12:13:47.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeihxm290006d7b9ht46i0uk","content":"<h3 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"https://www.runoob.com/markdown/md-tutorial.html\" target=\"_blank\" rel=\"noopener\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h4><ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a> (Should be at least nodejs 6.9)</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a></li>\n</ul>\n<p>如果你的电脑中已经安装上述必备程序,接下来只需要使用 npm 即可完成 Hexo 的安装。</p>\n<p><code>$ npm install -g hexo-cli</code></p>\n<p>如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>\n<blockquote>\n<p>Mac 用户<br>您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p>\n</blockquote>\n<h4 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h4><ul>\n<li>Windows：下载并安装 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git</a>.</li>\n<li>Mac：使用 <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>, <a href=\"https://www.macports.org/\" target=\"_blank\" rel=\"noopener\">MacPorts</a> ：<code>brew install git</code>;或下载 <a href=\"https://sourceforge.net/projects/git-osx-installer/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 安装。</li>\n<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li>\n<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li>\n</ul>\n<h4 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h4><p>安装 Node.js 的最佳方式是使用 <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a>。</p>\n<p>cURL:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>Wget:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install stable</span><br></pre></td></tr></table></figure>\n<p>或者也可以下载 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 来安装。</p>\n<h4 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h3><p>安装 Hexo 完成后，执行下列命令建站，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<h4 id=\"本地预览\"><a href=\"#本地预览\" class=\"headerlink\" title=\"本地预览\"></a>本地预览</h4><p>此时已经可以本地预览Blog页面了,执行下列命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server <span class=\"comment\"># 开启本地服务器</span></span><br></pre></td></tr></table></figure>\n<p>终端会输出本地url,默认是<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>,打开可预览本地Blog页面</p>\n<h3 id=\"与GitHub建立关联\"><a href=\"#与GitHub建立关联\" class=\"headerlink\" title=\"与GitHub建立关联\"></a>与GitHub建立关联</h3><h4 id=\"新建GitHub仓库-如果已经创建-请跳到下一步\"><a href=\"#新建GitHub仓库-如果已经创建-请跳到下一步\" class=\"headerlink\" title=\"新建GitHub仓库(如果已经创建,请跳到下一步)\"></a>新建GitHub仓库(如果已经创建,请跳到下一步)</h4><p>新建一个GitHub仓库,名称为: <code>用户名.github.io.git # 将用户名替换为你自己的github用户名</code></p>\n<h4 id=\"生成-ssh-key-如果已经生成-请跳到下一步\"><a href=\"#生成-ssh-key-如果已经生成-请跳到下一步\" class=\"headerlink\" title=\"生成 ssh key(如果已经生成,请跳到下一步)\"></a>生成 ssh key(如果已经生成,请跳到下一步)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"your_email@example.com\"</span> <span class=\"comment\"># 注意将`your_email`替换成之前注册github帐号时的邮箱</span></span><br></pre></td></tr></table></figure>\n<p>然后进入 <code>~/.ssh/id_rsa.pub</code> 路径下,打开<code>id_rsa.pub</code>,将内容复制到剪切板</p>\n<h4 id=\"将本电脑的-SSH-公钥配置到-GitHub-上\"><a href=\"#将本电脑的-SSH-公钥配置到-GitHub-上\" class=\"headerlink\" title=\"将本电脑的 SSH 公钥配置到 GitHub 上\"></a>将本电脑的 SSH 公钥配置到 GitHub 上</h4><p>登录<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>, 点击Settings –&gt; SSH and GPG keys –&gt; New SSH key,将SSH key添加到GitHub账号中</p>\n<h4 id=\"配置-config-yml-在Hexo生成的根目录下\"><a href=\"#配置-config-yml-在Hexo生成的根目录下\" class=\"headerlink\" title=\"配置_config.yml(在Hexo生成的根目录下)\"></a>配置_config.yml(在Hexo生成的根目录下)</h4><p>打开_config.yml,找到deployment模块,将改模块替换为如下格式(<strong>格式要一模一样,包括空格和换行之后的位置</strong>):<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/用户名/用户名.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p><code>_config.yml</code>其他配置参考官方文档 <a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">配置_config.yml</a></p>\n<h3 id=\"将博客推至远端\"><a href=\"#将博客推至远端\" class=\"headerlink\" title=\"将博客推至远端\"></a>将博客推至远端</h3><h4 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d, –deploy</td>\n<td>文件生成后立即部署网站</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-g, –generate</td>\n<td>部署之前预先生成静态文件</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"其他指令\"><a href=\"#其他指令\" class=\"headerlink\" title=\"其他指令\"></a>其他指令</h4><p>参见 <a href=\"https://hexo.io/zh-cn/docs/commands\" target=\"_blank\" rel=\"noopener\">Hexo指令</a></p>\n<h3 id=\"打开博客页面\"><a href=\"#打开博客页面\" class=\"headerlink\" title=\"打开博客页面\"></a>打开博客页面</h3><p>浏览器输入:<a href=\"https://用户名.github.io\" target=\"_blank\" rel=\"noopener\">https://用户名.github.io</a>,打开博客页面,博客创建成功!</p>\n<p>由于Hexo使用MarkDown解析,附上链接<a href=\"http://wow.kuapp.com/markdown/\" target=\"_blank\" rel=\"noopener\">MarkDown语法说明</a></p>\n<h3 id=\"同时部署到Coding\"><a href=\"#同时部署到Coding\" class=\"headerlink\" title=\"同时部署到Coding\"></a>同时部署到Coding</h3><p>由于GitHub服务器在国外,国内访问速度可能会很慢,所以可以将hexo同时部署到Coding上</p>\n<h4 id=\"注册-Coding-帐号\"><a href=\"#注册-Coding-帐号\" class=\"headerlink\" title=\"注册 Coding 帐号\"></a>注册 Coding 帐号</h4><p>注册网址：<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding官网</a></p>\n<h4 id=\"将本电脑的-SSH-公钥配置到-Coding-上\"><a href=\"#将本电脑的-SSH-公钥配置到-Coding-上\" class=\"headerlink\" title=\"将本电脑的 SSH 公钥配置到 Coding 上\"></a>将本电脑的 SSH 公钥配置到 Coding 上</h4><p>方法类似上方</p>\n<blockquote>\n<p>将本电脑的 SSH 公钥配置到 GitHub 上</p>\n</blockquote>\n<h4 id=\"测试-SSH-公钥是否添加成功\"><a href=\"#测试-SSH-公钥是否添加成功\" class=\"headerlink\" title=\"测试 SSH 公钥是否添加成功\"></a>测试 SSH 公钥是否添加成功</h4><p>本地打开 Git Bash 窗口，输入一下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@coding.net</span><br></pre></td></tr></table></figure></p>\n<p>这时候会显示是否继续，选择 yes 继续，如果提示下列内容成功，即 SSH 公钥配置成功：</p>\n<p><code>Hello username You&#39;ve connected to Coding.net by SSH successfully!</code></p>\n<p>如果显示如下错误：</p>\n<p><code>ssh: connect to host coding.net port 22: Connection refused</code></p>\n<p>说明防火墙完全屏蔽了端口 22 ，这时候不要慌张，直接输入如下命令使用 Coding 提供的 443 端口 SSH 服务即可解决：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T -p 443 git@git-ssh.coding.net</span><br></pre></td></tr></table></figure>\n<p>然后在输入验证命令，显示 Coding 帐号与相关信息，即 SSH 公钥配置成功。</p>\n<h4 id=\"新建Coding项目\"><a href=\"#新建Coding项目\" class=\"headerlink\" title=\"新建Coding项目\"></a>新建Coding项目</h4><p>比较简单,按提示设置即可<br>特别注意一点:<strong>为了方便访问,Coding的用户名一定要修改(除非使用默认用户名创建项目!!!),默认用户名是网站生成的乱码,如果不修改,则项目地址会根据默认用户名生成,导致部署成功后博客首页展示乱码而且无法跳转.</strong></p>\n<p>新建项目完毕后，打开项目的 Pages 服务选项，选择部署来源为 master 分支.</p>\n<h4 id=\"配置博客主文件，同时部署-Hexo-博客到-GitHub-和-Coding-上\"><a href=\"#配置博客主文件，同时部署-Hexo-博客到-GitHub-和-Coding-上\" class=\"headerlink\" title=\"配置博客主文件，同时部署 Hexo 博客到 GitHub 和 Coding 上\"></a>配置博客主文件，同时部署 Hexo 博客到 GitHub 和 Coding 上</h4><p>1.打开_config.yml,找到deploy属性,修改如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: </span><br><span class=\"line\">    github: https://github.com/username/username.github.io.git</span><br><span class=\"line\">    coding: https://git.dev.tencent.com/username/username.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p>2.打开 Hexo 主目录下的 source 文件，新建文件 Staticfile ，这个文件是 Coding 静态文件部署的标志，注意文件名字必须为 Staticfile(只要生成空文件即可)，否则 Coding 上无法完成静态文件的部署</p>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>键入如下命令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p>\n<p>部署成功，到浏览器地址栏分别输入 GitHub 地址 和 Coding 地址，访问成功：</p>\n<p><a href=\"https://username.github.io/\" target=\"_blank\" rel=\"noopener\">https://username.github.io/</a></p>\n<p><a href=\"https://username.coding.me/\" target=\"_blank\" rel=\"noopener\">https://username.coding.me/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"https://www.runoob.com/markdown/md-tutorial.html\" target=\"_blank\" rel=\"noopener\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h4><ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a> (Should be at least nodejs 6.9)</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a></li>\n</ul>\n<p>如果你的电脑中已经安装上述必备程序,接下来只需要使用 npm 即可完成 Hexo 的安装。</p>\n<p><code>$ npm install -g hexo-cli</code></p>\n<p>如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>\n<blockquote>\n<p>Mac 用户<br>您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p>\n</blockquote>\n<h4 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h4><ul>\n<li>Windows：下载并安装 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git</a>.</li>\n<li>Mac：使用 <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>, <a href=\"https://www.macports.org/\" target=\"_blank\" rel=\"noopener\">MacPorts</a> ：<code>brew install git</code>;或下载 <a href=\"https://sourceforge.net/projects/git-osx-installer/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 安装。</li>\n<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li>\n<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li>\n</ul>\n<h4 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h4><p>安装 Node.js 的最佳方式是使用 <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a>。</p>\n<p>cURL:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>Wget:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install stable</span><br></pre></td></tr></table></figure>\n<p>或者也可以下载 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">安装程序</a> 来安装。</p>\n<h4 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h3><p>安装 Hexo 完成后，执行下列命令建站，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<h4 id=\"本地预览\"><a href=\"#本地预览\" class=\"headerlink\" title=\"本地预览\"></a>本地预览</h4><p>此时已经可以本地预览Blog页面了,执行下列命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server <span class=\"comment\"># 开启本地服务器</span></span><br></pre></td></tr></table></figure>\n<p>终端会输出本地url,默认是<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>,打开可预览本地Blog页面</p>\n<h3 id=\"与GitHub建立关联\"><a href=\"#与GitHub建立关联\" class=\"headerlink\" title=\"与GitHub建立关联\"></a>与GitHub建立关联</h3><h4 id=\"新建GitHub仓库-如果已经创建-请跳到下一步\"><a href=\"#新建GitHub仓库-如果已经创建-请跳到下一步\" class=\"headerlink\" title=\"新建GitHub仓库(如果已经创建,请跳到下一步)\"></a>新建GitHub仓库(如果已经创建,请跳到下一步)</h4><p>新建一个GitHub仓库,名称为: <code>用户名.github.io.git # 将用户名替换为你自己的github用户名</code></p>\n<h4 id=\"生成-ssh-key-如果已经生成-请跳到下一步\"><a href=\"#生成-ssh-key-如果已经生成-请跳到下一步\" class=\"headerlink\" title=\"生成 ssh key(如果已经生成,请跳到下一步)\"></a>生成 ssh key(如果已经生成,请跳到下一步)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"your_email@example.com\"</span> <span class=\"comment\"># 注意将`your_email`替换成之前注册github帐号时的邮箱</span></span><br></pre></td></tr></table></figure>\n<p>然后进入 <code>~/.ssh/id_rsa.pub</code> 路径下,打开<code>id_rsa.pub</code>,将内容复制到剪切板</p>\n<h4 id=\"将本电脑的-SSH-公钥配置到-GitHub-上\"><a href=\"#将本电脑的-SSH-公钥配置到-GitHub-上\" class=\"headerlink\" title=\"将本电脑的 SSH 公钥配置到 GitHub 上\"></a>将本电脑的 SSH 公钥配置到 GitHub 上</h4><p>登录<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>, 点击Settings –&gt; SSH and GPG keys –&gt; New SSH key,将SSH key添加到GitHub账号中</p>\n<h4 id=\"配置-config-yml-在Hexo生成的根目录下\"><a href=\"#配置-config-yml-在Hexo生成的根目录下\" class=\"headerlink\" title=\"配置_config.yml(在Hexo生成的根目录下)\"></a>配置_config.yml(在Hexo生成的根目录下)</h4><p>打开_config.yml,找到deployment模块,将改模块替换为如下格式(<strong>格式要一模一样,包括空格和换行之后的位置</strong>):<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/用户名/用户名.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p><code>_config.yml</code>其他配置参考官方文档 <a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">配置_config.yml</a></p>\n<h3 id=\"将博客推至远端\"><a href=\"#将博客推至远端\" class=\"headerlink\" title=\"将博客推至远端\"></a>将博客推至远端</h3><h4 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d, –deploy</td>\n<td>文件生成后立即部署网站</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-g, –generate</td>\n<td>部署之前预先生成静态文件</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"其他指令\"><a href=\"#其他指令\" class=\"headerlink\" title=\"其他指令\"></a>其他指令</h4><p>参见 <a href=\"https://hexo.io/zh-cn/docs/commands\" target=\"_blank\" rel=\"noopener\">Hexo指令</a></p>\n<h3 id=\"打开博客页面\"><a href=\"#打开博客页面\" class=\"headerlink\" title=\"打开博客页面\"></a>打开博客页面</h3><p>浏览器输入:<a href=\"https://用户名.github.io\" target=\"_blank\" rel=\"noopener\">https://用户名.github.io</a>,打开博客页面,博客创建成功!</p>\n<p>由于Hexo使用MarkDown解析,附上链接<a href=\"http://wow.kuapp.com/markdown/\" target=\"_blank\" rel=\"noopener\">MarkDown语法说明</a></p>\n<h3 id=\"同时部署到Coding\"><a href=\"#同时部署到Coding\" class=\"headerlink\" title=\"同时部署到Coding\"></a>同时部署到Coding</h3><p>由于GitHub服务器在国外,国内访问速度可能会很慢,所以可以将hexo同时部署到Coding上</p>\n<h4 id=\"注册-Coding-帐号\"><a href=\"#注册-Coding-帐号\" class=\"headerlink\" title=\"注册 Coding 帐号\"></a>注册 Coding 帐号</h4><p>注册网址：<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding官网</a></p>\n<h4 id=\"将本电脑的-SSH-公钥配置到-Coding-上\"><a href=\"#将本电脑的-SSH-公钥配置到-Coding-上\" class=\"headerlink\" title=\"将本电脑的 SSH 公钥配置到 Coding 上\"></a>将本电脑的 SSH 公钥配置到 Coding 上</h4><p>方法类似上方</p>\n<blockquote>\n<p>将本电脑的 SSH 公钥配置到 GitHub 上</p>\n</blockquote>\n<h4 id=\"测试-SSH-公钥是否添加成功\"><a href=\"#测试-SSH-公钥是否添加成功\" class=\"headerlink\" title=\"测试 SSH 公钥是否添加成功\"></a>测试 SSH 公钥是否添加成功</h4><p>本地打开 Git Bash 窗口，输入一下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@coding.net</span><br></pre></td></tr></table></figure></p>\n<p>这时候会显示是否继续，选择 yes 继续，如果提示下列内容成功，即 SSH 公钥配置成功：</p>\n<p><code>Hello username You&#39;ve connected to Coding.net by SSH successfully!</code></p>\n<p>如果显示如下错误：</p>\n<p><code>ssh: connect to host coding.net port 22: Connection refused</code></p>\n<p>说明防火墙完全屏蔽了端口 22 ，这时候不要慌张，直接输入如下命令使用 Coding 提供的 443 端口 SSH 服务即可解决：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T -p 443 git@git-ssh.coding.net</span><br></pre></td></tr></table></figure>\n<p>然后在输入验证命令，显示 Coding 帐号与相关信息，即 SSH 公钥配置成功。</p>\n<h4 id=\"新建Coding项目\"><a href=\"#新建Coding项目\" class=\"headerlink\" title=\"新建Coding项目\"></a>新建Coding项目</h4><p>比较简单,按提示设置即可<br>特别注意一点:<strong>为了方便访问,Coding的用户名一定要修改(除非使用默认用户名创建项目!!!),默认用户名是网站生成的乱码,如果不修改,则项目地址会根据默认用户名生成,导致部署成功后博客首页展示乱码而且无法跳转.</strong></p>\n<p>新建项目完毕后，打开项目的 Pages 服务选项，选择部署来源为 master 分支.</p>\n<h4 id=\"配置博客主文件，同时部署-Hexo-博客到-GitHub-和-Coding-上\"><a href=\"#配置博客主文件，同时部署-Hexo-博客到-GitHub-和-Coding-上\" class=\"headerlink\" title=\"配置博客主文件，同时部署 Hexo 博客到 GitHub 和 Coding 上\"></a>配置博客主文件，同时部署 Hexo 博客到 GitHub 和 Coding 上</h4><p>1.打开_config.yml,找到deploy属性,修改如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: </span><br><span class=\"line\">    github: https://github.com/username/username.github.io.git</span><br><span class=\"line\">    coding: https://git.dev.tencent.com/username/username.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p>2.打开 Hexo 主目录下的 source 文件，新建文件 Staticfile ，这个文件是 Coding 静态文件部署的标志，注意文件名字必须为 Staticfile(只要生成空文件即可)，否则 Coding 上无法完成静态文件的部署</p>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>键入如下命令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p>\n<p>部署成功，到浏览器地址栏分别输入 GitHub 地址 和 Coding 地址，访问成功：</p>\n<p><a href=\"https://username.github.io/\" target=\"_blank\" rel=\"noopener\">https://username.github.io/</a></p>\n<p><a href=\"https://username.coding.me/\" target=\"_blank\" rel=\"noopener\">https://username.coding.me/</a></p>\n"},{"title":"备忘录","date":"2019-06-11T12:55:51.000Z","_content":"\n### Drops\n\n1.带有transform info的控件,千万不能再使用frame属性,此时的frame属性已经不准了,使用bounds和center进行设置!!!\n\n2.view的布局如果不是整数像素级,可能会导致部分被裁剪,对于小的图片来说,是肉眼可见的","source":"_posts/备忘录/备忘录.md","raw":"---\ntitle: 备忘录\ndate: 2019-06-11 20:55:51\ntags: Drops\ncategories: 备忘录\n---\n\n### Drops\n\n1.带有transform info的控件,千万不能再使用frame属性,此时的frame属性已经不准了,使用bounds和center进行设置!!!\n\n2.view的布局如果不是整数像素级,可能会导致部分被裁剪,对于小的图片来说,是肉眼可见的","slug":"备忘录/备忘录","published":1,"updated":"2019-06-28T09:12:40.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeihxm2c0008d7b98m59996c","content":"<h3 id=\"Drops\"><a href=\"#Drops\" class=\"headerlink\" title=\"Drops\"></a>Drops</h3><p>1.带有transform info的控件,千万不能再使用frame属性,此时的frame属性已经不准了,使用bounds和center进行设置!!!</p>\n<p>2.view的布局如果不是整数像素级,可能会导致部分被裁剪,对于小的图片来说,是肉眼可见的</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Drops\"><a href=\"#Drops\" class=\"headerlink\" title=\"Drops\"></a>Drops</h3><p>1.带有transform info的控件,千万不能再使用frame属性,此时的frame属性已经不准了,使用bounds和center进行设置!!!</p>\n<p>2.view的布局如果不是整数像素级,可能会导致部分被裁剪,对于小的图片来说,是肉眼可见的</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckeihxm1z0001d7b93doisiyn","category_id":"ckeihxm240003d7b9kfl21yfs","_id":"ckeihxm2d000ad7b9fr6cwlhu"},{"post_id":"ckeihxm220002d7b9g8oqw8b2","category_id":"ckeihxm240003d7b9kfl21yfs","_id":"ckeihxm2f000cd7b9yyebua3i"},{"post_id":"ckeihxm260004d7b98uagwwt8","category_id":"ckeihxm2d0009d7b9391gkkbh","_id":"ckeihxm2f000fd7b9h2u2q6mi"},{"post_id":"ckeihxm280005d7b99lco9yam","category_id":"ckeihxm2f000dd7b962oqg84k","_id":"ckeihxm2g000hd7b9gdrdm4xi"},{"post_id":"ckeihxm290006d7b9ht46i0uk","category_id":"ckeihxm2f000gd7b9tqc2znws","_id":"ckeihxm2g000jd7b9ato53p4p"},{"post_id":"ckeihxm2c0008d7b98m59996c","category_id":"ckeihxm2g000id7b9teefw7pj","_id":"ckeihxm2h000kd7b91cxqobrj"}],"PostTag":[{"post_id":"ckeihxm2c0008d7b98m59996c","tag_id":"ckeihxm2e000bd7b9ol72rzox","_id":"ckeihxm2f000ed7b9qhxumnks"}],"Tag":[{"name":"Drops","_id":"ckeihxm2e000bd7b9ol72rzox"}]}}